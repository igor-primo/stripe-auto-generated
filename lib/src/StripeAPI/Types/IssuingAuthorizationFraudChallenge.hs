{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingAuthorizationFraudChallenge
module StripeAPI.Types.IssuingAuthorizationFraudChallenge where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_authorization_fraud_challenge@ in the specification.
data IssuingAuthorizationFraudChallenge = IssuingAuthorizationFraudChallenge
  { -- | status: The status of the fraud challenge.
    issuingAuthorizationFraudChallengeStatus :: IssuingAuthorizationFraudChallengeStatus',
    -- | undeliverable_reason: If the challenge is not deliverable, the reason why.
    issuingAuthorizationFraudChallengeUndeliverableReason :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFraudChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= issuingAuthorizationFraudChallengeStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("undeliverable_reason" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFraudChallengeUndeliverableReason obj) : ["channel" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "sms"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= issuingAuthorizationFraudChallengeStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("undeliverable_reason" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFraudChallengeUndeliverableReason obj) : ["channel" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "sms"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFraudChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationFraudChallenge" (\obj -> (GHC.Base.pure IssuingAuthorizationFraudChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "undeliverable_reason"))

-- | Create a new 'IssuingAuthorizationFraudChallenge' with all required fields.
mkIssuingAuthorizationFraudChallenge ::
  -- | 'issuingAuthorizationFraudChallengeStatus'
  IssuingAuthorizationFraudChallengeStatus' ->
  IssuingAuthorizationFraudChallenge
mkIssuingAuthorizationFraudChallenge issuingAuthorizationFraudChallengeStatus =
  IssuingAuthorizationFraudChallenge
    { issuingAuthorizationFraudChallengeStatus = issuingAuthorizationFraudChallengeStatus,
      issuingAuthorizationFraudChallengeUndeliverableReason = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.issuing_authorization_fraud_challenge.properties.status@ in the specification.
--
-- The status of the fraud challenge.
data IssuingAuthorizationFraudChallengeStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingAuthorizationFraudChallengeStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingAuthorizationFraudChallengeStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"expired"@
    IssuingAuthorizationFraudChallengeStatus'EnumExpired
  | -- | Represents the JSON value @"pending"@
    IssuingAuthorizationFraudChallengeStatus'EnumPending
  | -- | Represents the JSON value @"rejected"@
    IssuingAuthorizationFraudChallengeStatus'EnumRejected
  | -- | Represents the JSON value @"undeliverable"@
    IssuingAuthorizationFraudChallengeStatus'EnumUndeliverable
  | -- | Represents the JSON value @"verified"@
    IssuingAuthorizationFraudChallengeStatus'EnumVerified
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFraudChallengeStatus' where
  toJSON (IssuingAuthorizationFraudChallengeStatus'Other val) = val
  toJSON (IssuingAuthorizationFraudChallengeStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingAuthorizationFraudChallengeStatus'EnumExpired) = "expired"
  toJSON (IssuingAuthorizationFraudChallengeStatus'EnumPending) = "pending"
  toJSON (IssuingAuthorizationFraudChallengeStatus'EnumRejected) = "rejected"
  toJSON (IssuingAuthorizationFraudChallengeStatus'EnumUndeliverable) = "undeliverable"
  toJSON (IssuingAuthorizationFraudChallengeStatus'EnumVerified) = "verified"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFraudChallengeStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "expired" -> IssuingAuthorizationFraudChallengeStatus'EnumExpired
          | val GHC.Classes.== "pending" -> IssuingAuthorizationFraudChallengeStatus'EnumPending
          | val GHC.Classes.== "rejected" -> IssuingAuthorizationFraudChallengeStatus'EnumRejected
          | val GHC.Classes.== "undeliverable" -> IssuingAuthorizationFraudChallengeStatus'EnumUndeliverable
          | val GHC.Classes.== "verified" -> IssuingAuthorizationFraudChallengeStatus'EnumVerified
          | GHC.Base.otherwise -> IssuingAuthorizationFraudChallengeStatus'Other val
      )

-- | Defines the enum schema located at @components.schemas.issuing_authorization_fraud_challenge.properties.undeliverable_reason@ in the specification.
--
-- If the challenge is not deliverable, the reason why.
data IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"no_phone_number"@
    IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullableEnumNoPhoneNumber
  | -- | Represents the JSON value @"unsupported_phone_number"@
    IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullableEnumUnsupportedPhoneNumber
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullable where
  toJSON (IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullableOther val) = val
  toJSON (IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullableEnumNoPhoneNumber) = "no_phone_number"
  toJSON (IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullableEnumUnsupportedPhoneNumber) = "unsupported_phone_number"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "no_phone_number" -> IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullableEnumNoPhoneNumber
          | val GHC.Classes.== "unsupported_phone_number" -> IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullableEnumUnsupportedPhoneNumber
          | GHC.Base.otherwise -> IssuingAuthorizationFraudChallengeUndeliverableReason'NonNullableOther val
      )
