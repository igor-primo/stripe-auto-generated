{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingTransactionFleetReportedBreakdown
module StripeAPI.Types.IssuingTransactionFleetReportedBreakdown where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.IssuingTransactionFleetFuelPriceData
import {-# SOURCE #-} StripeAPI.Types.IssuingTransactionFleetNonFuelPriceData
import {-# SOURCE #-} StripeAPI.Types.IssuingTransactionFleetTaxData
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_transaction_fleet_reported_breakdown@ in the specification.
data IssuingTransactionFleetReportedBreakdown = IssuingTransactionFleetReportedBreakdown
  { -- | fuel: Breakdown of fuel portion of the purchase.
    issuingTransactionFleetReportedBreakdownFuel :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingTransactionFleetReportedBreakdownFuel'NonNullable)),
    -- | non_fuel: Breakdown of non-fuel portion of the purchase.
    issuingTransactionFleetReportedBreakdownNonFuel :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingTransactionFleetReportedBreakdownNonFuel'NonNullable)),
    -- | tax: Information about tax included in this transaction.
    issuingTransactionFleetReportedBreakdownTax :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingTransactionFleetReportedBreakdownTax'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingTransactionFleetReportedBreakdown where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fuel" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownFuel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("non_fuel" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownNonFuel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownTax obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fuel" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownFuel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("non_fuel" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownNonFuel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownTax obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingTransactionFleetReportedBreakdown where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingTransactionFleetReportedBreakdown" (\obj -> ((GHC.Base.pure IssuingTransactionFleetReportedBreakdown GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fuel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "non_fuel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax"))

-- | Create a new 'IssuingTransactionFleetReportedBreakdown' with all required fields.
mkIssuingTransactionFleetReportedBreakdown :: IssuingTransactionFleetReportedBreakdown
mkIssuingTransactionFleetReportedBreakdown =
  IssuingTransactionFleetReportedBreakdown
    { issuingTransactionFleetReportedBreakdownFuel = GHC.Maybe.Nothing,
      issuingTransactionFleetReportedBreakdownNonFuel = GHC.Maybe.Nothing,
      issuingTransactionFleetReportedBreakdownTax = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.issuing_transaction_fleet_reported_breakdown.properties.fuel.anyOf@ in the specification.
--
-- Breakdown of fuel portion of the purchase.
data IssuingTransactionFleetReportedBreakdownFuel'NonNullable = IssuingTransactionFleetReportedBreakdownFuel'NonNullable
  { -- | gross_amount_decimal: Gross fuel amount that should equal Fuel Volume multipled by Fuel Unit Cost, inclusive of taxes.
    issuingTransactionFleetReportedBreakdownFuel'NonNullableGrossAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingTransactionFleetReportedBreakdownFuel'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gross_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownFuel'NonNullableGrossAmountDecimal obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gross_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownFuel'NonNullableGrossAmountDecimal obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingTransactionFleetReportedBreakdownFuel'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingTransactionFleetReportedBreakdownFuel'NonNullable" (\obj -> GHC.Base.pure IssuingTransactionFleetReportedBreakdownFuel'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gross_amount_decimal"))

-- | Create a new 'IssuingTransactionFleetReportedBreakdownFuel'NonNullable' with all required fields.
mkIssuingTransactionFleetReportedBreakdownFuel'NonNullable :: IssuingTransactionFleetReportedBreakdownFuel'NonNullable
mkIssuingTransactionFleetReportedBreakdownFuel'NonNullable = IssuingTransactionFleetReportedBreakdownFuel'NonNullable {issuingTransactionFleetReportedBreakdownFuel'NonNullableGrossAmountDecimal = GHC.Maybe.Nothing}

-- | Defines the object schema located at @components.schemas.issuing_transaction_fleet_reported_breakdown.properties.non_fuel.anyOf@ in the specification.
--
-- Breakdown of non-fuel portion of the purchase.
data IssuingTransactionFleetReportedBreakdownNonFuel'NonNullable = IssuingTransactionFleetReportedBreakdownNonFuel'NonNullable
  { -- | gross_amount_decimal: Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes.
    issuingTransactionFleetReportedBreakdownNonFuel'NonNullableGrossAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingTransactionFleetReportedBreakdownNonFuel'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gross_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownNonFuel'NonNullableGrossAmountDecimal obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gross_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownNonFuel'NonNullableGrossAmountDecimal obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingTransactionFleetReportedBreakdownNonFuel'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingTransactionFleetReportedBreakdownNonFuel'NonNullable" (\obj -> GHC.Base.pure IssuingTransactionFleetReportedBreakdownNonFuel'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gross_amount_decimal"))

-- | Create a new 'IssuingTransactionFleetReportedBreakdownNonFuel'NonNullable' with all required fields.
mkIssuingTransactionFleetReportedBreakdownNonFuel'NonNullable :: IssuingTransactionFleetReportedBreakdownNonFuel'NonNullable
mkIssuingTransactionFleetReportedBreakdownNonFuel'NonNullable = IssuingTransactionFleetReportedBreakdownNonFuel'NonNullable {issuingTransactionFleetReportedBreakdownNonFuel'NonNullableGrossAmountDecimal = GHC.Maybe.Nothing}

-- | Defines the object schema located at @components.schemas.issuing_transaction_fleet_reported_breakdown.properties.tax.anyOf@ in the specification.
--
-- Information about tax included in this transaction.
data IssuingTransactionFleetReportedBreakdownTax'NonNullable = IssuingTransactionFleetReportedBreakdownTax'NonNullable
  { -- | local_amount_decimal: Amount of state or provincial Sales Tax included in the transaction amount. Null if not reported by merchant or not subject to tax.
    issuingTransactionFleetReportedBreakdownTax'NonNullableLocalAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | national_amount_decimal: Amount of national Sales Tax or VAT included in the transaction amount. Null if not reported by merchant or not subject to tax.
    issuingTransactionFleetReportedBreakdownTax'NonNullableNationalAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingTransactionFleetReportedBreakdownTax'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownTax'NonNullableLocalAmountDecimal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("national_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownTax'NonNullableNationalAmountDecimal obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownTax'NonNullableLocalAmountDecimal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("national_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingTransactionFleetReportedBreakdownTax'NonNullableNationalAmountDecimal obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingTransactionFleetReportedBreakdownTax'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingTransactionFleetReportedBreakdownTax'NonNullable" (\obj -> (GHC.Base.pure IssuingTransactionFleetReportedBreakdownTax'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "local_amount_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "national_amount_decimal"))

-- | Create a new 'IssuingTransactionFleetReportedBreakdownTax'NonNullable' with all required fields.
mkIssuingTransactionFleetReportedBreakdownTax'NonNullable :: IssuingTransactionFleetReportedBreakdownTax'NonNullable
mkIssuingTransactionFleetReportedBreakdownTax'NonNullable =
  IssuingTransactionFleetReportedBreakdownTax'NonNullable
    { issuingTransactionFleetReportedBreakdownTax'NonNullableLocalAmountDecimal = GHC.Maybe.Nothing,
      issuingTransactionFleetReportedBreakdownTax'NonNullableNationalAmountDecimal = GHC.Maybe.Nothing
    }
