{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema BillingBillResourceInvoicingTaxesTax
module StripeAPI.Types.BillingBillResourceInvoicingTaxesTax where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.BillingBillResourceInvoicingTaxesTaxRateDetails
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.billing_bill_resource_invoicing_taxes_tax@ in the specification.
data BillingBillResourceInvoicingTaxesTax = BillingBillResourceInvoicingTaxesTax
  { -- | amount: The amount of the tax, in cents (or local equivalent).
    billingBillResourceInvoicingTaxesTaxAmount :: GHC.Types.Int,
    -- | tax_behavior: Whether this tax is inclusive or exclusive.
    billingBillResourceInvoicingTaxesTaxTaxBehavior :: BillingBillResourceInvoicingTaxesTaxTaxBehavior',
    -- | tax_rate_details: Additional details about the tax rate. Only present when \`type\` is \`tax_rate_details\`.
    billingBillResourceInvoicingTaxesTaxTaxRateDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable BillingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullable)),
    -- | taxability_reason: The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
    billingBillResourceInvoicingTaxesTaxTaxabilityReason :: BillingBillResourceInvoicingTaxesTaxTaxabilityReason',
    -- | taxable_amount: The amount on which tax is calculated, in cents (or local equivalent).
    billingBillResourceInvoicingTaxesTaxTaxableAmount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON BillingBillResourceInvoicingTaxesTax where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= billingBillResourceInvoicingTaxesTaxAmount obj] : ["tax_behavior" Data.Aeson.Types.ToJSON..= billingBillResourceInvoicingTaxesTaxTaxBehavior obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_rate_details" Data.Aeson.Types.ToJSON..=)) (billingBillResourceInvoicingTaxesTaxTaxRateDetails obj) : ["taxability_reason" Data.Aeson.Types.ToJSON..= billingBillResourceInvoicingTaxesTaxTaxabilityReason obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("taxable_amount" Data.Aeson.Types.ToJSON..=)) (billingBillResourceInvoicingTaxesTaxTaxableAmount obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "tax_rate_details"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= billingBillResourceInvoicingTaxesTaxAmount obj] : ["tax_behavior" Data.Aeson.Types.ToJSON..= billingBillResourceInvoicingTaxesTaxTaxBehavior obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_rate_details" Data.Aeson.Types.ToJSON..=)) (billingBillResourceInvoicingTaxesTaxTaxRateDetails obj) : ["taxability_reason" Data.Aeson.Types.ToJSON..= billingBillResourceInvoicingTaxesTaxTaxabilityReason obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("taxable_amount" Data.Aeson.Types.ToJSON..=)) (billingBillResourceInvoicingTaxesTaxTaxableAmount obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "tax_rate_details"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON BillingBillResourceInvoicingTaxesTax where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "BillingBillResourceInvoicingTaxesTax" (\obj -> ((((GHC.Base.pure BillingBillResourceInvoicingTaxesTax GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tax_behavior")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_rate_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "taxability_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "taxable_amount"))

-- | Create a new 'BillingBillResourceInvoicingTaxesTax' with all required fields.
mkBillingBillResourceInvoicingTaxesTax ::
  -- | 'billingBillResourceInvoicingTaxesTaxAmount'
  GHC.Types.Int ->
  -- | 'billingBillResourceInvoicingTaxesTaxTaxBehavior'
  BillingBillResourceInvoicingTaxesTaxTaxBehavior' ->
  -- | 'billingBillResourceInvoicingTaxesTaxTaxabilityReason'
  BillingBillResourceInvoicingTaxesTaxTaxabilityReason' ->
  BillingBillResourceInvoicingTaxesTax
mkBillingBillResourceInvoicingTaxesTax billingBillResourceInvoicingTaxesTaxAmount billingBillResourceInvoicingTaxesTaxTaxBehavior billingBillResourceInvoicingTaxesTaxTaxabilityReason =
  BillingBillResourceInvoicingTaxesTax
    { billingBillResourceInvoicingTaxesTaxAmount = billingBillResourceInvoicingTaxesTaxAmount,
      billingBillResourceInvoicingTaxesTaxTaxBehavior = billingBillResourceInvoicingTaxesTaxTaxBehavior,
      billingBillResourceInvoicingTaxesTaxTaxRateDetails = GHC.Maybe.Nothing,
      billingBillResourceInvoicingTaxesTaxTaxabilityReason = billingBillResourceInvoicingTaxesTaxTaxabilityReason,
      billingBillResourceInvoicingTaxesTaxTaxableAmount = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.billing_bill_resource_invoicing_taxes_tax.properties.tax_behavior@ in the specification.
--
-- Whether this tax is inclusive or exclusive.
data BillingBillResourceInvoicingTaxesTaxTaxBehavior'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    BillingBillResourceInvoicingTaxesTaxTaxBehavior'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    BillingBillResourceInvoicingTaxesTaxTaxBehavior'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"exclusive"@
    BillingBillResourceInvoicingTaxesTaxTaxBehavior'EnumExclusive
  | -- | Represents the JSON value @"inclusive"@
    BillingBillResourceInvoicingTaxesTaxTaxBehavior'EnumInclusive
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON BillingBillResourceInvoicingTaxesTaxTaxBehavior' where
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxBehavior'Other val) = val
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxBehavior'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxBehavior'EnumExclusive) = "exclusive"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxBehavior'EnumInclusive) = "inclusive"

instance Data.Aeson.Types.FromJSON.FromJSON BillingBillResourceInvoicingTaxesTaxTaxBehavior' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "exclusive" -> BillingBillResourceInvoicingTaxesTaxTaxBehavior'EnumExclusive
          | val GHC.Classes.== "inclusive" -> BillingBillResourceInvoicingTaxesTaxTaxBehavior'EnumInclusive
          | GHC.Base.otherwise -> BillingBillResourceInvoicingTaxesTaxTaxBehavior'Other val
      )

-- | Defines the object schema located at @components.schemas.billing_bill_resource_invoicing_taxes_tax.properties.tax_rate_details.anyOf@ in the specification.
--
-- Additional details about the tax rate. Only present when \\\`type\\\` is \\\`tax_rate_details\\\`.
data BillingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullable = BillingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullable
  { -- | tax_rate
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    billingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullableTaxRate :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON BillingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_rate" Data.Aeson.Types.ToJSON..=)) (billingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullableTaxRate obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_rate" Data.Aeson.Types.ToJSON..=)) (billingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullableTaxRate obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON BillingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "BillingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullable" (\obj -> GHC.Base.pure BillingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_rate"))

-- | Create a new 'BillingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullable' with all required fields.
mkBillingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullable :: BillingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullable
mkBillingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullable = BillingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullable {billingBillResourceInvoicingTaxesTaxTaxRateDetails'NonNullableTaxRate = GHC.Maybe.Nothing}

-- | Defines the enum schema located at @components.schemas.billing_bill_resource_invoicing_taxes_tax.properties.taxability_reason@ in the specification.
--
-- The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
data BillingBillResourceInvoicingTaxesTaxTaxabilityReason'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"customer_exempt"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumCustomerExempt
  | -- | Represents the JSON value @"not_available"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumNotAvailable
  | -- | Represents the JSON value @"not_collecting"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumNotCollecting
  | -- | Represents the JSON value @"not_subject_to_tax"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumNotSubjectToTax
  | -- | Represents the JSON value @"not_supported"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumNotSupported
  | -- | Represents the JSON value @"portion_product_exempt"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumPortionProductExempt
  | -- | Represents the JSON value @"portion_reduced_rated"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumPortionReducedRated
  | -- | Represents the JSON value @"portion_standard_rated"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumPortionStandardRated
  | -- | Represents the JSON value @"product_exempt"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumProductExempt
  | -- | Represents the JSON value @"product_exempt_holiday"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumProductExemptHoliday
  | -- | Represents the JSON value @"proportionally_rated"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumProportionallyRated
  | -- | Represents the JSON value @"reduced_rated"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumReducedRated
  | -- | Represents the JSON value @"reverse_charge"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumReverseCharge
  | -- | Represents the JSON value @"standard_rated"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumStandardRated
  | -- | Represents the JSON value @"taxable_basis_reduced"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumTaxableBasisReduced
  | -- | Represents the JSON value @"zero_rated"@
    BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumZeroRated
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON BillingBillResourceInvoicingTaxesTaxTaxabilityReason' where
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'Other val) = val
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumCustomerExempt) = "customer_exempt"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumNotAvailable) = "not_available"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumNotCollecting) = "not_collecting"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumNotSubjectToTax) = "not_subject_to_tax"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumNotSupported) = "not_supported"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumPortionProductExempt) = "portion_product_exempt"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumPortionReducedRated) = "portion_reduced_rated"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumPortionStandardRated) = "portion_standard_rated"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumProductExempt) = "product_exempt"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumProductExemptHoliday) = "product_exempt_holiday"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumProportionallyRated) = "proportionally_rated"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumReducedRated) = "reduced_rated"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumReverseCharge) = "reverse_charge"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumStandardRated) = "standard_rated"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumTaxableBasisReduced) = "taxable_basis_reduced"
  toJSON (BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumZeroRated) = "zero_rated"

instance Data.Aeson.Types.FromJSON.FromJSON BillingBillResourceInvoicingTaxesTaxTaxabilityReason' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "customer_exempt" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumCustomerExempt
          | val GHC.Classes.== "not_available" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumNotAvailable
          | val GHC.Classes.== "not_collecting" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumNotCollecting
          | val GHC.Classes.== "not_subject_to_tax" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumNotSubjectToTax
          | val GHC.Classes.== "not_supported" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumNotSupported
          | val GHC.Classes.== "portion_product_exempt" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumPortionProductExempt
          | val GHC.Classes.== "portion_reduced_rated" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumPortionReducedRated
          | val GHC.Classes.== "portion_standard_rated" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumPortionStandardRated
          | val GHC.Classes.== "product_exempt" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumProductExempt
          | val GHC.Classes.== "product_exempt_holiday" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumProductExemptHoliday
          | val GHC.Classes.== "proportionally_rated" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumProportionallyRated
          | val GHC.Classes.== "reduced_rated" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumReducedRated
          | val GHC.Classes.== "reverse_charge" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumReverseCharge
          | val GHC.Classes.== "standard_rated" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumStandardRated
          | val GHC.Classes.== "taxable_basis_reduced" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumTaxableBasisReduced
          | val GHC.Classes.== "zero_rated" -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'EnumZeroRated
          | GHC.Base.otherwise -> BillingBillResourceInvoicingTaxesTaxTaxabilityReason'Other val
      )
