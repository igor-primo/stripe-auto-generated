{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingPhysicalBundleFeatures
module StripeAPI.Types.IssuingPhysicalBundleFeatures where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_physical_bundle_features@ in the specification.
data IssuingPhysicalBundleFeatures = IssuingPhysicalBundleFeatures
  { -- | card_logo: The policy for how to use card logo images in a card design with this physical bundle.
    issuingPhysicalBundleFeaturesCardLogo :: IssuingPhysicalBundleFeaturesCardLogo',
    -- | carrier_text: The policy for how to use carrier letter text in a card design with this physical bundle.
    issuingPhysicalBundleFeaturesCarrierText :: IssuingPhysicalBundleFeaturesCarrierText',
    -- | second_line: The policy for how to use a second line on a card with this physical bundle.
    issuingPhysicalBundleFeaturesSecondLine :: IssuingPhysicalBundleFeaturesSecondLine'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingPhysicalBundleFeatures where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["card_logo" Data.Aeson.Types.ToJSON..= issuingPhysicalBundleFeaturesCardLogo obj] : ["carrier_text" Data.Aeson.Types.ToJSON..= issuingPhysicalBundleFeaturesCarrierText obj] : ["second_line" Data.Aeson.Types.ToJSON..= issuingPhysicalBundleFeaturesSecondLine obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["card_logo" Data.Aeson.Types.ToJSON..= issuingPhysicalBundleFeaturesCardLogo obj] : ["carrier_text" Data.Aeson.Types.ToJSON..= issuingPhysicalBundleFeaturesCarrierText obj] : ["second_line" Data.Aeson.Types.ToJSON..= issuingPhysicalBundleFeaturesSecondLine obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingPhysicalBundleFeatures where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingPhysicalBundleFeatures" (\obj -> ((GHC.Base.pure IssuingPhysicalBundleFeatures GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "card_logo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "carrier_text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "second_line"))

-- | Create a new 'IssuingPhysicalBundleFeatures' with all required fields.
mkIssuingPhysicalBundleFeatures ::
  -- | 'issuingPhysicalBundleFeaturesCardLogo'
  IssuingPhysicalBundleFeaturesCardLogo' ->
  -- | 'issuingPhysicalBundleFeaturesCarrierText'
  IssuingPhysicalBundleFeaturesCarrierText' ->
  -- | 'issuingPhysicalBundleFeaturesSecondLine'
  IssuingPhysicalBundleFeaturesSecondLine' ->
  IssuingPhysicalBundleFeatures
mkIssuingPhysicalBundleFeatures issuingPhysicalBundleFeaturesCardLogo issuingPhysicalBundleFeaturesCarrierText issuingPhysicalBundleFeaturesSecondLine =
  IssuingPhysicalBundleFeatures
    { issuingPhysicalBundleFeaturesCardLogo = issuingPhysicalBundleFeaturesCardLogo,
      issuingPhysicalBundleFeaturesCarrierText = issuingPhysicalBundleFeaturesCarrierText,
      issuingPhysicalBundleFeaturesSecondLine = issuingPhysicalBundleFeaturesSecondLine
    }

-- | Defines the enum schema located at @components.schemas.issuing_physical_bundle_features.properties.card_logo@ in the specification.
--
-- The policy for how to use card logo images in a card design with this physical bundle.
data IssuingPhysicalBundleFeaturesCardLogo'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingPhysicalBundleFeaturesCardLogo'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingPhysicalBundleFeaturesCardLogo'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"optional"@
    IssuingPhysicalBundleFeaturesCardLogo'EnumOptional
  | -- | Represents the JSON value @"required"@
    IssuingPhysicalBundleFeaturesCardLogo'EnumRequired
  | -- | Represents the JSON value @"unsupported"@
    IssuingPhysicalBundleFeaturesCardLogo'EnumUnsupported
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingPhysicalBundleFeaturesCardLogo' where
  toJSON (IssuingPhysicalBundleFeaturesCardLogo'Other val) = val
  toJSON (IssuingPhysicalBundleFeaturesCardLogo'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingPhysicalBundleFeaturesCardLogo'EnumOptional) = "optional"
  toJSON (IssuingPhysicalBundleFeaturesCardLogo'EnumRequired) = "required"
  toJSON (IssuingPhysicalBundleFeaturesCardLogo'EnumUnsupported) = "unsupported"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingPhysicalBundleFeaturesCardLogo' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "optional" -> IssuingPhysicalBundleFeaturesCardLogo'EnumOptional
          | val GHC.Classes.== "required" -> IssuingPhysicalBundleFeaturesCardLogo'EnumRequired
          | val GHC.Classes.== "unsupported" -> IssuingPhysicalBundleFeaturesCardLogo'EnumUnsupported
          | GHC.Base.otherwise -> IssuingPhysicalBundleFeaturesCardLogo'Other val
      )

-- | Defines the enum schema located at @components.schemas.issuing_physical_bundle_features.properties.carrier_text@ in the specification.
--
-- The policy for how to use carrier letter text in a card design with this physical bundle.
data IssuingPhysicalBundleFeaturesCarrierText'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingPhysicalBundleFeaturesCarrierText'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingPhysicalBundleFeaturesCarrierText'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"optional"@
    IssuingPhysicalBundleFeaturesCarrierText'EnumOptional
  | -- | Represents the JSON value @"required"@
    IssuingPhysicalBundleFeaturesCarrierText'EnumRequired
  | -- | Represents the JSON value @"unsupported"@
    IssuingPhysicalBundleFeaturesCarrierText'EnumUnsupported
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingPhysicalBundleFeaturesCarrierText' where
  toJSON (IssuingPhysicalBundleFeaturesCarrierText'Other val) = val
  toJSON (IssuingPhysicalBundleFeaturesCarrierText'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingPhysicalBundleFeaturesCarrierText'EnumOptional) = "optional"
  toJSON (IssuingPhysicalBundleFeaturesCarrierText'EnumRequired) = "required"
  toJSON (IssuingPhysicalBundleFeaturesCarrierText'EnumUnsupported) = "unsupported"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingPhysicalBundleFeaturesCarrierText' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "optional" -> IssuingPhysicalBundleFeaturesCarrierText'EnumOptional
          | val GHC.Classes.== "required" -> IssuingPhysicalBundleFeaturesCarrierText'EnumRequired
          | val GHC.Classes.== "unsupported" -> IssuingPhysicalBundleFeaturesCarrierText'EnumUnsupported
          | GHC.Base.otherwise -> IssuingPhysicalBundleFeaturesCarrierText'Other val
      )

-- | Defines the enum schema located at @components.schemas.issuing_physical_bundle_features.properties.second_line@ in the specification.
--
-- The policy for how to use a second line on a card with this physical bundle.
data IssuingPhysicalBundleFeaturesSecondLine'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingPhysicalBundleFeaturesSecondLine'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingPhysicalBundleFeaturesSecondLine'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"optional"@
    IssuingPhysicalBundleFeaturesSecondLine'EnumOptional
  | -- | Represents the JSON value @"required"@
    IssuingPhysicalBundleFeaturesSecondLine'EnumRequired
  | -- | Represents the JSON value @"unsupported"@
    IssuingPhysicalBundleFeaturesSecondLine'EnumUnsupported
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingPhysicalBundleFeaturesSecondLine' where
  toJSON (IssuingPhysicalBundleFeaturesSecondLine'Other val) = val
  toJSON (IssuingPhysicalBundleFeaturesSecondLine'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingPhysicalBundleFeaturesSecondLine'EnumOptional) = "optional"
  toJSON (IssuingPhysicalBundleFeaturesSecondLine'EnumRequired) = "required"
  toJSON (IssuingPhysicalBundleFeaturesSecondLine'EnumUnsupported) = "unsupported"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingPhysicalBundleFeaturesSecondLine' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "optional" -> IssuingPhysicalBundleFeaturesSecondLine'EnumOptional
          | val GHC.Classes.== "required" -> IssuingPhysicalBundleFeaturesSecondLine'EnumRequired
          | val GHC.Classes.== "unsupported" -> IssuingPhysicalBundleFeaturesSecondLine'EnumUnsupported
          | GHC.Base.otherwise -> IssuingPhysicalBundleFeaturesSecondLine'Other val
      )
