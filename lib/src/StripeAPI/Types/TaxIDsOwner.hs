{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TaxIDsOwner
module StripeAPI.Types.TaxIDsOwner where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Account
import {-# SOURCE #-} StripeAPI.Types.Application
import {-# SOURCE #-} StripeAPI.Types.Customer
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.tax_i_ds_owner@ in the specification.
data TaxIDsOwner = TaxIDsOwner
  { -- | account: The account being referenced when \`type\` is \`account\`.
    taxIDsOwnerAccount :: (GHC.Maybe.Maybe TaxIDsOwnerAccount'Variants),
    -- | application: The Connect Application being referenced when \`type\` is \`application\`.
    taxIDsOwnerApplication :: (GHC.Maybe.Maybe TaxIDsOwnerApplication'Variants),
    -- | customer: The customer being referenced when \`type\` is \`customer\`.
    taxIDsOwnerCustomer :: (GHC.Maybe.Maybe TaxIDsOwnerCustomer'Variants),
    -- | type: Type of owner referenced.
    taxIDsOwnerType :: TaxIDsOwnerType'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TaxIDsOwner where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (taxIDsOwnerAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application" Data.Aeson.Types.ToJSON..=)) (taxIDsOwnerApplication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (taxIDsOwnerCustomer obj) : ["type" Data.Aeson.Types.ToJSON..= taxIDsOwnerType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (taxIDsOwnerAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application" Data.Aeson.Types.ToJSON..=)) (taxIDsOwnerApplication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (taxIDsOwnerCustomer obj) : ["type" Data.Aeson.Types.ToJSON..= taxIDsOwnerType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TaxIDsOwner where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxIDsOwner" (\obj -> (((GHC.Base.pure TaxIDsOwner GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'TaxIDsOwner' with all required fields.
mkTaxIDsOwner ::
  -- | 'taxIDsOwnerType'
  TaxIDsOwnerType' ->
  TaxIDsOwner
mkTaxIDsOwner taxIDsOwnerType =
  TaxIDsOwner
    { taxIDsOwnerAccount = GHC.Maybe.Nothing,
      taxIDsOwnerApplication = GHC.Maybe.Nothing,
      taxIDsOwnerCustomer = GHC.Maybe.Nothing,
      taxIDsOwnerType = taxIDsOwnerType
    }

-- | Defines the oneOf schema located at @components.schemas.tax_i_ds_owner.properties.account.anyOf@ in the specification.
--
-- The account being referenced when \`type\` is \`account\`.
data TaxIDsOwnerAccount'Variants
  = TaxIDsOwnerAccount'Text Data.Text.Internal.Text
  | TaxIDsOwnerAccount'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxIDsOwnerAccount'Variants where
  toJSON (TaxIDsOwnerAccount'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (TaxIDsOwnerAccount'Account a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON TaxIDsOwnerAccount'Variants where
  parseJSON val = case (TaxIDsOwnerAccount'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((TaxIDsOwnerAccount'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.tax_i_ds_owner.properties.application.anyOf@ in the specification.
--
-- The Connect Application being referenced when \`type\` is \`application\`.
data TaxIDsOwnerApplication'Variants
  = TaxIDsOwnerApplication'Text Data.Text.Internal.Text
  | TaxIDsOwnerApplication'Application Application
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxIDsOwnerApplication'Variants where
  toJSON (TaxIDsOwnerApplication'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (TaxIDsOwnerApplication'Application a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON TaxIDsOwnerApplication'Variants where
  parseJSON val = case (TaxIDsOwnerApplication'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((TaxIDsOwnerApplication'Application Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.tax_i_ds_owner.properties.customer.anyOf@ in the specification.
--
-- The customer being referenced when \`type\` is \`customer\`.
data TaxIDsOwnerCustomer'Variants
  = TaxIDsOwnerCustomer'Text Data.Text.Internal.Text
  | TaxIDsOwnerCustomer'Customer Customer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxIDsOwnerCustomer'Variants where
  toJSON (TaxIDsOwnerCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (TaxIDsOwnerCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON TaxIDsOwnerCustomer'Variants where
  parseJSON val = case (TaxIDsOwnerCustomer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((TaxIDsOwnerCustomer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.tax_i_ds_owner.properties.type@ in the specification.
--
-- Type of owner referenced.
data TaxIDsOwnerType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    TaxIDsOwnerType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    TaxIDsOwnerType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"account"@
    TaxIDsOwnerType'EnumAccount
  | -- | Represents the JSON value @"application"@
    TaxIDsOwnerType'EnumApplication
  | -- | Represents the JSON value @"customer"@
    TaxIDsOwnerType'EnumCustomer
  | -- | Represents the JSON value @"self"@
    TaxIDsOwnerType'EnumSelf
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxIDsOwnerType' where
  toJSON (TaxIDsOwnerType'Other val) = val
  toJSON (TaxIDsOwnerType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (TaxIDsOwnerType'EnumAccount) = "account"
  toJSON (TaxIDsOwnerType'EnumApplication) = "application"
  toJSON (TaxIDsOwnerType'EnumCustomer) = "customer"
  toJSON (TaxIDsOwnerType'EnumSelf) = "self"

instance Data.Aeson.Types.FromJSON.FromJSON TaxIDsOwnerType' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "account" -> TaxIDsOwnerType'EnumAccount
          | val GHC.Classes.== "application" -> TaxIDsOwnerType'EnumApplication
          | val GHC.Classes.== "customer" -> TaxIDsOwnerType'EnumCustomer
          | val GHC.Classes.== "self" -> TaxIDsOwnerType'EnumSelf
          | GHC.Base.otherwise -> TaxIDsOwnerType'Other val
      )
