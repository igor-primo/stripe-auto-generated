{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema InvoiceSettingCustomerRenderingOptions
module StripeAPI.Types.InvoiceSettingCustomerRenderingOptions where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.invoice_setting_customer_rendering_options@ in the specification.
data InvoiceSettingCustomerRenderingOptions = InvoiceSettingCustomerRenderingOptions
  { -- | amount_tax_display: How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    invoiceSettingCustomerRenderingOptionsAmountTaxDisplay :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | template: ID of the invoice rendering template to be used for this customer\'s invoices. If set, the template will be used on all invoices for this customer unless a template is set directly on the invoice.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    invoiceSettingCustomerRenderingOptionsTemplate :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceSettingCustomerRenderingOptions where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_tax_display" Data.Aeson.Types.ToJSON..=)) (invoiceSettingCustomerRenderingOptionsAmountTaxDisplay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("template" Data.Aeson.Types.ToJSON..=)) (invoiceSettingCustomerRenderingOptionsTemplate obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_tax_display" Data.Aeson.Types.ToJSON..=)) (invoiceSettingCustomerRenderingOptionsAmountTaxDisplay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("template" Data.Aeson.Types.ToJSON..=)) (invoiceSettingCustomerRenderingOptionsTemplate obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceSettingCustomerRenderingOptions where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceSettingCustomerRenderingOptions" (\obj -> (GHC.Base.pure InvoiceSettingCustomerRenderingOptions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_tax_display")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "template"))

-- | Create a new 'InvoiceSettingCustomerRenderingOptions' with all required fields.
mkInvoiceSettingCustomerRenderingOptions :: InvoiceSettingCustomerRenderingOptions
mkInvoiceSettingCustomerRenderingOptions =
  InvoiceSettingCustomerRenderingOptions
    { invoiceSettingCustomerRenderingOptionsAmountTaxDisplay = GHC.Maybe.Nothing,
      invoiceSettingCustomerRenderingOptionsTemplate = GHC.Maybe.Nothing
    }
