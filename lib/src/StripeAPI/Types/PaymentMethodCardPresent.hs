{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodCardPresent
module StripeAPI.Types.PaymentMethodCardPresent where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsPrivatePaymentMethodsCardPresentCommonWallet
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodCardPresentNetworks
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsCardPresentOffline
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_card_present@ in the specification.
data PaymentMethodCardPresent = PaymentMethodCardPresent
  { -- | brand: Card brand. Can be \`amex\`, \`cartes_bancaires\`, \`diners\`, \`discover\`, \`eftpos_au\`, \`jcb\`, \`link\`, \`mastercard\`, \`unionpay\`, \`visa\` or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodCardPresentBrand :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | brand_product: The [product code](https:\/\/stripe.com\/docs\/card-product-codes) that identifies the specific program or product associated with a card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodCardPresentBrandProduct :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | cardholder_name: The cardholder name as read from the card, in [ISO 7813](https:\/\/en.wikipedia.org\/wiki\/ISO\/IEC_7813) format. May include alphanumeric characters, special characters and first\/last name separator (\`\/\`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodCardPresentCardholderName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | country: Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you\'ve collected.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodCardPresentCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | description: A high-level description of the type of cards issued in this range.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodCardPresentDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | exp_month: Two-digit number representing the card\'s expiration month.
    paymentMethodCardPresentExpMonth :: GHC.Types.Int,
    -- | exp_year: Four-digit number representing the card\'s expiration year.
    paymentMethodCardPresentExpYear :: GHC.Types.Int,
    -- | fingerprint: Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
    --
    -- *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodCardPresentFingerprint :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodCardPresentFunding :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | issuer: The name of the card\'s issuing bank.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodCardPresentIssuer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | last4: The last four digits of the card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodCardPresentLast4 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | networks: Contains information about card networks that can be used to process the payment.
    paymentMethodCardPresentNetworks :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentMethodCardPresentNetworks'NonNullable)),
    -- | offline: Details about payment methods collected offline.
    paymentMethodCardPresentOffline :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentMethodCardPresentOffline'NonNullable)),
    -- | preferred_locales: The languages that the issuing bank recommends using for localizing any customer-facing text, as read from the card. Referenced from EMV tag 5F2D, data encoded on the card\'s chip.
    paymentMethodCardPresentPreferredLocales :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text])),
    -- | read_method: How card details were read in this transaction.
    paymentMethodCardPresentReadMethod :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentMethodCardPresentReadMethod'NonNullable)),
    -- | wallet:
    paymentMethodCardPresentWallet :: (GHC.Maybe.Maybe PaymentFlowsPrivatePaymentMethodsCardPresentCommonWallet)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodCardPresent where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentBrand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand_product" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentBrandProduct obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cardholder_name" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentCardholderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentDescription obj) : ["exp_month" Data.Aeson.Types.ToJSON..= paymentMethodCardPresentExpMonth obj] : ["exp_year" Data.Aeson.Types.ToJSON..= paymentMethodCardPresentExpYear obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentFingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentFunding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issuer" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentIssuer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("networks" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentNetworks obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("offline" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentOffline obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locales" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentPreferredLocales obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("read_method" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentReadMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentWallet obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentBrand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand_product" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentBrandProduct obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cardholder_name" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentCardholderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentDescription obj) : ["exp_month" Data.Aeson.Types.ToJSON..= paymentMethodCardPresentExpMonth obj] : ["exp_year" Data.Aeson.Types.ToJSON..= paymentMethodCardPresentExpYear obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentFingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentFunding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issuer" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentIssuer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("networks" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentNetworks obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("offline" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentOffline obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locales" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentPreferredLocales obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("read_method" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentReadMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentWallet obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardPresent where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardPresent" (\obj -> (((((((((((((((GHC.Base.pure PaymentMethodCardPresent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "brand_product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cardholder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "issuer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "networks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "offline")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_locales")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "read_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wallet"))

-- | Create a new 'PaymentMethodCardPresent' with all required fields.
mkPaymentMethodCardPresent ::
  -- | 'paymentMethodCardPresentExpMonth'
  GHC.Types.Int ->
  -- | 'paymentMethodCardPresentExpYear'
  GHC.Types.Int ->
  PaymentMethodCardPresent
mkPaymentMethodCardPresent paymentMethodCardPresentExpMonth paymentMethodCardPresentExpYear =
  PaymentMethodCardPresent
    { paymentMethodCardPresentBrand = GHC.Maybe.Nothing,
      paymentMethodCardPresentBrandProduct = GHC.Maybe.Nothing,
      paymentMethodCardPresentCardholderName = GHC.Maybe.Nothing,
      paymentMethodCardPresentCountry = GHC.Maybe.Nothing,
      paymentMethodCardPresentDescription = GHC.Maybe.Nothing,
      paymentMethodCardPresentExpMonth = paymentMethodCardPresentExpMonth,
      paymentMethodCardPresentExpYear = paymentMethodCardPresentExpYear,
      paymentMethodCardPresentFingerprint = GHC.Maybe.Nothing,
      paymentMethodCardPresentFunding = GHC.Maybe.Nothing,
      paymentMethodCardPresentIssuer = GHC.Maybe.Nothing,
      paymentMethodCardPresentLast4 = GHC.Maybe.Nothing,
      paymentMethodCardPresentNetworks = GHC.Maybe.Nothing,
      paymentMethodCardPresentOffline = GHC.Maybe.Nothing,
      paymentMethodCardPresentPreferredLocales = GHC.Maybe.Nothing,
      paymentMethodCardPresentReadMethod = GHC.Maybe.Nothing,
      paymentMethodCardPresentWallet = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_method_card_present.properties.networks.anyOf@ in the specification.
--
-- Contains information about card networks that can be used to process the payment.
data PaymentMethodCardPresentNetworks'NonNullable = PaymentMethodCardPresentNetworks'NonNullable
  { -- | available: All networks available for selection via [payment_method_options.card.network](\/api\/payment_intents\/confirm\#confirm_payment_intent-payment_method_options-card-network).
    paymentMethodCardPresentNetworks'NonNullableAvailable :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | preferred: The preferred network for the card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodCardPresentNetworks'NonNullablePreferred :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodCardPresentNetworks'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentNetworks'NonNullableAvailable obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentNetworks'NonNullablePreferred obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentNetworks'NonNullableAvailable obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentNetworks'NonNullablePreferred obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardPresentNetworks'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardPresentNetworks'NonNullable" (\obj -> (GHC.Base.pure PaymentMethodCardPresentNetworks'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred"))

-- | Create a new 'PaymentMethodCardPresentNetworks'NonNullable' with all required fields.
mkPaymentMethodCardPresentNetworks'NonNullable :: PaymentMethodCardPresentNetworks'NonNullable
mkPaymentMethodCardPresentNetworks'NonNullable =
  PaymentMethodCardPresentNetworks'NonNullable
    { paymentMethodCardPresentNetworks'NonNullableAvailable = GHC.Maybe.Nothing,
      paymentMethodCardPresentNetworks'NonNullablePreferred = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_method_card_present.properties.offline.anyOf@ in the specification.
--
-- Details about payment methods collected offline.
data PaymentMethodCardPresentOffline'NonNullable = PaymentMethodCardPresentOffline'NonNullable
  { -- | stored_at: Time at which the payment was collected while offline
    paymentMethodCardPresentOffline'NonNullableStoredAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | type: The method used to process this payment method offline. Only deferred is allowed.
    paymentMethodCardPresentOffline'NonNullableType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentMethodCardPresentOffline'NonNullableType'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodCardPresentOffline'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stored_at" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentOffline'NonNullableStoredAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentOffline'NonNullableType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stored_at" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentOffline'NonNullableStoredAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentMethodCardPresentOffline'NonNullableType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardPresentOffline'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardPresentOffline'NonNullable" (\obj -> (GHC.Base.pure PaymentMethodCardPresentOffline'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "stored_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'PaymentMethodCardPresentOffline'NonNullable' with all required fields.
mkPaymentMethodCardPresentOffline'NonNullable :: PaymentMethodCardPresentOffline'NonNullable
mkPaymentMethodCardPresentOffline'NonNullable =
  PaymentMethodCardPresentOffline'NonNullable
    { paymentMethodCardPresentOffline'NonNullableStoredAt = GHC.Maybe.Nothing,
      paymentMethodCardPresentOffline'NonNullableType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_method_card_present.properties.offline.anyOf.properties.type@ in the specification.
--
-- The method used to process this payment method offline. Only deferred is allowed.
data PaymentMethodCardPresentOffline'NonNullableType'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodCardPresentOffline'NonNullableType'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodCardPresentOffline'NonNullableType'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"deferred"@
    PaymentMethodCardPresentOffline'NonNullableType'NonNullableEnumDeferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodCardPresentOffline'NonNullableType'NonNullable where
  toJSON (PaymentMethodCardPresentOffline'NonNullableType'NonNullableOther val) = val
  toJSON (PaymentMethodCardPresentOffline'NonNullableType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodCardPresentOffline'NonNullableType'NonNullableEnumDeferred) = "deferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardPresentOffline'NonNullableType'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "deferred" -> PaymentMethodCardPresentOffline'NonNullableType'NonNullableEnumDeferred
          | GHC.Base.otherwise -> PaymentMethodCardPresentOffline'NonNullableType'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_method_card_present.properties.read_method@ in the specification.
--
-- How card details were read in this transaction.
data PaymentMethodCardPresentReadMethod'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodCardPresentReadMethod'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodCardPresentReadMethod'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"contact_emv"@
    PaymentMethodCardPresentReadMethod'NonNullableEnumContactEmv
  | -- | Represents the JSON value @"contactless_emv"@
    PaymentMethodCardPresentReadMethod'NonNullableEnumContactlessEmv
  | -- | Represents the JSON value @"contactless_magstripe_mode"@
    PaymentMethodCardPresentReadMethod'NonNullableEnumContactlessMagstripeMode
  | -- | Represents the JSON value @"magnetic_stripe_fallback"@
    PaymentMethodCardPresentReadMethod'NonNullableEnumMagneticStripeFallback
  | -- | Represents the JSON value @"magnetic_stripe_track2"@
    PaymentMethodCardPresentReadMethod'NonNullableEnumMagneticStripeTrack2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodCardPresentReadMethod'NonNullable where
  toJSON (PaymentMethodCardPresentReadMethod'NonNullableOther val) = val
  toJSON (PaymentMethodCardPresentReadMethod'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodCardPresentReadMethod'NonNullableEnumContactEmv) = "contact_emv"
  toJSON (PaymentMethodCardPresentReadMethod'NonNullableEnumContactlessEmv) = "contactless_emv"
  toJSON (PaymentMethodCardPresentReadMethod'NonNullableEnumContactlessMagstripeMode) = "contactless_magstripe_mode"
  toJSON (PaymentMethodCardPresentReadMethod'NonNullableEnumMagneticStripeFallback) = "magnetic_stripe_fallback"
  toJSON (PaymentMethodCardPresentReadMethod'NonNullableEnumMagneticStripeTrack2) = "magnetic_stripe_track2"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardPresentReadMethod'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "contact_emv" -> PaymentMethodCardPresentReadMethod'NonNullableEnumContactEmv
          | val GHC.Classes.== "contactless_emv" -> PaymentMethodCardPresentReadMethod'NonNullableEnumContactlessEmv
          | val GHC.Classes.== "contactless_magstripe_mode" -> PaymentMethodCardPresentReadMethod'NonNullableEnumContactlessMagstripeMode
          | val GHC.Classes.== "magnetic_stripe_fallback" -> PaymentMethodCardPresentReadMethod'NonNullableEnumMagneticStripeFallback
          | val GHC.Classes.== "magnetic_stripe_track2" -> PaymentMethodCardPresentReadMethod'NonNullableEnumMagneticStripeTrack2
          | GHC.Base.otherwise -> PaymentMethodCardPresentReadMethod'NonNullableOther val
      )
