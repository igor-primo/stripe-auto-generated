{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentIntentTypeSpecificPaymentMethodOptionsClient
module StripeAPI.Types.PaymentIntentTypeSpecificPaymentMethodOptionsClient where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsInstallmentOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCardPresentRouting
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_intent_type_specific_payment_method_options_client@ in the specification.
data PaymentIntentTypeSpecificPaymentMethodOptionsClient = PaymentIntentTypeSpecificPaymentMethodOptionsClient
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod :: (GHC.Maybe.Maybe PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod'),
    -- | installments:
    paymentIntentTypeSpecificPaymentMethodOptionsClientInstallments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentTypeSpecificPaymentMethodOptionsClientRequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentTypeSpecificPaymentMethodOptionsClientRequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentTypeSpecificPaymentMethodOptionsClientRouting :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod :: (GHC.Maybe.Maybe PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentTypeSpecificPaymentMethodOptionsClient where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientInstallments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientRequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientRequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientRouting obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientInstallments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientRequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientRequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientRouting obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentTypeSpecificPaymentMethodOptionsClient where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentTypeSpecificPaymentMethodOptionsClient" (\obj -> ((((((GHC.Base.pure PaymentIntentTypeSpecificPaymentMethodOptionsClient GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentTypeSpecificPaymentMethodOptionsClient' with all required fields.
mkPaymentIntentTypeSpecificPaymentMethodOptionsClient :: PaymentIntentTypeSpecificPaymentMethodOptionsClient
mkPaymentIntentTypeSpecificPaymentMethodOptionsClient =
  PaymentIntentTypeSpecificPaymentMethodOptionsClient
    { paymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod = GHC.Maybe.Nothing,
      paymentIntentTypeSpecificPaymentMethodOptionsClientInstallments = GHC.Maybe.Nothing,
      paymentIntentTypeSpecificPaymentMethodOptionsClientRequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentTypeSpecificPaymentMethodOptionsClientRequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentTypeSpecificPaymentMethodOptionsClientRouting = GHC.Maybe.Nothing,
      paymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_type_specific_payment_method_options_client.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod' where
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod'Other val) = val
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentTypeSpecificPaymentMethodOptionsClientCaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_type_specific_payment_method_options_client.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage' where
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'Other val) = val
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentTypeSpecificPaymentMethodOptionsClientSetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_type_specific_payment_method_options_client.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod' where
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'Other val) = val
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentTypeSpecificPaymentMethodOptionsClientVerificationMethod'Other val
      )
