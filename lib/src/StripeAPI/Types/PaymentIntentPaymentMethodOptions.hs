{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentIntentPaymentMethodOptions
module StripeAPI.Types.PaymentIntentPaymentMethodOptions where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.LinkedAccountOptionsCommon
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsInstallmentOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsPrivatePaymentMethodsKakaoPayPaymentMethodOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsPrivatePaymentMethodsNaverPayPaymentMethodOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsPrivatePaymentMethodsPaycoPaymentMethodOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsPrivatePaymentMethodsSamsungPayPaymentMethodOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsAcssDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsAuBecsDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsBacsDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsBlik
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsCard
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsEps
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsLink
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsMandateOptionsBacsDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsMobilepay
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsNzBankAccount
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsSepaDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsSwish
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsUsBankAccount
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentTypeSpecificPaymentMethodOptionsClient
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsCardInstallmentsPlan
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsAffirm
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsAfterpayClearpay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsAlipay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsAlma
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsAmazonPay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsBancontact
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsBillie
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsBoleto
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCardInstallments
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCardMandateOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCardPresent
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCardPresentRouting
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCashapp
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCrypto
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCustomerBalance
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCustomerBalanceBankTransfer
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsFpx
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsGiropay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsGrabpay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsIdeal
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsKlarna
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsKonbini
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsKrCard
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsMultibanco
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsOxxo
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsP24
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsPaynow
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsPaypal
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsPix
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsPromptpay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsRevolutPay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsSatispay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsSofort
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsTwint
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsUsBankAccountMandateOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsWechatPay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsZip
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options@ in the specification.
data PaymentIntentPaymentMethodOptions = PaymentIntentPaymentMethodOptions
  { -- | acss_debit
    paymentIntentPaymentMethodOptionsAcssDebit :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAcssDebit'),
    -- | affirm
    paymentIntentPaymentMethodOptionsAffirm :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAffirm'),
    -- | afterpay_clearpay
    paymentIntentPaymentMethodOptionsAfterpayClearpay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAfterpayClearpay'),
    -- | alipay
    paymentIntentPaymentMethodOptionsAlipay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAlipay'),
    -- | alma
    paymentIntentPaymentMethodOptionsAlma :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAlma'),
    -- | amazon_pay
    paymentIntentPaymentMethodOptionsAmazonPay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAmazonPay'),
    -- | au_becs_debit
    paymentIntentPaymentMethodOptionsAuBecsDebit :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAuBecsDebit'),
    -- | bacs_debit
    paymentIntentPaymentMethodOptionsBacsDebit :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBacsDebit'),
    -- | bancontact
    paymentIntentPaymentMethodOptionsBancontact :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBancontact'),
    -- | billie
    paymentIntentPaymentMethodOptionsBillie :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBillie'),
    -- | blik
    paymentIntentPaymentMethodOptionsBlik :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBlik'),
    -- | boleto
    paymentIntentPaymentMethodOptionsBoleto :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBoleto'),
    -- | card
    paymentIntentPaymentMethodOptionsCard :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCard'),
    -- | card_present
    paymentIntentPaymentMethodOptionsCardPresent :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardPresent'),
    -- | cashapp
    paymentIntentPaymentMethodOptionsCashapp :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCashapp'),
    -- | crypto
    paymentIntentPaymentMethodOptionsCrypto :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCrypto'),
    -- | customer_balance
    paymentIntentPaymentMethodOptionsCustomerBalance :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCustomerBalance'),
    -- | eps
    paymentIntentPaymentMethodOptionsEps :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsEps'),
    -- | fpx
    paymentIntentPaymentMethodOptionsFpx :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsFpx'),
    -- | giropay
    paymentIntentPaymentMethodOptionsGiropay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsGiropay'),
    -- | grabpay
    paymentIntentPaymentMethodOptionsGrabpay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsGrabpay'),
    -- | ideal
    paymentIntentPaymentMethodOptionsIdeal :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsIdeal'),
    -- | interac_present
    paymentIntentPaymentMethodOptionsInteracPresent :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsInteracPresent'),
    -- | kakao_pay
    paymentIntentPaymentMethodOptionsKakaoPay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKakaoPay'),
    -- | klarna
    paymentIntentPaymentMethodOptionsKlarna :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKlarna'),
    -- | konbini
    paymentIntentPaymentMethodOptionsKonbini :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKonbini'),
    -- | kr_card
    paymentIntentPaymentMethodOptionsKrCard :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKrCard'),
    -- | link
    paymentIntentPaymentMethodOptionsLink :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsLink'),
    -- | mobilepay
    paymentIntentPaymentMethodOptionsMobilepay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMobilepay'),
    -- | multibanco
    paymentIntentPaymentMethodOptionsMultibanco :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMultibanco'),
    -- | naver_pay
    paymentIntentPaymentMethodOptionsNaverPay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsNaverPay'),
    -- | nz_bank_account
    paymentIntentPaymentMethodOptionsNzBankAccount :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsNzBankAccount'),
    -- | oxxo
    paymentIntentPaymentMethodOptionsOxxo :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsOxxo'),
    -- | p24
    paymentIntentPaymentMethodOptionsP24 :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsP24'),
    -- | pay_by_bank
    paymentIntentPaymentMethodOptionsPayByBank :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPayByBank'),
    -- | payco
    paymentIntentPaymentMethodOptionsPayco :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPayco'),
    -- | paynow
    paymentIntentPaymentMethodOptionsPaynow :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPaynow'),
    -- | paypal
    paymentIntentPaymentMethodOptionsPaypal :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPaypal'),
    -- | pix
    paymentIntentPaymentMethodOptionsPix :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPix'),
    -- | promptpay
    paymentIntentPaymentMethodOptionsPromptpay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPromptpay'),
    -- | revolut_pay
    paymentIntentPaymentMethodOptionsRevolutPay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsRevolutPay'),
    -- | samsung_pay
    paymentIntentPaymentMethodOptionsSamsungPay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSamsungPay'),
    -- | satispay
    paymentIntentPaymentMethodOptionsSatispay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSatispay'),
    -- | sepa_debit
    paymentIntentPaymentMethodOptionsSepaDebit :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSepaDebit'),
    -- | sofort
    paymentIntentPaymentMethodOptionsSofort :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSofort'),
    -- | swish
    paymentIntentPaymentMethodOptionsSwish :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSwish'),
    -- | twint
    paymentIntentPaymentMethodOptionsTwint :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsTwint'),
    -- | us_bank_account
    paymentIntentPaymentMethodOptionsUsBankAccount :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsUsBankAccount'),
    -- | wechat_pay
    paymentIntentPaymentMethodOptionsWechatPay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsWechatPay'),
    -- | zip
    paymentIntentPaymentMethodOptionsZip :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsZip')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("affirm" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("afterpay_clearpay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alma" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amazon_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bacs_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billie" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("blik" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("boleto" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_present" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashapp" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("crypto" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_balance" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fpx" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("grabpay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interac_present" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kakao_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("konbini" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kr_card" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("link" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mobilepay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("naver_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nz_bank_account" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("oxxo" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pay_by_bank" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payco" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paynow" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paypal" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pix" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("promptpay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revolut_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("samsung_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("satispay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("swish" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("twint" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zip" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("affirm" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("afterpay_clearpay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alma" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amazon_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bacs_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billie" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("blik" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("boleto" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_present" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashapp" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("crypto" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_balance" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fpx" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("grabpay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interac_present" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kakao_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("konbini" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kr_card" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("link" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mobilepay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("naver_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nz_bank_account" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("oxxo" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pay_by_bank" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payco" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paynow" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paypal" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pix" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("promptpay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revolut_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("samsung_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("satispay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("swish" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("twint" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zip" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions" (\obj -> (((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure PaymentIntentPaymentMethodOptions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acss_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "affirm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "afterpay_clearpay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alma")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amazon_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "au_becs_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bacs_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "billie")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "blik")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "boleto")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cashapp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "crypto")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fpx")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "grabpay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interac_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "kakao_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "konbini")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "kr_card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "link")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mobilepay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "naver_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "nz_bank_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "oxxo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pay_by_bank")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "paynow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "paypal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "promptpay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "revolut_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "samsung_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "satispay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "swish")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "twint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "us_bank_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wechat_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "zip"))

-- | Create a new 'PaymentIntentPaymentMethodOptions' with all required fields.
mkPaymentIntentPaymentMethodOptions :: PaymentIntentPaymentMethodOptions
mkPaymentIntentPaymentMethodOptions =
  PaymentIntentPaymentMethodOptions
    { paymentIntentPaymentMethodOptionsAcssDebit = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAffirm = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAfterpayClearpay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlipay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlma = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAmazonPay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAuBecsDebit = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBacsDebit = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBancontact = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBillie = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBlik = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBoleto = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCardPresent = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCashapp = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCrypto = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCustomerBalance = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsEps = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsFpx = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGiropay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGrabpay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsIdeal = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsInteracPresent = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKakaoPay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKlarna = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKonbini = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKrCard = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsLink = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMobilepay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMultibanco = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNaverPay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNzBankAccount = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsOxxo = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsP24 = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayByBank = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayco = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaynow = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaypal = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPix = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPromptpay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsRevolutPay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSamsungPay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSatispay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSepaDebit = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSofort = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSwish = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsTwint = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsUsBankAccount = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsWechatPay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsZip = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.acss_debit.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsAcssDebit' = PaymentIntentPaymentMethodOptionsAcssDebit'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsAcssDebit'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | mandate_options:
    paymentIntentPaymentMethodOptionsAcssDebit'MandateOptions :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsAcssDebit'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsAcssDebit'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsAcssDebit'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'),
    -- | target_date: Controls when Stripe will attempt to debit the funds from the customer\'s account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsAcssDebit'TargetDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAcssDebit' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAcssDebit' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsAcssDebit'" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsAcssDebit' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsAcssDebit'' with all required fields.
mkPaymentIntentPaymentMethodOptionsAcssDebit' :: PaymentIntentPaymentMethodOptionsAcssDebit'
mkPaymentIntentPaymentMethodOptionsAcssDebit' =
  PaymentIntentPaymentMethodOptionsAcssDebit'
    { paymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAcssDebit'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAcssDebit'MandateOptions = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAcssDebit'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAcssDebit'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAcssDebit'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAcssDebit'TargetDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.acss_debit.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAcssDebit'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.acss_debit.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAcssDebit'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.acss_debit.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAcssDebit'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.affirm.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsAffirm' = PaymentIntentPaymentMethodOptionsAffirm'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsAffirm'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAffirm'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsAffirm'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | preferred_locale: Preferred language of the Affirm authorization page that the customer is redirected to.
    --
    -- Constraints:
    --
    -- * Maximum length of 30
    paymentIntentPaymentMethodOptionsAffirm'PreferredLocale :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsAffirm'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsAffirm'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsAffirm'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsAffirm'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAffirm' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'PreferredLocale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'PreferredLocale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAffirm'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAffirm' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsAffirm'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsAffirm' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_locale")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsAffirm'' with all required fields.
mkPaymentIntentPaymentMethodOptionsAffirm' :: PaymentIntentPaymentMethodOptionsAffirm'
mkPaymentIntentPaymentMethodOptionsAffirm' =
  PaymentIntentPaymentMethodOptionsAffirm'
    { paymentIntentPaymentMethodOptionsAffirm'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAffirm'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAffirm'PreferredLocale = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAffirm'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAffirm'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAffirm'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAffirm'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.affirm.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsAffirm'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAffirm'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAffirm'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsAffirm'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAffirm'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAffirm'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAffirm'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAffirm'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAffirm'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsAffirm'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAffirm'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.affirm.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAffirm'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.affirm.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAffirm'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.afterpay_clearpay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsAfterpayClearpay' = PaymentIntentPaymentMethodOptionsAfterpayClearpay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsAfterpayClearpay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | reference: An internal identifier or reference that this payment corresponds to. You must limit the identifier to 128 characters, and it can only contain letters, numbers, underscores, backslashes, and dashes.
    -- This field differs from the statement descriptor and item name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsAfterpayClearpay'Reference :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsAfterpayClearpay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsAfterpayClearpay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsAfterpayClearpay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAfterpayClearpay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'Reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'Reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAfterpayClearpay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsAfterpayClearpay'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsAfterpayClearpay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsAfterpayClearpay'' with all required fields.
mkPaymentIntentPaymentMethodOptionsAfterpayClearpay' :: PaymentIntentPaymentMethodOptionsAfterpayClearpay'
mkPaymentIntentPaymentMethodOptionsAfterpayClearpay' =
  PaymentIntentPaymentMethodOptionsAfterpayClearpay'
    { paymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAfterpayClearpay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAfterpayClearpay'Reference = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAfterpayClearpay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAfterpayClearpay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAfterpayClearpay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.afterpay_clearpay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAfterpayClearpay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.afterpay_clearpay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAfterpayClearpay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.afterpay_clearpay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAfterpayClearpay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.alipay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsAlipay' = PaymentIntentPaymentMethodOptionsAlipay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsAlipay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsAlipay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsAlipay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsAlipay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsAlipay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsAlipay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAlipay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlipay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAlipay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsAlipay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsAlipay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsAlipay'' with all required fields.
mkPaymentIntentPaymentMethodOptionsAlipay' :: PaymentIntentPaymentMethodOptionsAlipay'
mkPaymentIntentPaymentMethodOptionsAlipay' =
  PaymentIntentPaymentMethodOptionsAlipay'
    { paymentIntentPaymentMethodOptionsAlipay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlipay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlipay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlipay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlipay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlipay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.alipay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAlipay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.alipay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAlipay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.alipay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAlipay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.alma.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsAlma' = PaymentIntentPaymentMethodOptionsAlma'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsAlma'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAlma'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsAlma'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsAlma'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsAlma'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsAlma'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsAlma'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsAlma'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAlma'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAlma' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAlma'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAlma' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsAlma'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsAlma' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsAlma'' with all required fields.
mkPaymentIntentPaymentMethodOptionsAlma' :: PaymentIntentPaymentMethodOptionsAlma'
mkPaymentIntentPaymentMethodOptionsAlma' =
  PaymentIntentPaymentMethodOptionsAlma'
    { paymentIntentPaymentMethodOptionsAlma'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlma'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlma'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlma'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlma'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlma'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAlma'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.alma.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsAlma'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAlma'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAlma'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsAlma'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAlma'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAlma'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAlma'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAlma'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAlma'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsAlma'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAlma'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.alma.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAlma'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.alma.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAlma'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAlma'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAlma'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.amazon_pay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsAmazonPay' = PaymentIntentPaymentMethodOptionsAmazonPay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsAmazonPay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsAmazonPay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsAmazonPay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsAmazonPay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAmazonPay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAmazonPay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsAmazonPay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsAmazonPay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsAmazonPay'' with all required fields.
mkPaymentIntentPaymentMethodOptionsAmazonPay' :: PaymentIntentPaymentMethodOptionsAmazonPay'
mkPaymentIntentPaymentMethodOptionsAmazonPay' =
  PaymentIntentPaymentMethodOptionsAmazonPay'
    { paymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAmazonPay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAmazonPay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAmazonPay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAmazonPay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.amazon_pay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAmazonPay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.amazon_pay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAmazonPay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.amazon_pay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAmazonPay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.au_becs_debit.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsAuBecsDebit' = PaymentIntentPaymentMethodOptionsAuBecsDebit'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsAuBecsDebit'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsAuBecsDebit'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsAuBecsDebit'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsAuBecsDebit'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'),
    -- | target_date: Controls when Stripe will attempt to debit the funds from the customer\'s account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsAuBecsDebit'TargetDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAuBecsDebit' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAuBecsDebit' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsAuBecsDebit'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsAuBecsDebit' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsAuBecsDebit'' with all required fields.
mkPaymentIntentPaymentMethodOptionsAuBecsDebit' :: PaymentIntentPaymentMethodOptionsAuBecsDebit'
mkPaymentIntentPaymentMethodOptionsAuBecsDebit' =
  PaymentIntentPaymentMethodOptionsAuBecsDebit'
    { paymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAuBecsDebit'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAuBecsDebit'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAuBecsDebit'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAuBecsDebit'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAuBecsDebit'TargetDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.au_becs_debit.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAuBecsDebit'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.au_becs_debit.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAuBecsDebit'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.au_becs_debit.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsAuBecsDebit'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.bacs_debit.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsBacsDebit' = PaymentIntentPaymentMethodOptionsBacsDebit'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsBacsDebit'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | mandate_options:
    paymentIntentPaymentMethodOptionsBacsDebit'MandateOptions :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMandateOptionsBacsDebit),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsBacsDebit'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsBacsDebit'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsBacsDebit'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'),
    -- | target_date: Controls when Stripe will attempt to debit the funds from the customer\'s account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsBacsDebit'TargetDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBacsDebit' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBacsDebit' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsBacsDebit'" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsBacsDebit' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsBacsDebit'' with all required fields.
mkPaymentIntentPaymentMethodOptionsBacsDebit' :: PaymentIntentPaymentMethodOptionsBacsDebit'
mkPaymentIntentPaymentMethodOptionsBacsDebit' =
  PaymentIntentPaymentMethodOptionsBacsDebit'
    { paymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBacsDebit'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBacsDebit'MandateOptions = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBacsDebit'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBacsDebit'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBacsDebit'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBacsDebit'TargetDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.bacs_debit.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBacsDebit'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.bacs_debit.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBacsDebit'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.bacs_debit.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBacsDebit'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.bancontact.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsBancontact' = PaymentIntentPaymentMethodOptionsBancontact'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsBancontact'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsBancontact'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | preferred_language: Preferred language of the Bancontact authorization page that the customer is redirected to.
    paymentIntentPaymentMethodOptionsBancontact'PreferredLanguage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsBancontact'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsBancontact'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsBancontact'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsBancontact'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBancontact' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_language" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'PreferredLanguage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_language" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'PreferredLanguage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBancontact'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBancontact' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsBancontact'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsBancontact' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_language")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsBancontact'' with all required fields.
mkPaymentIntentPaymentMethodOptionsBancontact' :: PaymentIntentPaymentMethodOptionsBancontact'
mkPaymentIntentPaymentMethodOptionsBancontact' =
  PaymentIntentPaymentMethodOptionsBancontact'
    { paymentIntentPaymentMethodOptionsBancontact'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBancontact'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBancontact'PreferredLanguage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBancontact'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBancontact'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBancontact'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBancontact'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.bancontact.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBancontact'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.bancontact.anyOf.properties.preferred_language@ in the specification.
--
-- Preferred language of the Bancontact authorization page that the customer is redirected to.
data PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"de"@
    PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'EnumDe
  | -- | Represents the JSON value @"en"@
    PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'EnumEn
  | -- | Represents the JSON value @"fr"@
    PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'EnumFr
  | -- | Represents the JSON value @"nl"@
    PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'EnumNl
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage' where
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'EnumDe) = "de"
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'EnumEn) = "en"
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'EnumFr) = "fr"
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'EnumNl) = "nl"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "de" -> PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'EnumDe
          | val GHC.Classes.== "en" -> PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'EnumEn
          | val GHC.Classes.== "fr" -> PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'EnumFr
          | val GHC.Classes.== "nl" -> PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'EnumNl
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBancontact'PreferredLanguage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.bancontact.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBancontact'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.bancontact.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBancontact'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.billie.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsBillie' = PaymentIntentPaymentMethodOptionsBillie'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsBillie'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBillie'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsBillie'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsBillie'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsBillie'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsBillie'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsBillie'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsBillie'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBillie'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBillie' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBillie'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBillie' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsBillie'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsBillie' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsBillie'' with all required fields.
mkPaymentIntentPaymentMethodOptionsBillie' :: PaymentIntentPaymentMethodOptionsBillie'
mkPaymentIntentPaymentMethodOptionsBillie' =
  PaymentIntentPaymentMethodOptionsBillie'
    { paymentIntentPaymentMethodOptionsBillie'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBillie'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBillie'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBillie'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBillie'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBillie'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBillie'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.billie.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsBillie'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBillie'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBillie'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsBillie'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBillie'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsBillie'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBillie'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBillie'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBillie'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsBillie'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBillie'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.billie.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBillie'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.billie.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBillie'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBillie'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBillie'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.blik.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsBlik' = PaymentIntentPaymentMethodOptionsBlik'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsBlik'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBlik'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsBlik'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsBlik'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsBlik'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsBlik'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsBlik'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBlik'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsBlik'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBlik'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBlik' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBlik'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBlik' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsBlik'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsBlik' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsBlik'' with all required fields.
mkPaymentIntentPaymentMethodOptionsBlik' :: PaymentIntentPaymentMethodOptionsBlik'
mkPaymentIntentPaymentMethodOptionsBlik' =
  PaymentIntentPaymentMethodOptionsBlik'
    { paymentIntentPaymentMethodOptionsBlik'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBlik'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBlik'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBlik'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBlik'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBlik'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBlik'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.blik.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsBlik'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBlik'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBlik'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsBlik'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsBlik'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBlik'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsBlik'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBlik'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBlik'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsBlik'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBlik'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsBlik'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsBlik'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBlik'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.blik.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsBlik'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBlik'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBlik'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsBlik'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBlik'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsBlik'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBlik'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBlik'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBlik'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsBlik'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBlik'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.blik.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBlik'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBlik'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBlik'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.boleto.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsBoleto' = PaymentIntentPaymentMethodOptionsBoleto'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsBoleto'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod'),
    -- | expires_after_days: The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America\/Sao_Paulo time.
    paymentIntentPaymentMethodOptionsBoleto'ExpiresAfterDays :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | installments:
    paymentIntentPaymentMethodOptionsBoleto'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsBoleto'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsBoleto'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsBoleto'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsBoleto'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBoleto' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_days" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'ExpiresAfterDays obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_days" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'ExpiresAfterDays obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBoleto'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBoleto' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsBoleto'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsBoleto' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_after_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsBoleto'' with all required fields.
mkPaymentIntentPaymentMethodOptionsBoleto' :: PaymentIntentPaymentMethodOptionsBoleto'
mkPaymentIntentPaymentMethodOptionsBoleto' =
  PaymentIntentPaymentMethodOptionsBoleto'
    { paymentIntentPaymentMethodOptionsBoleto'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBoleto'ExpiresAfterDays = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBoleto'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBoleto'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBoleto'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBoleto'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBoleto'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.boleto.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBoleto'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.boleto.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBoleto'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.boleto.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBoleto'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsCard' = PaymentIntentPaymentMethodOptionsCard'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsCard'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCard'CaptureMethod'),
    -- | installments: Installment details for this payment.
    --
    -- For more information, see the [installments integration guide](https:\/\/stripe.com\/docs\/payments\/installments).
    paymentIntentPaymentMethodOptionsCard'Installments :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptionsCard'Installments'NonNullable)),
    -- | mandate_options: Configuration options for setting up an eMandate for cards issued in India.
    paymentIntentPaymentMethodOptionsCard'MandateOptions :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullable)),
    -- | network: Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
    paymentIntentPaymentMethodOptionsCard'Network :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptionsCard'Network'NonNullable)),
    -- | request_extended_authorization: Request ability to [capture beyond the standard authorization validity window](https:\/\/stripe.com\/docs\/payments\/extended-authorization) for this PaymentIntent.
    paymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization'),
    -- | request_incremental_authorization: Request ability to [increment the authorization](https:\/\/stripe.com\/docs\/payments\/incremental-authorization) for this PaymentIntent.
    paymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization'),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | request_multicapture: Request ability to make [multiple captures](https:\/\/stripe.com\/docs\/payments\/multicapture) for this PaymentIntent.
    paymentIntentPaymentMethodOptionsCard'RequestMulticapture :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCard'RequestMulticapture'),
    -- | request_overcapture: Request ability to [overcapture](https:\/\/stripe.com\/docs\/payments\/overcapture) for this PaymentIntent.
    paymentIntentPaymentMethodOptionsCard'RequestOvercapture :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCard'RequestOvercapture'),
    -- | request_three_d_secure: We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https:\/\/stripe.com\/docs\/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to \`automatic\`. Read our guide on [manually requesting 3D Secure](https:\/\/stripe.com\/docs\/payments\/3d-secure\/authentication-flow\#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    paymentIntentPaymentMethodOptionsCard'RequestThreeDSecure :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullable)),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsCard'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsCard'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsCard'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'),
    -- | statement_descriptor_suffix_kana: Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsCard'StatementDescriptorSuffixKana :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | statement_descriptor_suffix_kanji: Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsCard'StatementDescriptorSuffixKanji :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsCard'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCard'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Network obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_extended_authorization" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_multicapture" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequestMulticapture obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_overcapture" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequestOvercapture obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_three_d_secure" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequestThreeDSecure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kana" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'StatementDescriptorSuffixKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kanji" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'StatementDescriptorSuffixKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Network obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_extended_authorization" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_multicapture" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequestMulticapture obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_overcapture" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequestOvercapture obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_three_d_secure" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequestThreeDSecure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kana" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'StatementDescriptorSuffixKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kanji" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'StatementDescriptorSuffixKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCard'" (\obj -> (((((((((((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsCard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_extended_authorization")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_multicapture")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_overcapture")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor_suffix_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor_suffix_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsCard'' with all required fields.
mkPaymentIntentPaymentMethodOptionsCard' :: PaymentIntentPaymentMethodOptionsCard'
mkPaymentIntentPaymentMethodOptionsCard' =
  PaymentIntentPaymentMethodOptionsCard'
    { paymentIntentPaymentMethodOptionsCard'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'MandateOptions = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'Network = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'RequestMulticapture = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'RequestOvercapture = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'RequestThreeDSecure = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'StatementDescriptorSuffixKana = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'StatementDescriptorSuffixKanji = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsCard'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsCard'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsCard'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsCard'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'CaptureMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.installments.anyOf@ in the specification.
--
-- Installment details for this payment.
--
-- For more information, see the [installments integration guide](https:\\\/\\\/stripe.com\\\/docs\\\/payments\\\/installments).
data PaymentIntentPaymentMethodOptionsCard'Installments'NonNullable = PaymentIntentPaymentMethodOptionsCard'Installments'NonNullable
  { -- | available_plans: Installment plans that may be selected for this PaymentIntent.
    paymentIntentPaymentMethodOptionsCard'Installments'NonNullableAvailablePlans :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [PaymentMethodDetailsCardInstallmentsPlan])),
    -- | enabled: Whether Installments are enabled for this PaymentIntent.
    paymentIntentPaymentMethodOptionsCard'Installments'NonNullableEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | plan: Installment plan selected for this PaymentIntent.
    paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'Installments'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_plans" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments'NonNullableAvailablePlans obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments'NonNullableEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("plan" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_plans" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments'NonNullableAvailablePlans obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments'NonNullableEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("plan" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'Installments'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCard'Installments'NonNullable" (\obj -> ((GHC.Base.pure PaymentIntentPaymentMethodOptionsCard'Installments'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "available_plans")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "plan"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsCard'Installments'NonNullable' with all required fields.
mkPaymentIntentPaymentMethodOptionsCard'Installments'NonNullable :: PaymentIntentPaymentMethodOptionsCard'Installments'NonNullable
mkPaymentIntentPaymentMethodOptionsCard'Installments'NonNullable =
  PaymentIntentPaymentMethodOptionsCard'Installments'NonNullable
    { paymentIntentPaymentMethodOptionsCard'Installments'NonNullableAvailablePlans = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'Installments'NonNullableEnabled = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.installments.anyOf.properties.plan.anyOf@ in the specification.
--
-- Installment plan selected for this PaymentIntent.
data PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullable = PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullable
  { -- | count: For \`fixed_count\` installment plans, this is the number of installment payments your customer will make to their credit card.
    paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableCount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | interval: For \`fixed_count\` installment plans, this is the interval between installment payments your customer will make to their credit card.
    -- One of \`month\`.
    paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval'NonNullable)),
    -- | type: Type of installment plan, one of \`fixed_count\`, \`bonus\`, or \`revolving\`.
    paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("count" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("count" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullable" (\obj -> ((GHC.Base.pure PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullable' with all required fields.
mkPaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullable :: PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullable
mkPaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullable =
  PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullable
    { paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableCount = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.installments.anyOf.properties.plan.anyOf.properties.interval@ in the specification.
--
-- For \`fixed_count\` installment plans, this is the interval between installment payments your customer will make to their credit card.
-- One of \`month\`.
data PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"month"@
    PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableEnumMonth
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableEnumMonth) = "month"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "month" -> PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableEnumMonth
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.installments.anyOf.properties.plan.anyOf.properties.type@ in the specification.
--
-- Type of installment plan, one of \`fixed_count\`, \`bonus\`, or \`revolving\`.
data PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"bonus"@
    PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'EnumBonus
  | -- | Represents the JSON value @"fixed_count"@
    PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'EnumFixedCount
  | -- | Represents the JSON value @"revolving"@
    PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'EnumRevolving
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType' where
  toJSON (PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'EnumBonus) = "bonus"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'EnumFixedCount) = "fixed_count"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'EnumRevolving) = "revolving"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "bonus" -> PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'EnumBonus
          | val GHC.Classes.== "fixed_count" -> PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'EnumFixedCount
          | val GHC.Classes.== "revolving" -> PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'EnumRevolving
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'Installments'NonNullablePlan'NonNullableType'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.mandate_options.anyOf@ in the specification.
--
-- Configuration options for setting up an eMandate for cards issued in India.
data PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullable = PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullable
  { -- | amount: Amount to be charged for future payments.
    paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_type: One of \`fixed\` or \`maximum\`. If \`fixed\`, the \`amount\` param refers to the exact amount to be charged in future payments. If \`maximum\`, the amount charged can be up to the value passed for the \`amount\` param.
    paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType'),
    -- | description: A description of the mandate or subscription that is meant to be displayed to the customer.
    --
    -- Constraints:
    --
    -- * Maximum length of 200
    paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | end_date: End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
    paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableEndDate :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | interval: Specifies payment frequency. One of \`day\`, \`week\`, \`month\`, \`year\`, or \`sporadic\`.
    paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'),
    -- | interval_count: The number of intervals between payments. For example, \`interval=month\` and \`interval_count=3\` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when \`interval=sporadic\`.
    paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableIntervalCount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | reference: Unique identifier for the mandate or subscription.
    --
    -- Constraints:
    --
    -- * Maximum length of 80
    paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableReference :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | start_date: Start date of the mandate or subscription. Start date should not be lesser than yesterday.
    paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableStartDate :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | supported_types: Specifies the type of mandates supported. Possible values are \`india\`.
    paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes'NonNullable]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("end_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableEndDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_count" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableIntervalCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableReference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("start_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableStartDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("supported_types" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("end_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableEndDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_count" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableIntervalCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableReference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("start_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableStartDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("supported_types" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullable" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "end_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interval_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "start_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "supported_types"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullable' with all required fields.
mkPaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullable :: PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullable
mkPaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullable =
  PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullable
    { paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmount = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableDescription = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableEndDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableIntervalCount = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableReference = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableStartDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.mandate_options.anyOf.properties.amount_type@ in the specification.
--
-- One of \`fixed\` or \`maximum\`. If \`fixed\`, the \`amount\` param refers to the exact amount to be charged in future payments. If \`maximum\`, the amount charged can be up to the value passed for the \`amount\` param.
data PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"fixed"@
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType'EnumFixed
  | -- | Represents the JSON value @"maximum"@
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType'EnumMaximum
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType' where
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType'EnumFixed) = "fixed"
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType'EnumMaximum) = "maximum"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "fixed" -> PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType'EnumFixed
          | val GHC.Classes.== "maximum" -> PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType'EnumMaximum
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableAmountType'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.mandate_options.anyOf.properties.interval@ in the specification.
--
-- Specifies payment frequency. One of \`day\`, \`week\`, \`month\`, \`year\`, or \`sporadic\`.
data PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"day"@
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumDay
  | -- | Represents the JSON value @"month"@
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumMonth
  | -- | Represents the JSON value @"sporadic"@
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumSporadic
  | -- | Represents the JSON value @"week"@
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumWeek
  | -- | Represents the JSON value @"year"@
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumYear
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval' where
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumDay) = "day"
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumMonth) = "month"
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumSporadic) = "sporadic"
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumWeek) = "week"
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumYear) = "year"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "day" -> PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumDay
          | val GHC.Classes.== "month" -> PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumMonth
          | val GHC.Classes.== "sporadic" -> PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumSporadic
          | val GHC.Classes.== "week" -> PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumWeek
          | val GHC.Classes.== "year" -> PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'EnumYear
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableInterval'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.mandate_options.anyOf.properties.supported_types.items@ in the specification.
data PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"india"@
    PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes'NonNullableEnumIndia
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes'NonNullableEnumIndia) = "india"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "india" -> PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes'NonNullableEnumIndia
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'MandateOptions'NonNullableSupportedTypes'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.network@ in the specification.
--
-- Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
data PaymentIntentPaymentMethodOptionsCard'Network'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"amex"@
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumAmex
  | -- | Represents the JSON value @"cartes_bancaires"@
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumCartesBancaires
  | -- | Represents the JSON value @"diners"@
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumDiners
  | -- | Represents the JSON value @"discover"@
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumDiscover
  | -- | Represents the JSON value @"eftpos_au"@
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumEftposAu
  | -- | Represents the JSON value @"girocard"@
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumGirocard
  | -- | Represents the JSON value @"interac"@
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumInterac
  | -- | Represents the JSON value @"jcb"@
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumJcb
  | -- | Represents the JSON value @"link"@
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumLink
  | -- | Represents the JSON value @"mastercard"@
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumMastercard
  | -- | Represents the JSON value @"unionpay"@
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumUnionpay
  | -- | Represents the JSON value @"unknown"@
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumUnknown
  | -- | Represents the JSON value @"visa"@
    PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumVisa
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'Network'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumAmex) = "amex"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumCartesBancaires) = "cartes_bancaires"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumDiners) = "diners"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumDiscover) = "discover"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumEftposAu) = "eftpos_au"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumGirocard) = "girocard"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumInterac) = "interac"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumJcb) = "jcb"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumLink) = "link"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumMastercard) = "mastercard"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumUnionpay) = "unionpay"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumUnknown) = "unknown"
  toJSON (PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumVisa) = "visa"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'Network'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "amex" -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumAmex
          | val GHC.Classes.== "cartes_bancaires" -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumCartesBancaires
          | val GHC.Classes.== "diners" -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumDiners
          | val GHC.Classes.== "discover" -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumDiscover
          | val GHC.Classes.== "eftpos_au" -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumEftposAu
          | val GHC.Classes.== "girocard" -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumGirocard
          | val GHC.Classes.== "interac" -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumInterac
          | val GHC.Classes.== "jcb" -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumJcb
          | val GHC.Classes.== "link" -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumLink
          | val GHC.Classes.== "mastercard" -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumMastercard
          | val GHC.Classes.== "unionpay" -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumUnionpay
          | val GHC.Classes.== "unknown" -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumUnknown
          | val GHC.Classes.== "visa" -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableEnumVisa
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'Network'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.request_extended_authorization@ in the specification.
--
-- Request ability to [capture beyond the standard authorization validity window](https:\/\/stripe.com\/docs\/payments\/extended-authorization) for this PaymentIntent.
data PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"if_available"@
    PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization'EnumIfAvailable
  | -- | Represents the JSON value @"never"@
    PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization' where
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization'EnumIfAvailable) = "if_available"
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "if_available" -> PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization'EnumIfAvailable
          | val GHC.Classes.== "never" -> PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization'EnumNever
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'RequestExtendedAuthorization'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.request_incremental_authorization@ in the specification.
--
-- Request ability to [increment the authorization](https:\/\/stripe.com\/docs\/payments\/incremental-authorization) for this PaymentIntent.
data PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"if_available"@
    PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization'EnumIfAvailable
  | -- | Represents the JSON value @"never"@
    PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization' where
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization'EnumIfAvailable) = "if_available"
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "if_available" -> PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization'EnumIfAvailable
          | val GHC.Classes.== "never" -> PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization'EnumNever
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'RequestIncrementalAuthorization'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.request_multicapture@ in the specification.
--
-- Request ability to make [multiple captures](https:\/\/stripe.com\/docs\/payments\/multicapture) for this PaymentIntent.
data PaymentIntentPaymentMethodOptionsCard'RequestMulticapture'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'RequestMulticapture'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'RequestMulticapture'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"if_available"@
    PaymentIntentPaymentMethodOptionsCard'RequestMulticapture'EnumIfAvailable
  | -- | Represents the JSON value @"never"@
    PaymentIntentPaymentMethodOptionsCard'RequestMulticapture'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'RequestMulticapture' where
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestMulticapture'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestMulticapture'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestMulticapture'EnumIfAvailable) = "if_available"
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestMulticapture'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'RequestMulticapture' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "if_available" -> PaymentIntentPaymentMethodOptionsCard'RequestMulticapture'EnumIfAvailable
          | val GHC.Classes.== "never" -> PaymentIntentPaymentMethodOptionsCard'RequestMulticapture'EnumNever
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'RequestMulticapture'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.request_overcapture@ in the specification.
--
-- Request ability to [overcapture](https:\/\/stripe.com\/docs\/payments\/overcapture) for this PaymentIntent.
data PaymentIntentPaymentMethodOptionsCard'RequestOvercapture'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'RequestOvercapture'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'RequestOvercapture'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"if_available"@
    PaymentIntentPaymentMethodOptionsCard'RequestOvercapture'EnumIfAvailable
  | -- | Represents the JSON value @"never"@
    PaymentIntentPaymentMethodOptionsCard'RequestOvercapture'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'RequestOvercapture' where
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestOvercapture'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestOvercapture'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestOvercapture'EnumIfAvailable) = "if_available"
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestOvercapture'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'RequestOvercapture' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "if_available" -> PaymentIntentPaymentMethodOptionsCard'RequestOvercapture'EnumIfAvailable
          | val GHC.Classes.== "never" -> PaymentIntentPaymentMethodOptionsCard'RequestOvercapture'EnumNever
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'RequestOvercapture'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.request_three_d_secure@ in the specification.
--
-- We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https:\/\/stripe.com\/docs\/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to \`automatic\`. Read our guide on [manually requesting 3D Secure](https:\/\/stripe.com\/docs\/payments\/3d-secure\/authentication-flow\#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
data PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"any"@
    PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableEnumAny
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableEnumAutomatic
  | -- | Represents the JSON value @"challenge"@
    PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableEnumChallenge
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableEnumAny) = "any"
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableEnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableEnumChallenge) = "challenge"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "any" -> PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableEnumAny
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableEnumAutomatic
          | val GHC.Classes.== "challenge" -> PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableEnumChallenge
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'RequestThreeDSecure'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsCard'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCard'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCard'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsCard'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsCard'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsCard'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsCard'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCard'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCard'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsCard'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsCard'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsCard'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsCard'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsCard'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCard'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.card_present.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsCardPresent' = PaymentIntentPaymentMethodOptionsCardPresent'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsCardPresent'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsCardPresent'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_extended_authorization: Request ability to capture this payment beyond the standard [authorization validity window](https:\/\/stripe.com\/docs\/terminal\/features\/extended-authorizations\#authorization-validity)
    paymentIntentPaymentMethodOptionsCardPresent'RequestExtendedAuthorization :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Bool)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsCardPresent'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Bool)),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsCardPresent'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsCardPresent'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsCardPresent'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCardPresent' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_extended_authorization" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'RequestExtendedAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_extended_authorization" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'RequestExtendedAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCardPresent'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCardPresent' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCardPresent'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsCardPresent' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_extended_authorization")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsCardPresent'' with all required fields.
mkPaymentIntentPaymentMethodOptionsCardPresent' :: PaymentIntentPaymentMethodOptionsCardPresent'
mkPaymentIntentPaymentMethodOptionsCardPresent' =
  PaymentIntentPaymentMethodOptionsCardPresent'
    { paymentIntentPaymentMethodOptionsCardPresent'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCardPresent'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCardPresent'RequestExtendedAuthorization = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCardPresent'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCardPresent'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCardPresent'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCardPresent'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card_present.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCardPresent'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card_present.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCardPresent'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.card_present.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCardPresent'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.cashapp.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsCashapp' = PaymentIntentPaymentMethodOptionsCashapp'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsCashapp'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCashapp'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsCashapp'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsCashapp'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsCashapp'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsCashapp'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsCashapp'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCashapp' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCashapp'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCashapp' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCashapp'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsCashapp' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsCashapp'' with all required fields.
mkPaymentIntentPaymentMethodOptionsCashapp' :: PaymentIntentPaymentMethodOptionsCashapp'
mkPaymentIntentPaymentMethodOptionsCashapp' =
  PaymentIntentPaymentMethodOptionsCashapp'
    { paymentIntentPaymentMethodOptionsCashapp'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCashapp'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCashapp'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCashapp'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCashapp'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCashapp'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.cashapp.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsCashapp'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCashapp'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCashapp'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsCashapp'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCashapp'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsCashapp'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCashapp'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCashapp'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCashapp'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsCashapp'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCashapp'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.cashapp.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCashapp'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.cashapp.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCashapp'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.crypto.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsCrypto' = PaymentIntentPaymentMethodOptionsCrypto'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsCrypto'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsCrypto'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsCrypto'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsCrypto'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsCrypto'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsCrypto'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCrypto' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCrypto'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCrypto' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCrypto'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsCrypto' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsCrypto'' with all required fields.
mkPaymentIntentPaymentMethodOptionsCrypto' :: PaymentIntentPaymentMethodOptionsCrypto'
mkPaymentIntentPaymentMethodOptionsCrypto' =
  PaymentIntentPaymentMethodOptionsCrypto'
    { paymentIntentPaymentMethodOptionsCrypto'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCrypto'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCrypto'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCrypto'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCrypto'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCrypto'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.crypto.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCrypto'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.crypto.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCrypto'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.crypto.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCrypto'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.customer_balance.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsCustomerBalance' = PaymentIntentPaymentMethodOptionsCustomerBalance'
  { -- | bank_transfer:
    paymentIntentPaymentMethodOptionsCustomerBalance'BankTransfer :: (GHC.Maybe.Maybe PaymentMethodOptionsCustomerBalanceBankTransfer),
    -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod'),
    -- | funding_type: The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: \`bank_transfer\`.
    paymentIntentPaymentMethodOptionsCustomerBalance'FundingType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptionsCustomerBalance'FundingType'NonNullable)),
    -- | installments:
    paymentIntentPaymentMethodOptionsCustomerBalance'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsCustomerBalance'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsCustomerBalance'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsCustomerBalance'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCustomerBalance' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_transfer" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'BankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'FundingType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_transfer" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'BankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'FundingType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCustomerBalance' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCustomerBalance'" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsCustomerBalance' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "funding_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsCustomerBalance'' with all required fields.
mkPaymentIntentPaymentMethodOptionsCustomerBalance' :: PaymentIntentPaymentMethodOptionsCustomerBalance'
mkPaymentIntentPaymentMethodOptionsCustomerBalance' =
  PaymentIntentPaymentMethodOptionsCustomerBalance'
    { paymentIntentPaymentMethodOptionsCustomerBalance'BankTransfer = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCustomerBalance'FundingType = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCustomerBalance'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCustomerBalance'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCustomerBalance'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCustomerBalance'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.customer_balance.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCustomerBalance'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.customer_balance.anyOf.properties.funding_type@ in the specification.
--
-- The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: \`bank_transfer\`.
data PaymentIntentPaymentMethodOptionsCustomerBalance'FundingType'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCustomerBalance'FundingType'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCustomerBalance'FundingType'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"bank_transfer"@
    PaymentIntentPaymentMethodOptionsCustomerBalance'FundingType'NonNullableEnumBankTransfer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCustomerBalance'FundingType'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'FundingType'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'FundingType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'FundingType'NonNullableEnumBankTransfer) = "bank_transfer"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCustomerBalance'FundingType'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "bank_transfer" -> PaymentIntentPaymentMethodOptionsCustomerBalance'FundingType'NonNullableEnumBankTransfer
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCustomerBalance'FundingType'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.customer_balance.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCustomerBalance'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.customer_balance.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCustomerBalance'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.eps.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsEps' = PaymentIntentPaymentMethodOptionsEps'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsEps'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsEps'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsEps'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsEps'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsEps'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsEps'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsEps'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsEps'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsEps'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsEps'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsEps' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsEps'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsEps' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsEps'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsEps' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsEps'' with all required fields.
mkPaymentIntentPaymentMethodOptionsEps' :: PaymentIntentPaymentMethodOptionsEps'
mkPaymentIntentPaymentMethodOptionsEps' =
  PaymentIntentPaymentMethodOptionsEps'
    { paymentIntentPaymentMethodOptionsEps'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsEps'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsEps'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsEps'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsEps'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsEps'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsEps'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.eps.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsEps'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsEps'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsEps'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsEps'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsEps'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsEps'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsEps'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsEps'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsEps'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsEps'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsEps'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsEps'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsEps'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsEps'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.eps.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsEps'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsEps'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsEps'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsEps'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsEps'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsEps'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsEps'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsEps'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsEps'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsEps'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsEps'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.eps.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsEps'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsEps'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsEps'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsEps'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsEps'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsEps'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsEps'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsEps'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsEps'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsEps'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsEps'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsEps'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsEps'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsEps'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsEps'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsEps'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsEps'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.fpx.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsFpx' = PaymentIntentPaymentMethodOptionsFpx'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsFpx'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsFpx'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsFpx'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsFpx'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsFpx'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsFpx'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsFpx'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsFpx'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsFpx'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsFpx'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsFpx' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsFpx'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsFpx' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsFpx'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsFpx' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsFpx'' with all required fields.
mkPaymentIntentPaymentMethodOptionsFpx' :: PaymentIntentPaymentMethodOptionsFpx'
mkPaymentIntentPaymentMethodOptionsFpx' =
  PaymentIntentPaymentMethodOptionsFpx'
    { paymentIntentPaymentMethodOptionsFpx'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsFpx'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsFpx'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsFpx'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsFpx'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsFpx'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsFpx'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.fpx.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsFpx'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsFpx'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsFpx'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsFpx'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsFpx'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsFpx'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsFpx'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsFpx'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsFpx'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsFpx'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsFpx'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsFpx'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsFpx'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsFpx'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.fpx.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsFpx'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsFpx'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsFpx'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsFpx'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsFpx'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsFpx'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsFpx'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsFpx'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsFpx'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsFpx'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsFpx'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.fpx.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsFpx'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsFpx'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsFpx'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.giropay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsGiropay' = PaymentIntentPaymentMethodOptionsGiropay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsGiropay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsGiropay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsGiropay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsGiropay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsGiropay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsGiropay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsGiropay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGiropay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsGiropay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsGiropay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsGiropay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsGiropay'' with all required fields.
mkPaymentIntentPaymentMethodOptionsGiropay' :: PaymentIntentPaymentMethodOptionsGiropay'
mkPaymentIntentPaymentMethodOptionsGiropay' =
  PaymentIntentPaymentMethodOptionsGiropay'
    { paymentIntentPaymentMethodOptionsGiropay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGiropay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGiropay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGiropay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGiropay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGiropay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.giropay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsGiropay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.giropay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsGiropay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.giropay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsGiropay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.grabpay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsGrabpay' = PaymentIntentPaymentMethodOptionsGrabpay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsGrabpay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsGrabpay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsGrabpay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsGrabpay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsGrabpay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsGrabpay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsGrabpay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsGrabpay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsGrabpay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsGrabpay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsGrabpay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsGrabpay'' with all required fields.
mkPaymentIntentPaymentMethodOptionsGrabpay' :: PaymentIntentPaymentMethodOptionsGrabpay'
mkPaymentIntentPaymentMethodOptionsGrabpay' =
  PaymentIntentPaymentMethodOptionsGrabpay'
    { paymentIntentPaymentMethodOptionsGrabpay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGrabpay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGrabpay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGrabpay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGrabpay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsGrabpay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.grabpay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsGrabpay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.grabpay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsGrabpay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.grabpay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsGrabpay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.ideal.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsIdeal' = PaymentIntentPaymentMethodOptionsIdeal'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsIdeal'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsIdeal'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsIdeal'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsIdeal'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsIdeal'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsIdeal'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsIdeal' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsIdeal'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsIdeal' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsIdeal'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsIdeal' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsIdeal'' with all required fields.
mkPaymentIntentPaymentMethodOptionsIdeal' :: PaymentIntentPaymentMethodOptionsIdeal'
mkPaymentIntentPaymentMethodOptionsIdeal' =
  PaymentIntentPaymentMethodOptionsIdeal'
    { paymentIntentPaymentMethodOptionsIdeal'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsIdeal'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsIdeal'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsIdeal'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsIdeal'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsIdeal'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.ideal.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsIdeal'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.ideal.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsIdeal'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.ideal.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsIdeal'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.interac_present.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsInteracPresent' = PaymentIntentPaymentMethodOptionsInteracPresent'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsInteracPresent'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsInteracPresent'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsInteracPresent'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsInteracPresent'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsInteracPresent' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsInteracPresent' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsInteracPresent'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsInteracPresent' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsInteracPresent'' with all required fields.
mkPaymentIntentPaymentMethodOptionsInteracPresent' :: PaymentIntentPaymentMethodOptionsInteracPresent'
mkPaymentIntentPaymentMethodOptionsInteracPresent' =
  PaymentIntentPaymentMethodOptionsInteracPresent'
    { paymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsInteracPresent'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsInteracPresent'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsInteracPresent'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsInteracPresent'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.interac_present.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsInteracPresent'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.interac_present.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsInteracPresent'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.interac_present.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsInteracPresent'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.kakao_pay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsKakaoPay' = PaymentIntentPaymentMethodOptionsKakaoPay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsKakaoPay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsKakaoPay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsKakaoPay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsKakaoPay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKakaoPay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKakaoPay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsKakaoPay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsKakaoPay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsKakaoPay'' with all required fields.
mkPaymentIntentPaymentMethodOptionsKakaoPay' :: PaymentIntentPaymentMethodOptionsKakaoPay'
mkPaymentIntentPaymentMethodOptionsKakaoPay' =
  PaymentIntentPaymentMethodOptionsKakaoPay'
    { paymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKakaoPay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKakaoPay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKakaoPay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKakaoPay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.kakao_pay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsKakaoPay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.kakao_pay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsKakaoPay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.kakao_pay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsKakaoPay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.klarna.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsKlarna' = PaymentIntentPaymentMethodOptionsKlarna'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsKlarna'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKlarna'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsKlarna'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | preferred_locale: Preferred locale of the Klarna checkout page that the customer is redirected to.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsKlarna'PreferredLocale :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsKlarna'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsKlarna'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsKlarna'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsKlarna'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKlarna' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'PreferredLocale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'PreferredLocale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKlarna'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKlarna' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsKlarna'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsKlarna' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_locale")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsKlarna'' with all required fields.
mkPaymentIntentPaymentMethodOptionsKlarna' :: PaymentIntentPaymentMethodOptionsKlarna'
mkPaymentIntentPaymentMethodOptionsKlarna' =
  PaymentIntentPaymentMethodOptionsKlarna'
    { paymentIntentPaymentMethodOptionsKlarna'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKlarna'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKlarna'PreferredLocale = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKlarna'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKlarna'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKlarna'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKlarna'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.klarna.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsKlarna'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsKlarna'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsKlarna'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsKlarna'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKlarna'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsKlarna'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsKlarna'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsKlarna'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKlarna'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsKlarna'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsKlarna'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.klarna.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsKlarna'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.klarna.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsKlarna'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.konbini.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsKonbini' = PaymentIntentPaymentMethodOptionsKonbini'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsKonbini'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod'),
    -- | confirmation_number: An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsKonbini'ConfirmationNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | expires_after_days: The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and \`expires_after_days\` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
    paymentIntentPaymentMethodOptionsKonbini'ExpiresAfterDays :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | expires_at: The timestamp at which the Konbini payment instructions will expire. Only one of \`expires_after_days\` or \`expires_at\` may be set.
    paymentIntentPaymentMethodOptionsKonbini'ExpiresAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | installments:
    paymentIntentPaymentMethodOptionsKonbini'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | product_description: A product descriptor of up to 22 characters, which will appear to customers at the convenience store.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsKonbini'ProductDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsKonbini'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsKonbini'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsKonbini'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsKonbini'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKonbini' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirmation_number" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'ConfirmationNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_days" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'ExpiresAfterDays obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'ExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_description" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'ProductDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirmation_number" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'ConfirmationNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_days" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'ExpiresAfterDays obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'ExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_description" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'ProductDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKonbini'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKonbini' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsKonbini'" (\obj -> ((((((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsKonbini' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "confirmation_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_after_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "product_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsKonbini'' with all required fields.
mkPaymentIntentPaymentMethodOptionsKonbini' :: PaymentIntentPaymentMethodOptionsKonbini'
mkPaymentIntentPaymentMethodOptionsKonbini' =
  PaymentIntentPaymentMethodOptionsKonbini'
    { paymentIntentPaymentMethodOptionsKonbini'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKonbini'ConfirmationNumber = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKonbini'ExpiresAfterDays = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKonbini'ExpiresAt = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKonbini'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKonbini'ProductDescription = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKonbini'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKonbini'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKonbini'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKonbini'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.konbini.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsKonbini'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.konbini.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsKonbini'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.konbini.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsKonbini'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.kr_card.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsKrCard' = PaymentIntentPaymentMethodOptionsKrCard'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsKrCard'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKrCard'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsKrCard'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsKrCard'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsKrCard'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsKrCard'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsKrCard'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKrCard' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsKrCard'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKrCard' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsKrCard'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsKrCard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsKrCard'' with all required fields.
mkPaymentIntentPaymentMethodOptionsKrCard' :: PaymentIntentPaymentMethodOptionsKrCard'
mkPaymentIntentPaymentMethodOptionsKrCard' =
  PaymentIntentPaymentMethodOptionsKrCard'
    { paymentIntentPaymentMethodOptionsKrCard'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKrCard'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKrCard'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKrCard'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKrCard'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsKrCard'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.kr_card.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsKrCard'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsKrCard'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsKrCard'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsKrCard'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKrCard'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsKrCard'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsKrCard'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsKrCard'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKrCard'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsKrCard'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsKrCard'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.kr_card.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsKrCard'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.kr_card.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsKrCard'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.link.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsLink' = PaymentIntentPaymentMethodOptionsLink'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsLink'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsLink'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsLink'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsLink'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsLink'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsLink'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsLink'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsLink'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsLink'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsLink' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsLink'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsLink' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsLink'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsLink' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsLink'' with all required fields.
mkPaymentIntentPaymentMethodOptionsLink' :: PaymentIntentPaymentMethodOptionsLink'
mkPaymentIntentPaymentMethodOptionsLink' =
  PaymentIntentPaymentMethodOptionsLink'
    { paymentIntentPaymentMethodOptionsLink'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsLink'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsLink'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsLink'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsLink'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsLink'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsLink'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.link.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsLink'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsLink'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsLink'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsLink'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsLink'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsLink'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsLink'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsLink'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsLink'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsLink'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsLink'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.link.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsLink'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.link.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsLink'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsLink'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsLink'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsLink'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsLink'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsLink'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsLink'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsLink'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsLink'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsLink'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsLink'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsLink'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsLink'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsLink'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsLink'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsLink'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsLink'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.mobilepay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsMobilepay' = PaymentIntentPaymentMethodOptionsMobilepay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsMobilepay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMobilepay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsMobilepay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsMobilepay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsMobilepay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsMobilepay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsMobilepay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsMobilepay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMobilepay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsMobilepay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsMobilepay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsMobilepay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsMobilepay'' with all required fields.
mkPaymentIntentPaymentMethodOptionsMobilepay' :: PaymentIntentPaymentMethodOptionsMobilepay'
mkPaymentIntentPaymentMethodOptionsMobilepay' =
  PaymentIntentPaymentMethodOptionsMobilepay'
    { paymentIntentPaymentMethodOptionsMobilepay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMobilepay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMobilepay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMobilepay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMobilepay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMobilepay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.mobilepay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsMobilepay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsMobilepay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsMobilepay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsMobilepay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsMobilepay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsMobilepay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsMobilepay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsMobilepay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsMobilepay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsMobilepay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsMobilepay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.mobilepay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsMobilepay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.mobilepay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsMobilepay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.multibanco.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsMultibanco' = PaymentIntentPaymentMethodOptionsMultibanco'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsMultibanco'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsMultibanco'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsMultibanco'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsMultibanco'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsMultibanco'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsMultibanco'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsMultibanco' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsMultibanco'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsMultibanco' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsMultibanco'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsMultibanco' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsMultibanco'' with all required fields.
mkPaymentIntentPaymentMethodOptionsMultibanco' :: PaymentIntentPaymentMethodOptionsMultibanco'
mkPaymentIntentPaymentMethodOptionsMultibanco' =
  PaymentIntentPaymentMethodOptionsMultibanco'
    { paymentIntentPaymentMethodOptionsMultibanco'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMultibanco'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMultibanco'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMultibanco'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMultibanco'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsMultibanco'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.multibanco.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsMultibanco'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.multibanco.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsMultibanco'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.multibanco.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsMultibanco'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.naver_pay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsNaverPay' = PaymentIntentPaymentMethodOptionsNaverPay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsNaverPay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsNaverPay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsNaverPay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsNaverPay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsNaverPay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsNaverPay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsNaverPay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsNaverPay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNaverPay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsNaverPay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsNaverPay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsNaverPay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsNaverPay'' with all required fields.
mkPaymentIntentPaymentMethodOptionsNaverPay' :: PaymentIntentPaymentMethodOptionsNaverPay'
mkPaymentIntentPaymentMethodOptionsNaverPay' =
  PaymentIntentPaymentMethodOptionsNaverPay'
    { paymentIntentPaymentMethodOptionsNaverPay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNaverPay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNaverPay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNaverPay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNaverPay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNaverPay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.naver_pay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsNaverPay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsNaverPay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsNaverPay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsNaverPay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsNaverPay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsNaverPay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsNaverPay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsNaverPay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsNaverPay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsNaverPay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsNaverPay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.naver_pay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsNaverPay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.naver_pay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsNaverPay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.nz_bank_account.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsNzBankAccount' = PaymentIntentPaymentMethodOptionsNzBankAccount'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsNzBankAccount'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsNzBankAccount'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsNzBankAccount'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsNzBankAccount'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'),
    -- | target_date: Controls when Stripe will attempt to debit the funds from the customer\'s account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsNzBankAccount'TargetDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsNzBankAccount' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsNzBankAccount' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsNzBankAccount'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsNzBankAccount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsNzBankAccount'' with all required fields.
mkPaymentIntentPaymentMethodOptionsNzBankAccount' :: PaymentIntentPaymentMethodOptionsNzBankAccount'
mkPaymentIntentPaymentMethodOptionsNzBankAccount' =
  PaymentIntentPaymentMethodOptionsNzBankAccount'
    { paymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNzBankAccount'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNzBankAccount'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNzBankAccount'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNzBankAccount'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNzBankAccount'TargetDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.nz_bank_account.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsNzBankAccount'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.nz_bank_account.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsNzBankAccount'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.nz_bank_account.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsNzBankAccount'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.oxxo.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsOxxo' = PaymentIntentPaymentMethodOptionsOxxo'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsOxxo'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod'),
    -- | expires_after_days: The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America\/Mexico_City time.
    paymentIntentPaymentMethodOptionsOxxo'ExpiresAfterDays :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | installments:
    paymentIntentPaymentMethodOptionsOxxo'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsOxxo'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsOxxo'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsOxxo'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsOxxo'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsOxxo' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_days" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'ExpiresAfterDays obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_days" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'ExpiresAfterDays obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsOxxo'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsOxxo' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsOxxo'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsOxxo' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_after_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsOxxo'' with all required fields.
mkPaymentIntentPaymentMethodOptionsOxxo' :: PaymentIntentPaymentMethodOptionsOxxo'
mkPaymentIntentPaymentMethodOptionsOxxo' =
  PaymentIntentPaymentMethodOptionsOxxo'
    { paymentIntentPaymentMethodOptionsOxxo'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsOxxo'ExpiresAfterDays = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsOxxo'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsOxxo'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsOxxo'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsOxxo'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsOxxo'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.oxxo.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsOxxo'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.oxxo.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsOxxo'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.oxxo.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsOxxo'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.p24.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsP24' = PaymentIntentPaymentMethodOptionsP24'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsP24'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsP24'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsP24'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsP24'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsP24'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsP24'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsP24'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsP24'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsP24'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsP24'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsP24' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsP24'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsP24' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsP24'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsP24' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsP24'' with all required fields.
mkPaymentIntentPaymentMethodOptionsP24' :: PaymentIntentPaymentMethodOptionsP24'
mkPaymentIntentPaymentMethodOptionsP24' =
  PaymentIntentPaymentMethodOptionsP24'
    { paymentIntentPaymentMethodOptionsP24'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsP24'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsP24'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsP24'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsP24'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsP24'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsP24'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.p24.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsP24'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsP24'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsP24'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsP24'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsP24'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsP24'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsP24'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsP24'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsP24'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsP24'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsP24'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsP24'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsP24'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsP24'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.p24.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsP24'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsP24'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsP24'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsP24'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsP24'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsP24'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsP24'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsP24'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsP24'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsP24'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsP24'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.p24.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsP24'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsP24'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsP24'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsP24'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsP24'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsP24'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsP24'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsP24'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsP24'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsP24'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsP24'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsP24'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsP24'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsP24'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsP24'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsP24'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsP24'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.pay_by_bank.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsPayByBank' = PaymentIntentPaymentMethodOptionsPayByBank'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsPayByBank'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsPayByBank'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsPayByBank'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsPayByBank'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsPayByBank'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsPayByBank'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPayByBank' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayByBank'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPayByBank' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsPayByBank'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsPayByBank' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsPayByBank'' with all required fields.
mkPaymentIntentPaymentMethodOptionsPayByBank' :: PaymentIntentPaymentMethodOptionsPayByBank'
mkPaymentIntentPaymentMethodOptionsPayByBank' =
  PaymentIntentPaymentMethodOptionsPayByBank'
    { paymentIntentPaymentMethodOptionsPayByBank'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayByBank'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayByBank'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayByBank'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayByBank'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayByBank'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.pay_by_bank.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPayByBank'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.pay_by_bank.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPayByBank'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.pay_by_bank.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPayByBank'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.payco.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsPayco' = PaymentIntentPaymentMethodOptionsPayco'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsPayco'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPayco'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsPayco'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsPayco'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsPayco'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsPayco'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsPayco'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsPayco'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPayco'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPayco' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPayco'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPayco' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsPayco'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsPayco' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsPayco'' with all required fields.
mkPaymentIntentPaymentMethodOptionsPayco' :: PaymentIntentPaymentMethodOptionsPayco'
mkPaymentIntentPaymentMethodOptionsPayco' =
  PaymentIntentPaymentMethodOptionsPayco'
    { paymentIntentPaymentMethodOptionsPayco'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayco'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayco'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayco'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayco'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayco'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPayco'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.payco.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsPayco'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPayco'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPayco'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsPayco'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPayco'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsPayco'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPayco'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPayco'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPayco'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsPayco'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPayco'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.payco.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPayco'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.payco.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPayco'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPayco'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPayco'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.paynow.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsPaynow' = PaymentIntentPaymentMethodOptionsPaynow'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsPaynow'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsPaynow'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsPaynow'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsPaynow'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsPaynow'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsPaynow'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPaynow' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaynow'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPaynow' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsPaynow'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsPaynow' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsPaynow'' with all required fields.
mkPaymentIntentPaymentMethodOptionsPaynow' :: PaymentIntentPaymentMethodOptionsPaynow'
mkPaymentIntentPaymentMethodOptionsPaynow' =
  PaymentIntentPaymentMethodOptionsPaynow'
    { paymentIntentPaymentMethodOptionsPaynow'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaynow'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaynow'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaynow'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaynow'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaynow'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.paynow.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPaynow'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.paynow.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPaynow'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.paynow.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPaynow'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.paypal.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsPaypal' = PaymentIntentPaymentMethodOptionsPaypal'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsPaypal'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPaypal'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsPaypal'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | preferred_locale: Preferred locale of the PayPal checkout page that the customer is redirected to.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsPaypal'PreferredLocale :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | reference: A reference of the PayPal transaction visible to customer which is mapped to PayPal\'s invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsPaypal'Reference :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsPaypal'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsPaypal'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsPaypal'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsPaypal'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPaypal' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'PreferredLocale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'Reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'PreferredLocale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'Reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPaypal'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPaypal' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsPaypal'" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsPaypal' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_locale")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsPaypal'' with all required fields.
mkPaymentIntentPaymentMethodOptionsPaypal' :: PaymentIntentPaymentMethodOptionsPaypal'
mkPaymentIntentPaymentMethodOptionsPaypal' =
  PaymentIntentPaymentMethodOptionsPaypal'
    { paymentIntentPaymentMethodOptionsPaypal'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaypal'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaypal'PreferredLocale = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaypal'Reference = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaypal'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaypal'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaypal'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPaypal'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.paypal.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsPaypal'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPaypal'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPaypal'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsPaypal'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPaypal'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsPaypal'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPaypal'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPaypal'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPaypal'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsPaypal'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPaypal'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.paypal.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPaypal'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.paypal.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPaypal'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.pix.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsPix' = PaymentIntentPaymentMethodOptionsPix'
  { -- | amount_includes_iof: Determines if the amount includes the IOF tax.
    paymentIntentPaymentMethodOptionsPix'AmountIncludesIof :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof'),
    -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsPix'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPix'CaptureMethod'),
    -- | expires_after_seconds: The number of seconds (between 10 and 1209600) after which Pix payment will expire.
    paymentIntentPaymentMethodOptionsPix'ExpiresAfterSeconds :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | expires_at: The timestamp at which the Pix expires.
    paymentIntentPaymentMethodOptionsPix'ExpiresAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | installments:
    paymentIntentPaymentMethodOptionsPix'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsPix'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsPix'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsPix'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsPix'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPix'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsPix'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPix'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPix' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_includes_iof" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'AmountIncludesIof obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_seconds" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'ExpiresAfterSeconds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'ExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_includes_iof" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'AmountIncludesIof obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_seconds" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'ExpiresAfterSeconds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'ExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPix'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPix' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsPix'" (\obj -> (((((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsPix' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_includes_iof")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_after_seconds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsPix'' with all required fields.
mkPaymentIntentPaymentMethodOptionsPix' :: PaymentIntentPaymentMethodOptionsPix'
mkPaymentIntentPaymentMethodOptionsPix' =
  PaymentIntentPaymentMethodOptionsPix'
    { paymentIntentPaymentMethodOptionsPix'AmountIncludesIof = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPix'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPix'ExpiresAfterSeconds = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPix'ExpiresAt = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPix'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPix'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPix'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPix'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPix'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPix'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.pix.anyOf.properties.amount_includes_iof@ in the specification.
--
-- Determines if the amount includes the IOF tax.
data PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"always"@
    PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof'EnumAlways
  | -- | Represents the JSON value @"never"@
    PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof' where
  toJSON (PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof'EnumAlways) = "always"
  toJSON (PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "always" -> PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof'EnumAlways
          | val GHC.Classes.== "never" -> PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof'EnumNever
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPix'AmountIncludesIof'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.pix.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsPix'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPix'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPix'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsPix'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsPix'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPix'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsPix'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPix'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPix'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsPix'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPix'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsPix'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsPix'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPix'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.pix.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsPix'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPix'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPix'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsPix'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPix'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsPix'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPix'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPix'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPix'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsPix'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPix'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.pix.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsPix'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPix'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPix'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsPix'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsPix'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsPix'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPix'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsPix'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPix'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPix'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsPix'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsPix'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPix'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsPix'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsPix'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsPix'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPix'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.promptpay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsPromptpay' = PaymentIntentPaymentMethodOptionsPromptpay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsPromptpay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsPromptpay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsPromptpay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsPromptpay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsPromptpay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsPromptpay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPromptpay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsPromptpay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPromptpay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsPromptpay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsPromptpay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsPromptpay'' with all required fields.
mkPaymentIntentPaymentMethodOptionsPromptpay' :: PaymentIntentPaymentMethodOptionsPromptpay'
mkPaymentIntentPaymentMethodOptionsPromptpay' =
  PaymentIntentPaymentMethodOptionsPromptpay'
    { paymentIntentPaymentMethodOptionsPromptpay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPromptpay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPromptpay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPromptpay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPromptpay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsPromptpay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.promptpay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPromptpay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.promptpay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPromptpay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.promptpay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsPromptpay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.revolut_pay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsRevolutPay' = PaymentIntentPaymentMethodOptionsRevolutPay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsRevolutPay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsRevolutPay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsRevolutPay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsRevolutPay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsRevolutPay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsRevolutPay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsRevolutPay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsRevolutPay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsRevolutPay'' with all required fields.
mkPaymentIntentPaymentMethodOptionsRevolutPay' :: PaymentIntentPaymentMethodOptionsRevolutPay'
mkPaymentIntentPaymentMethodOptionsRevolutPay' =
  PaymentIntentPaymentMethodOptionsRevolutPay'
    { paymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsRevolutPay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsRevolutPay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsRevolutPay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsRevolutPay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.revolut_pay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsRevolutPay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.revolut_pay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsRevolutPay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.revolut_pay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsRevolutPay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.samsung_pay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsSamsungPay' = PaymentIntentPaymentMethodOptionsSamsungPay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsSamsungPay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsSamsungPay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsSamsungPay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsSamsungPay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSamsungPay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSamsungPay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsSamsungPay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsSamsungPay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsSamsungPay'' with all required fields.
mkPaymentIntentPaymentMethodOptionsSamsungPay' :: PaymentIntentPaymentMethodOptionsSamsungPay'
mkPaymentIntentPaymentMethodOptionsSamsungPay' =
  PaymentIntentPaymentMethodOptionsSamsungPay'
    { paymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSamsungPay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSamsungPay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSamsungPay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSamsungPay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.samsung_pay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSamsungPay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.samsung_pay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSamsungPay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.samsung_pay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSamsungPay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.satispay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsSatispay' = PaymentIntentPaymentMethodOptionsSatispay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsSatispay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSatispay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsSatispay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsSatispay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsSatispay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsSatispay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsSatispay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSatispay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSatispay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSatispay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsSatispay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsSatispay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsSatispay'' with all required fields.
mkPaymentIntentPaymentMethodOptionsSatispay' :: PaymentIntentPaymentMethodOptionsSatispay'
mkPaymentIntentPaymentMethodOptionsSatispay' =
  PaymentIntentPaymentMethodOptionsSatispay'
    { paymentIntentPaymentMethodOptionsSatispay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSatispay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSatispay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSatispay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSatispay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSatispay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.satispay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsSatispay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSatispay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSatispay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsSatispay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSatispay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsSatispay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSatispay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSatispay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSatispay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsSatispay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSatispay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.satispay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSatispay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.satispay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSatispay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.sepa_debit.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsSepaDebit' = PaymentIntentPaymentMethodOptionsSepaDebit'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsSepaDebit'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | mandate_options:
    paymentIntentPaymentMethodOptionsSepaDebit'MandateOptions :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsSepaDebit'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsSepaDebit'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsSepaDebit'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'),
    -- | target_date: Controls when Stripe will attempt to debit the funds from the customer\'s account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsSepaDebit'TargetDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSepaDebit' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSepaDebit' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsSepaDebit'" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsSepaDebit' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsSepaDebit'' with all required fields.
mkPaymentIntentPaymentMethodOptionsSepaDebit' :: PaymentIntentPaymentMethodOptionsSepaDebit'
mkPaymentIntentPaymentMethodOptionsSepaDebit' =
  PaymentIntentPaymentMethodOptionsSepaDebit'
    { paymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSepaDebit'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSepaDebit'MandateOptions = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSepaDebit'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSepaDebit'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSepaDebit'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSepaDebit'TargetDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.sepa_debit.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSepaDebit'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.sepa_debit.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSepaDebit'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.sepa_debit.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSepaDebit'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.sofort.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsSofort' = PaymentIntentPaymentMethodOptionsSofort'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsSofort'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSofort'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsSofort'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | preferred_language: Preferred language of the SOFORT authorization page that the customer is redirected to.
    paymentIntentPaymentMethodOptionsSofort'PreferredLanguage :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullable)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsSofort'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsSofort'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsSofort'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsSofort'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsSofort'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSofort'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSofort' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_language" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'PreferredLanguage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_language" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'PreferredLanguage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSofort'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSofort' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsSofort'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsSofort' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_language")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsSofort'' with all required fields.
mkPaymentIntentPaymentMethodOptionsSofort' :: PaymentIntentPaymentMethodOptionsSofort'
mkPaymentIntentPaymentMethodOptionsSofort' =
  PaymentIntentPaymentMethodOptionsSofort'
    { paymentIntentPaymentMethodOptionsSofort'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSofort'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSofort'PreferredLanguage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSofort'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSofort'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSofort'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSofort'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSofort'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.sofort.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsSofort'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSofort'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSofort'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsSofort'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsSofort'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSofort'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsSofort'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSofort'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSofort'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsSofort'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSofort'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsSofort'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsSofort'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSofort'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.sofort.anyOf.properties.preferred_language@ in the specification.
--
-- Preferred language of the SOFORT authorization page that the customer is redirected to.
data PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"de"@
    PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumDe
  | -- | Represents the JSON value @"en"@
    PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumEn
  | -- | Represents the JSON value @"es"@
    PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumEs
  | -- | Represents the JSON value @"fr"@
    PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumFr
  | -- | Represents the JSON value @"it"@
    PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumIt
  | -- | Represents the JSON value @"nl"@
    PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumNl
  | -- | Represents the JSON value @"pl"@
    PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumPl
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumDe) = "de"
  toJSON (PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumEn) = "en"
  toJSON (PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumEs) = "es"
  toJSON (PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumFr) = "fr"
  toJSON (PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumIt) = "it"
  toJSON (PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumNl) = "nl"
  toJSON (PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumPl) = "pl"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "de" -> PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumDe
          | val GHC.Classes.== "en" -> PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumEn
          | val GHC.Classes.== "es" -> PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumEs
          | val GHC.Classes.== "fr" -> PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumFr
          | val GHC.Classes.== "it" -> PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumIt
          | val GHC.Classes.== "nl" -> PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumNl
          | val GHC.Classes.== "pl" -> PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableEnumPl
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSofort'PreferredLanguage'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.sofort.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSofort'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.sofort.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSofort'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSofort'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSofort'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.swish.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsSwish' = PaymentIntentPaymentMethodOptionsSwish'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsSwish'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSwish'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsSwish'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | reference: A reference for this payment to be displayed in the Swish app.
    --
    -- Constraints:
    --
    -- * Maximum length of 35
    paymentIntentPaymentMethodOptionsSwish'Reference :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsSwish'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsSwish'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsSwish'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsSwish'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSwish'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsSwish'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsSwish'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSwish' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'Reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'Reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsSwish'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSwish' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsSwish'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsSwish' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsSwish'' with all required fields.
mkPaymentIntentPaymentMethodOptionsSwish' :: PaymentIntentPaymentMethodOptionsSwish'
mkPaymentIntentPaymentMethodOptionsSwish' =
  PaymentIntentPaymentMethodOptionsSwish'
    { paymentIntentPaymentMethodOptionsSwish'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSwish'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSwish'Reference = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSwish'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSwish'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSwish'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSwish'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsSwish'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.swish.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsSwish'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSwish'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSwish'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsSwish'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsSwish'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSwish'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsSwish'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSwish'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSwish'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsSwish'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSwish'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsSwish'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsSwish'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSwish'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.swish.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsSwish'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSwish'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSwish'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsSwish'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSwish'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsSwish'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSwish'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSwish'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSwish'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsSwish'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSwish'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.swish.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsSwish'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsSwish'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsSwish'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.twint.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsTwint' = PaymentIntentPaymentMethodOptionsTwint'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsTwint'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsTwint'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsTwint'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsTwint'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsTwint'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsTwint'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsTwint'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsTwint'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsTwint'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsTwint'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsTwint' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsTwint'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsTwint' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsTwint'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsTwint' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsTwint'' with all required fields.
mkPaymentIntentPaymentMethodOptionsTwint' :: PaymentIntentPaymentMethodOptionsTwint'
mkPaymentIntentPaymentMethodOptionsTwint' =
  PaymentIntentPaymentMethodOptionsTwint'
    { paymentIntentPaymentMethodOptionsTwint'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsTwint'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsTwint'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsTwint'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsTwint'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsTwint'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsTwint'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.twint.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsTwint'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsTwint'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsTwint'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsTwint'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsTwint'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsTwint'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsTwint'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsTwint'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsTwint'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsTwint'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsTwint'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsTwint'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsTwint'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsTwint'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.twint.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsTwint'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsTwint'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsTwint'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsTwint'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsTwint'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsTwint'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsTwint'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsTwint'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsTwint'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsTwint'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsTwint'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.twint.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsTwint'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsTwint'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsTwint'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.us_bank_account.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsUsBankAccount' = PaymentIntentPaymentMethodOptionsUsBankAccount'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod'),
    -- | financial_connections:
    paymentIntentPaymentMethodOptionsUsBankAccount'FinancialConnections :: (GHC.Maybe.Maybe LinkedAccountOptionsCommon),
    -- | installments:
    paymentIntentPaymentMethodOptionsUsBankAccount'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | mandate_options:
    paymentIntentPaymentMethodOptionsUsBankAccount'MandateOptions :: (GHC.Maybe.Maybe PaymentMethodOptionsUsBankAccountMandateOptions),
    -- | preferred_settlement_speed: Preferred transaction settlement speed
    paymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed'),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsUsBankAccount'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsUsBankAccount'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsUsBankAccount'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'),
    -- | target_date: Controls when Stripe will attempt to debit the funds from the customer\'s account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsUsBankAccount'TargetDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsUsBankAccount' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("financial_connections" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'FinancialConnections obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_settlement_speed" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("financial_connections" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'FinancialConnections obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_settlement_speed" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsUsBankAccount' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsUsBankAccount'" (\obj -> ((((((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsUsBankAccount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "financial_connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_settlement_speed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsUsBankAccount'' with all required fields.
mkPaymentIntentPaymentMethodOptionsUsBankAccount' :: PaymentIntentPaymentMethodOptionsUsBankAccount'
mkPaymentIntentPaymentMethodOptionsUsBankAccount' =
  PaymentIntentPaymentMethodOptionsUsBankAccount'
    { paymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsUsBankAccount'FinancialConnections = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsUsBankAccount'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsUsBankAccount'MandateOptions = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsUsBankAccount'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsUsBankAccount'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsUsBankAccount'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsUsBankAccount'TargetDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.us_bank_account.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsUsBankAccount'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.us_bank_account.anyOf.properties.preferred_settlement_speed@ in the specification.
--
-- Preferred transaction settlement speed
data PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"fastest"@
    PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed'EnumFastest
  | -- | Represents the JSON value @"standard"@
    PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed' where
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed'EnumFastest) = "fastest"
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "fastest" -> PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed'EnumFastest
          | val GHC.Classes.== "standard" -> PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed'EnumStandard
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsUsBankAccount'PreferredSettlementSpeed'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.us_bank_account.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsUsBankAccount'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.us_bank_account.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsUsBankAccount'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.wechat_pay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsWechatPay' = PaymentIntentPaymentMethodOptionsWechatPay'
  { -- | app_id: The app ID registered with WeChat Pay. Only required when client is ios or android.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsWechatPay'AppId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsWechatPay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod'),
    -- | client: The client type that the end customer will pay from
    paymentIntentPaymentMethodOptionsWechatPay'Client :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullable)),
    -- | installments:
    paymentIntentPaymentMethodOptionsWechatPay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsWechatPay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsWechatPay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsWechatPay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsWechatPay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsWechatPay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("app_id" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'AppId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'Client obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("app_id" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'AppId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'Client obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsWechatPay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsWechatPay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsWechatPay'" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsWechatPay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "app_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsWechatPay'' with all required fields.
mkPaymentIntentPaymentMethodOptionsWechatPay' :: PaymentIntentPaymentMethodOptionsWechatPay'
mkPaymentIntentPaymentMethodOptionsWechatPay' =
  PaymentIntentPaymentMethodOptionsWechatPay'
    { paymentIntentPaymentMethodOptionsWechatPay'AppId = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsWechatPay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsWechatPay'Client = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsWechatPay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsWechatPay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsWechatPay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsWechatPay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsWechatPay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.wechat_pay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsWechatPay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.wechat_pay.anyOf.properties.client@ in the specification.
--
-- The client type that the end customer will pay from
data PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"android"@
    PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableEnumAndroid
  | -- | Represents the JSON value @"ios"@
    PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableEnumIos
  | -- | Represents the JSON value @"web"@
    PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableEnumWeb
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableEnumAndroid) = "android"
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableEnumIos) = "ios"
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableEnumWeb) = "web"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "android" -> PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableEnumAndroid
          | val GHC.Classes.== "ios" -> PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableEnumIos
          | val GHC.Classes.== "web" -> PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableEnumWeb
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsWechatPay'Client'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.wechat_pay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsWechatPay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.wechat_pay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsWechatPay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options.properties.zip.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptionsZip' = PaymentIntentPaymentMethodOptionsZip'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptionsZip'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsZip'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptionsZip'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptionsZip'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptionsZip'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptionsZip'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsZip'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsZip'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptionsZip'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsZip'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsZip' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsZip'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsZip' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsZip'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptionsZip' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsZip'' with all required fields.
mkPaymentIntentPaymentMethodOptionsZip' :: PaymentIntentPaymentMethodOptionsZip'
mkPaymentIntentPaymentMethodOptionsZip' =
  PaymentIntentPaymentMethodOptionsZip'
    { paymentIntentPaymentMethodOptionsZip'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsZip'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsZip'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsZip'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsZip'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsZip'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsZip'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.zip.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptionsZip'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsZip'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsZip'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptionsZip'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptionsZip'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsZip'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsZip'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsZip'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsZip'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptionsZip'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsZip'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptionsZip'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptionsZip'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsZip'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.zip.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsZip'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsZip'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsZip'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsZip'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsZip'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsZip'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsZip'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsZip'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsZip'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsZip'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsZip'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options.properties.zip.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptionsZip'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsZip'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsZip'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptionsZip'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptionsZip'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptionsZip'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsZip'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptionsZip'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsZip'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsZip'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsZip'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptionsZip'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsZip'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsZip'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptionsZip'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptionsZip'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsZip'VerificationMethod'Other val
      )
