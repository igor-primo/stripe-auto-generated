{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingAuthorizationFuelData
module StripeAPI.Types.IssuingAuthorizationFuelData where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_authorization_fuel_data@ in the specification.
data IssuingAuthorizationFuelData = IssuingAuthorizationFuelData
  { -- | industry_product_code: [Conexxus Payment System Product Code](https:\/\/www.conexxus.org\/conexxus-payment-system-product-codes) identifying the primary fuel product purchased.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingAuthorizationFuelDataIndustryProductCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | quantity_decimal: The quantity of \`unit\`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places.
    issuingAuthorizationFuelDataQuantityDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | type: The type of fuel that was purchased.
    issuingAuthorizationFuelDataType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationFuelDataType'NonNullable)),
    -- | unit: The units for \`quantity_decimal\`.
    issuingAuthorizationFuelDataUnit :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationFuelDataUnit'NonNullable)),
    -- | unit_cost_decimal: The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
    issuingAuthorizationFuelDataUnitCostDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFuelData where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("industry_product_code" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFuelDataIndustryProductCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFuelDataQuantityDecimal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFuelDataType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFuelDataUnit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_cost_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFuelDataUnitCostDecimal obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("industry_product_code" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFuelDataIndustryProductCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFuelDataQuantityDecimal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFuelDataType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFuelDataUnit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_cost_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFuelDataUnitCostDecimal obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFuelData where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationFuelData" (\obj -> ((((GHC.Base.pure IssuingAuthorizationFuelData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "industry_product_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "quantity_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "unit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "unit_cost_decimal"))

-- | Create a new 'IssuingAuthorizationFuelData' with all required fields.
mkIssuingAuthorizationFuelData :: IssuingAuthorizationFuelData
mkIssuingAuthorizationFuelData =
  IssuingAuthorizationFuelData
    { issuingAuthorizationFuelDataIndustryProductCode = GHC.Maybe.Nothing,
      issuingAuthorizationFuelDataQuantityDecimal = GHC.Maybe.Nothing,
      issuingAuthorizationFuelDataType = GHC.Maybe.Nothing,
      issuingAuthorizationFuelDataUnit = GHC.Maybe.Nothing,
      issuingAuthorizationFuelDataUnitCostDecimal = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.issuing_authorization_fuel_data.properties.type@ in the specification.
--
-- The type of fuel that was purchased.
data IssuingAuthorizationFuelDataType'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingAuthorizationFuelDataType'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingAuthorizationFuelDataType'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"diesel"@
    IssuingAuthorizationFuelDataType'NonNullableEnumDiesel
  | -- | Represents the JSON value @"other"@
    IssuingAuthorizationFuelDataType'NonNullableEnumOther
  | -- | Represents the JSON value @"unleaded_plus"@
    IssuingAuthorizationFuelDataType'NonNullableEnumUnleadedPlus
  | -- | Represents the JSON value @"unleaded_regular"@
    IssuingAuthorizationFuelDataType'NonNullableEnumUnleadedRegular
  | -- | Represents the JSON value @"unleaded_super"@
    IssuingAuthorizationFuelDataType'NonNullableEnumUnleadedSuper
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFuelDataType'NonNullable where
  toJSON (IssuingAuthorizationFuelDataType'NonNullableOther val) = val
  toJSON (IssuingAuthorizationFuelDataType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingAuthorizationFuelDataType'NonNullableEnumDiesel) = "diesel"
  toJSON (IssuingAuthorizationFuelDataType'NonNullableEnumOther) = "other"
  toJSON (IssuingAuthorizationFuelDataType'NonNullableEnumUnleadedPlus) = "unleaded_plus"
  toJSON (IssuingAuthorizationFuelDataType'NonNullableEnumUnleadedRegular) = "unleaded_regular"
  toJSON (IssuingAuthorizationFuelDataType'NonNullableEnumUnleadedSuper) = "unleaded_super"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFuelDataType'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "diesel" -> IssuingAuthorizationFuelDataType'NonNullableEnumDiesel
          | val GHC.Classes.== "other" -> IssuingAuthorizationFuelDataType'NonNullableEnumOther
          | val GHC.Classes.== "unleaded_plus" -> IssuingAuthorizationFuelDataType'NonNullableEnumUnleadedPlus
          | val GHC.Classes.== "unleaded_regular" -> IssuingAuthorizationFuelDataType'NonNullableEnumUnleadedRegular
          | val GHC.Classes.== "unleaded_super" -> IssuingAuthorizationFuelDataType'NonNullableEnumUnleadedSuper
          | GHC.Base.otherwise -> IssuingAuthorizationFuelDataType'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.issuing_authorization_fuel_data.properties.unit@ in the specification.
--
-- The units for \`quantity_decimal\`.
data IssuingAuthorizationFuelDataUnit'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingAuthorizationFuelDataUnit'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingAuthorizationFuelDataUnit'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"charging_minute"@
    IssuingAuthorizationFuelDataUnit'NonNullableEnumChargingMinute
  | -- | Represents the JSON value @"imperial_gallon"@
    IssuingAuthorizationFuelDataUnit'NonNullableEnumImperialGallon
  | -- | Represents the JSON value @"kilogram"@
    IssuingAuthorizationFuelDataUnit'NonNullableEnumKilogram
  | -- | Represents the JSON value @"kilowatt_hour"@
    IssuingAuthorizationFuelDataUnit'NonNullableEnumKilowattHour
  | -- | Represents the JSON value @"liter"@
    IssuingAuthorizationFuelDataUnit'NonNullableEnumLiter
  | -- | Represents the JSON value @"other"@
    IssuingAuthorizationFuelDataUnit'NonNullableEnumOther
  | -- | Represents the JSON value @"pound"@
    IssuingAuthorizationFuelDataUnit'NonNullableEnumPound
  | -- | Represents the JSON value @"us_gallon"@
    IssuingAuthorizationFuelDataUnit'NonNullableEnumUsGallon
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFuelDataUnit'NonNullable where
  toJSON (IssuingAuthorizationFuelDataUnit'NonNullableOther val) = val
  toJSON (IssuingAuthorizationFuelDataUnit'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingAuthorizationFuelDataUnit'NonNullableEnumChargingMinute) = "charging_minute"
  toJSON (IssuingAuthorizationFuelDataUnit'NonNullableEnumImperialGallon) = "imperial_gallon"
  toJSON (IssuingAuthorizationFuelDataUnit'NonNullableEnumKilogram) = "kilogram"
  toJSON (IssuingAuthorizationFuelDataUnit'NonNullableEnumKilowattHour) = "kilowatt_hour"
  toJSON (IssuingAuthorizationFuelDataUnit'NonNullableEnumLiter) = "liter"
  toJSON (IssuingAuthorizationFuelDataUnit'NonNullableEnumOther) = "other"
  toJSON (IssuingAuthorizationFuelDataUnit'NonNullableEnumPound) = "pound"
  toJSON (IssuingAuthorizationFuelDataUnit'NonNullableEnumUsGallon) = "us_gallon"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFuelDataUnit'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "charging_minute" -> IssuingAuthorizationFuelDataUnit'NonNullableEnumChargingMinute
          | val GHC.Classes.== "imperial_gallon" -> IssuingAuthorizationFuelDataUnit'NonNullableEnumImperialGallon
          | val GHC.Classes.== "kilogram" -> IssuingAuthorizationFuelDataUnit'NonNullableEnumKilogram
          | val GHC.Classes.== "kilowatt_hour" -> IssuingAuthorizationFuelDataUnit'NonNullableEnumKilowattHour
          | val GHC.Classes.== "liter" -> IssuingAuthorizationFuelDataUnit'NonNullableEnumLiter
          | val GHC.Classes.== "other" -> IssuingAuthorizationFuelDataUnit'NonNullableEnumOther
          | val GHC.Classes.== "pound" -> IssuingAuthorizationFuelDataUnit'NonNullableEnumPound
          | val GHC.Classes.== "us_gallon" -> IssuingAuthorizationFuelDataUnit'NonNullableEnumUsGallon
          | GHC.Base.otherwise -> IssuingAuthorizationFuelDataUnit'NonNullableOther val
      )
