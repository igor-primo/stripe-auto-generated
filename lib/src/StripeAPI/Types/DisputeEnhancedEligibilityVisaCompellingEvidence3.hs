{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DisputeEnhancedEligibilityVisaCompellingEvidence3
module StripeAPI.Types.DisputeEnhancedEligibilityVisaCompellingEvidence3 where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.dispute_enhanced_eligibility_visa_compelling_evidence3@ in the specification.
data DisputeEnhancedEligibilityVisaCompellingEvidence3 = DisputeEnhancedEligibilityVisaCompellingEvidence3
  { -- | required_actions: List of actions required to qualify dispute for Visa Compelling Evidence 3.0 evidence submission.
    disputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions :: [DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'],
    -- | status: Visa Compelling Evidence 3.0 eligibility status.
    disputeEnhancedEligibilityVisaCompellingEvidence3Status :: DisputeEnhancedEligibilityVisaCompellingEvidence3Status'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DisputeEnhancedEligibilityVisaCompellingEvidence3 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["required_actions" Data.Aeson.Types.ToJSON..= disputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions obj] : ["status" Data.Aeson.Types.ToJSON..= disputeEnhancedEligibilityVisaCompellingEvidence3Status obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["required_actions" Data.Aeson.Types.ToJSON..= disputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions obj] : ["status" Data.Aeson.Types.ToJSON..= disputeEnhancedEligibilityVisaCompellingEvidence3Status obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DisputeEnhancedEligibilityVisaCompellingEvidence3 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DisputeEnhancedEligibilityVisaCompellingEvidence3" (\obj -> (GHC.Base.pure DisputeEnhancedEligibilityVisaCompellingEvidence3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "required_actions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))

-- | Create a new 'DisputeEnhancedEligibilityVisaCompellingEvidence3' with all required fields.
mkDisputeEnhancedEligibilityVisaCompellingEvidence3 ::
  -- | 'disputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'
  [DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'] ->
  -- | 'disputeEnhancedEligibilityVisaCompellingEvidence3Status'
  DisputeEnhancedEligibilityVisaCompellingEvidence3Status' ->
  DisputeEnhancedEligibilityVisaCompellingEvidence3
mkDisputeEnhancedEligibilityVisaCompellingEvidence3 disputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions disputeEnhancedEligibilityVisaCompellingEvidence3Status =
  DisputeEnhancedEligibilityVisaCompellingEvidence3
    { disputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions = disputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions,
      disputeEnhancedEligibilityVisaCompellingEvidence3Status = disputeEnhancedEligibilityVisaCompellingEvidence3Status
    }

-- | Defines the enum schema located at @components.schemas.dispute_enhanced_eligibility_visa_compelling_evidence3.properties.required_actions.items@ in the specification.
data DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"missing_customer_identifiers"@
    DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingCustomerIdentifiers
  | -- | Represents the JSON value @"missing_disputed_transaction_description"@
    DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingDisputedTransactionDescription
  | -- | Represents the JSON value @"missing_merchandise_or_services"@
    DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingMerchandiseOrServices
  | -- | Represents the JSON value @"missing_prior_undisputed_transaction_description"@
    DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingPriorUndisputedTransactionDescription
  | -- | Represents the JSON value @"missing_prior_undisputed_transactions"@
    DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingPriorUndisputedTransactions
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions' where
  toJSON (DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'Other val) = val
  toJSON (DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingCustomerIdentifiers) = "missing_customer_identifiers"
  toJSON (DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingDisputedTransactionDescription) = "missing_disputed_transaction_description"
  toJSON (DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingMerchandiseOrServices) = "missing_merchandise_or_services"
  toJSON (DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingPriorUndisputedTransactionDescription) = "missing_prior_undisputed_transaction_description"
  toJSON (DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingPriorUndisputedTransactions) = "missing_prior_undisputed_transactions"

instance Data.Aeson.Types.FromJSON.FromJSON DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "missing_customer_identifiers" -> DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingCustomerIdentifiers
          | val GHC.Classes.== "missing_disputed_transaction_description" -> DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingDisputedTransactionDescription
          | val GHC.Classes.== "missing_merchandise_or_services" -> DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingMerchandiseOrServices
          | val GHC.Classes.== "missing_prior_undisputed_transaction_description" -> DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingPriorUndisputedTransactionDescription
          | val GHC.Classes.== "missing_prior_undisputed_transactions" -> DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'EnumMissingPriorUndisputedTransactions
          | GHC.Base.otherwise -> DisputeEnhancedEligibilityVisaCompellingEvidence3RequiredActions'Other val
      )

-- | Defines the enum schema located at @components.schemas.dispute_enhanced_eligibility_visa_compelling_evidence3.properties.status@ in the specification.
--
-- Visa Compelling Evidence 3.0 eligibility status.
data DisputeEnhancedEligibilityVisaCompellingEvidence3Status'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    DisputeEnhancedEligibilityVisaCompellingEvidence3Status'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    DisputeEnhancedEligibilityVisaCompellingEvidence3Status'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"not_qualified"@
    DisputeEnhancedEligibilityVisaCompellingEvidence3Status'EnumNotQualified
  | -- | Represents the JSON value @"qualified"@
    DisputeEnhancedEligibilityVisaCompellingEvidence3Status'EnumQualified
  | -- | Represents the JSON value @"requires_action"@
    DisputeEnhancedEligibilityVisaCompellingEvidence3Status'EnumRequiresAction
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DisputeEnhancedEligibilityVisaCompellingEvidence3Status' where
  toJSON (DisputeEnhancedEligibilityVisaCompellingEvidence3Status'Other val) = val
  toJSON (DisputeEnhancedEligibilityVisaCompellingEvidence3Status'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (DisputeEnhancedEligibilityVisaCompellingEvidence3Status'EnumNotQualified) = "not_qualified"
  toJSON (DisputeEnhancedEligibilityVisaCompellingEvidence3Status'EnumQualified) = "qualified"
  toJSON (DisputeEnhancedEligibilityVisaCompellingEvidence3Status'EnumRequiresAction) = "requires_action"

instance Data.Aeson.Types.FromJSON.FromJSON DisputeEnhancedEligibilityVisaCompellingEvidence3Status' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "not_qualified" -> DisputeEnhancedEligibilityVisaCompellingEvidence3Status'EnumNotQualified
          | val GHC.Classes.== "qualified" -> DisputeEnhancedEligibilityVisaCompellingEvidence3Status'EnumQualified
          | val GHC.Classes.== "requires_action" -> DisputeEnhancedEligibilityVisaCompellingEvidence3Status'EnumRequiresAction
          | GHC.Base.otherwise -> DisputeEnhancedEligibilityVisaCompellingEvidence3Status'Other val
      )
