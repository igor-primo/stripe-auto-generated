{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DisputeEnhancedEvidenceVisaCompliance
module StripeAPI.Types.DisputeEnhancedEvidenceVisaCompliance where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.dispute_enhanced_evidence_visa_compliance@ in the specification.
data DisputeEnhancedEvidenceVisaCompliance = DisputeEnhancedEvidenceVisaCompliance
  { -- | fee_acknowledged: A field acknowledging the fee incurred when countering a Visa compliance dispute. If this field is set to true, evidence can be submitted for the compliance dispute. Stripe collects a 500 USD (or local equivalent) amount to cover the network costs associated with resolving compliance disputes. Stripe refunds the 500 USD network fee if you win the dispute.
    disputeEnhancedEvidenceVisaComplianceFeeAcknowledged :: GHC.Types.Bool
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DisputeEnhancedEvidenceVisaCompliance where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["fee_acknowledged" Data.Aeson.Types.ToJSON..= disputeEnhancedEvidenceVisaComplianceFeeAcknowledged obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["fee_acknowledged" Data.Aeson.Types.ToJSON..= disputeEnhancedEvidenceVisaComplianceFeeAcknowledged obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DisputeEnhancedEvidenceVisaCompliance where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DisputeEnhancedEvidenceVisaCompliance" (\obj -> GHC.Base.pure DisputeEnhancedEvidenceVisaCompliance GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fee_acknowledged"))

-- | Create a new 'DisputeEnhancedEvidenceVisaCompliance' with all required fields.
mkDisputeEnhancedEvidenceVisaCompliance ::
  -- | 'disputeEnhancedEvidenceVisaComplianceFeeAcknowledged'
  GHC.Types.Bool ->
  DisputeEnhancedEvidenceVisaCompliance
mkDisputeEnhancedEvidenceVisaCompliance disputeEnhancedEvidenceVisaComplianceFeeAcknowledged = DisputeEnhancedEvidenceVisaCompliance {disputeEnhancedEvidenceVisaComplianceFeeAcknowledged = disputeEnhancedEvidenceVisaComplianceFeeAcknowledged}
