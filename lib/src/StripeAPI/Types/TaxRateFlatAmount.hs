{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TaxRateFlatAmount
module StripeAPI.Types.TaxRateFlatAmount where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.tax_rate_flat_amount@ in the specification.
--
-- The amount of the tax rate when the \`rate_type\`\` is \`flat_amount\`. Tax rates with \`rate_type\` \`percentage\` can vary based on the transaction, resulting in this field being \`null\`. This field exposes the amount and currency of the flat tax rate.
data TaxRateFlatAmount = TaxRateFlatAmount
  { -- | amount: Amount of the tax when the \`rate_type\` is \`flat_amount\`. This positive integer represents how much to charge in the smallest currency unit (e.g., 100 cents to charge \$1.00 or 100 to charge Â¥100, a zero-decimal currency). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of \$999,999.99).
    taxRateFlatAmountAmount :: GHC.Types.Int,
    -- | currency: Three-letter ISO currency code, in lowercase.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    taxRateFlatAmountCurrency :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TaxRateFlatAmount where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= taxRateFlatAmountAmount obj] : ["currency" Data.Aeson.Types.ToJSON..= taxRateFlatAmountCurrency obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= taxRateFlatAmountAmount obj] : ["currency" Data.Aeson.Types.ToJSON..= taxRateFlatAmountCurrency obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TaxRateFlatAmount where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxRateFlatAmount" (\obj -> (GHC.Base.pure TaxRateFlatAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency"))

-- | Create a new 'TaxRateFlatAmount' with all required fields.
mkTaxRateFlatAmount ::
  -- | 'taxRateFlatAmountAmount'
  GHC.Types.Int ->
  -- | 'taxRateFlatAmountCurrency'
  Data.Text.Internal.Text ->
  TaxRateFlatAmount
mkTaxRateFlatAmount taxRateFlatAmountAmount taxRateFlatAmountCurrency =
  TaxRateFlatAmount
    { taxRateFlatAmountAmount = taxRateFlatAmountAmount,
      taxRateFlatAmountCurrency = taxRateFlatAmountCurrency
    }
