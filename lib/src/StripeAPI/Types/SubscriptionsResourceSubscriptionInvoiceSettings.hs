{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SubscriptionsResourceSubscriptionInvoiceSettings
module StripeAPI.Types.SubscriptionsResourceSubscriptionInvoiceSettings where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.ConnectAccountReference
import {-# SOURCE #-} StripeAPI.Types.DeletedTaxId
import {-# SOURCE #-} StripeAPI.Types.TaxId
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.subscriptions_resource_subscription_invoice_settings@ in the specification.
data SubscriptionsResourceSubscriptionInvoiceSettings = SubscriptionsResourceSubscriptionInvoiceSettings
  { -- | account_tax_ids: The account tax IDs associated with the subscription. Will be set on invoices generated by the subscription.
    subscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [SubscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds'NonNullableVariants])),
    -- | issuer:
    subscriptionsResourceSubscriptionInvoiceSettingsIssuer :: ConnectAccountReference
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourceSubscriptionInvoiceSettings where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_tax_ids" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds obj) : ["issuer" Data.Aeson.Types.ToJSON..= subscriptionsResourceSubscriptionInvoiceSettingsIssuer obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_tax_ids" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds obj) : ["issuer" Data.Aeson.Types.ToJSON..= subscriptionsResourceSubscriptionInvoiceSettingsIssuer obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourceSubscriptionInvoiceSettings where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionsResourceSubscriptionInvoiceSettings" (\obj -> (GHC.Base.pure SubscriptionsResourceSubscriptionInvoiceSettings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_tax_ids")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "issuer"))

-- | Create a new 'SubscriptionsResourceSubscriptionInvoiceSettings' with all required fields.
mkSubscriptionsResourceSubscriptionInvoiceSettings ::
  -- | 'subscriptionsResourceSubscriptionInvoiceSettingsIssuer'
  ConnectAccountReference ->
  SubscriptionsResourceSubscriptionInvoiceSettings
mkSubscriptionsResourceSubscriptionInvoiceSettings subscriptionsResourceSubscriptionInvoiceSettingsIssuer =
  SubscriptionsResourceSubscriptionInvoiceSettings
    { subscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds = GHC.Maybe.Nothing,
      subscriptionsResourceSubscriptionInvoiceSettingsIssuer = subscriptionsResourceSubscriptionInvoiceSettingsIssuer
    }

-- | Defines the oneOf schema located at @components.schemas.subscriptions_resource_subscription_invoice_settings.properties.account_tax_ids.items.anyOf@ in the specification.
data SubscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds'NonNullableVariants
  = SubscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds'NonNullableText Data.Text.Internal.Text
  | SubscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds'NonNullableTaxId TaxId
  | SubscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds'NonNullableDeletedTaxId DeletedTaxId
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds'NonNullableVariants where
  toJSON (SubscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds'NonNullableTaxId a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds'NonNullableDeletedTaxId a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds'NonNullableVariants where
  parseJSON val = case (SubscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SubscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds'NonNullableTaxId Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SubscriptionsResourceSubscriptionInvoiceSettingsAccountTaxIds'NonNullableDeletedTaxId Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
