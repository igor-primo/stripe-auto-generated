{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodOptionsPix
module StripeAPI.Types.PaymentMethodOptionsPix where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_options_pix@ in the specification.
data PaymentMethodOptionsPix = PaymentMethodOptionsPix
  { -- | amount_includes_iof: Determines if the amount includes the IOF tax.
    paymentMethodOptionsPixAmountIncludesIof :: (GHC.Maybe.Maybe PaymentMethodOptionsPixAmountIncludesIof'),
    -- | expires_after_seconds: The number of seconds (between 10 and 1209600) after which Pix payment will expire.
    paymentMethodOptionsPixExpiresAfterSeconds :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | expires_at: The timestamp at which the Pix expires.
    paymentMethodOptionsPixExpiresAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentMethodOptionsPixSetupFutureUsage :: (GHC.Maybe.Maybe PaymentMethodOptionsPixSetupFutureUsage')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodOptionsPix where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_includes_iof" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsPixAmountIncludesIof obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_seconds" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsPixExpiresAfterSeconds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsPixExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsPixSetupFutureUsage obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_includes_iof" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsPixAmountIncludesIof obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_seconds" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsPixExpiresAfterSeconds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsPixExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsPixSetupFutureUsage obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodOptionsPix where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodOptionsPix" (\obj -> (((GHC.Base.pure PaymentMethodOptionsPix GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_includes_iof")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_after_seconds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage"))

-- | Create a new 'PaymentMethodOptionsPix' with all required fields.
mkPaymentMethodOptionsPix :: PaymentMethodOptionsPix
mkPaymentMethodOptionsPix =
  PaymentMethodOptionsPix
    { paymentMethodOptionsPixAmountIncludesIof = GHC.Maybe.Nothing,
      paymentMethodOptionsPixExpiresAfterSeconds = GHC.Maybe.Nothing,
      paymentMethodOptionsPixExpiresAt = GHC.Maybe.Nothing,
      paymentMethodOptionsPixSetupFutureUsage = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_method_options_pix.properties.amount_includes_iof@ in the specification.
--
-- Determines if the amount includes the IOF tax.
data PaymentMethodOptionsPixAmountIncludesIof'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodOptionsPixAmountIncludesIof'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodOptionsPixAmountIncludesIof'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"always"@
    PaymentMethodOptionsPixAmountIncludesIof'EnumAlways
  | -- | Represents the JSON value @"never"@
    PaymentMethodOptionsPixAmountIncludesIof'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodOptionsPixAmountIncludesIof' where
  toJSON (PaymentMethodOptionsPixAmountIncludesIof'Other val) = val
  toJSON (PaymentMethodOptionsPixAmountIncludesIof'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodOptionsPixAmountIncludesIof'EnumAlways) = "always"
  toJSON (PaymentMethodOptionsPixAmountIncludesIof'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodOptionsPixAmountIncludesIof' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "always" -> PaymentMethodOptionsPixAmountIncludesIof'EnumAlways
          | val GHC.Classes.== "never" -> PaymentMethodOptionsPixAmountIncludesIof'EnumNever
          | GHC.Base.otherwise -> PaymentMethodOptionsPixAmountIncludesIof'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_method_options_pix.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentMethodOptionsPixSetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodOptionsPixSetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodOptionsPixSetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentMethodOptionsPixSetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodOptionsPixSetupFutureUsage' where
  toJSON (PaymentMethodOptionsPixSetupFutureUsage'Other val) = val
  toJSON (PaymentMethodOptionsPixSetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodOptionsPixSetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodOptionsPixSetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentMethodOptionsPixSetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentMethodOptionsPixSetupFutureUsage'Other val
      )
