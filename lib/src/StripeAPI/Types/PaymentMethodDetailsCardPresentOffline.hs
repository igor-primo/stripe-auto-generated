{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodDetailsCardPresentOffline
module StripeAPI.Types.PaymentMethodDetailsCardPresentOffline where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_details_card_present_offline@ in the specification.
data PaymentMethodDetailsCardPresentOffline = PaymentMethodDetailsCardPresentOffline
  { -- | stored_at: Time at which the payment was collected while offline
    paymentMethodDetailsCardPresentOfflineStoredAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | type: The method used to process this payment method offline. Only deferred is allowed.
    paymentMethodDetailsCardPresentOfflineType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentMethodDetailsCardPresentOfflineType'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsCardPresentOffline where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stored_at" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentOfflineStoredAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentOfflineType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stored_at" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentOfflineStoredAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentOfflineType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardPresentOffline where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardPresentOffline" (\obj -> (GHC.Base.pure PaymentMethodDetailsCardPresentOffline GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "stored_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'PaymentMethodDetailsCardPresentOffline' with all required fields.
mkPaymentMethodDetailsCardPresentOffline :: PaymentMethodDetailsCardPresentOffline
mkPaymentMethodDetailsCardPresentOffline =
  PaymentMethodDetailsCardPresentOffline
    { paymentMethodDetailsCardPresentOfflineStoredAt = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentOfflineType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_method_details_card_present_offline.properties.type@ in the specification.
--
-- The method used to process this payment method offline. Only deferred is allowed.
data PaymentMethodDetailsCardPresentOfflineType'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodDetailsCardPresentOfflineType'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodDetailsCardPresentOfflineType'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"deferred"@
    PaymentMethodDetailsCardPresentOfflineType'NonNullableEnumDeferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsCardPresentOfflineType'NonNullable where
  toJSON (PaymentMethodDetailsCardPresentOfflineType'NonNullableOther val) = val
  toJSON (PaymentMethodDetailsCardPresentOfflineType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodDetailsCardPresentOfflineType'NonNullableEnumDeferred) = "deferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardPresentOfflineType'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "deferred" -> PaymentMethodDetailsCardPresentOfflineType'NonNullableEnumDeferred
          | GHC.Base.otherwise -> PaymentMethodDetailsCardPresentOfflineType'NonNullableOther val
      )
