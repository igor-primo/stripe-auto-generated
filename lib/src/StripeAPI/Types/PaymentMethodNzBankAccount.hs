{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodNzBankAccount
module StripeAPI.Types.PaymentMethodNzBankAccount where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_nz_bank_account@ in the specification.
data PaymentMethodNzBankAccount = PaymentMethodNzBankAccount
  { -- | account_holder_name: The name on the bank account. Only present if the account holder name is different from the name of the authorized signatory collected in the PaymentMethodâ€™s billing details.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodNzBankAccountAccountHolderName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | bank_code: The numeric code for the bank account\'s bank.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodNzBankAccountBankCode :: Data.Text.Internal.Text,
    -- | bank_name: The name of the bank.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodNzBankAccountBankName :: Data.Text.Internal.Text,
    -- | branch_code: The numeric code for the bank account\'s bank branch.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodNzBankAccountBranchCode :: Data.Text.Internal.Text,
    -- | last4: Last four digits of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodNzBankAccountLast4 :: Data.Text.Internal.Text,
    -- | suffix: The suffix of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodNzBankAccountSuffix :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodNzBankAccount where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (paymentMethodNzBankAccountAccountHolderName obj) : ["bank_code" Data.Aeson.Types.ToJSON..= paymentMethodNzBankAccountBankCode obj] : ["bank_name" Data.Aeson.Types.ToJSON..= paymentMethodNzBankAccountBankName obj] : ["branch_code" Data.Aeson.Types.ToJSON..= paymentMethodNzBankAccountBranchCode obj] : ["last4" Data.Aeson.Types.ToJSON..= paymentMethodNzBankAccountLast4 obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("suffix" Data.Aeson.Types.ToJSON..=)) (paymentMethodNzBankAccountSuffix obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (paymentMethodNzBankAccountAccountHolderName obj) : ["bank_code" Data.Aeson.Types.ToJSON..= paymentMethodNzBankAccountBankCode obj] : ["bank_name" Data.Aeson.Types.ToJSON..= paymentMethodNzBankAccountBankName obj] : ["branch_code" Data.Aeson.Types.ToJSON..= paymentMethodNzBankAccountBranchCode obj] : ["last4" Data.Aeson.Types.ToJSON..= paymentMethodNzBankAccountLast4 obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("suffix" Data.Aeson.Types.ToJSON..=)) (paymentMethodNzBankAccountSuffix obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodNzBankAccount where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodNzBankAccount" (\obj -> (((((GHC.Base.pure PaymentMethodNzBankAccount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bank_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "branch_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "suffix"))

-- | Create a new 'PaymentMethodNzBankAccount' with all required fields.
mkPaymentMethodNzBankAccount ::
  -- | 'paymentMethodNzBankAccountBankCode'
  Data.Text.Internal.Text ->
  -- | 'paymentMethodNzBankAccountBankName'
  Data.Text.Internal.Text ->
  -- | 'paymentMethodNzBankAccountBranchCode'
  Data.Text.Internal.Text ->
  -- | 'paymentMethodNzBankAccountLast4'
  Data.Text.Internal.Text ->
  PaymentMethodNzBankAccount
mkPaymentMethodNzBankAccount paymentMethodNzBankAccountBankCode paymentMethodNzBankAccountBankName paymentMethodNzBankAccountBranchCode paymentMethodNzBankAccountLast4 =
  PaymentMethodNzBankAccount
    { paymentMethodNzBankAccountAccountHolderName = GHC.Maybe.Nothing,
      paymentMethodNzBankAccountBankCode = paymentMethodNzBankAccountBankCode,
      paymentMethodNzBankAccountBankName = paymentMethodNzBankAccountBankName,
      paymentMethodNzBankAccountBranchCode = paymentMethodNzBankAccountBranchCode,
      paymentMethodNzBankAccountLast4 = paymentMethodNzBankAccountLast4,
      paymentMethodNzBankAccountSuffix = GHC.Maybe.Nothing
    }
