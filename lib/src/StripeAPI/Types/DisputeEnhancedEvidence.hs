{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DisputeEnhancedEvidence
module StripeAPI.Types.DisputeEnhancedEvidence where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.DisputeEnhancedEvidenceVisaCompellingEvidence3
import {-# SOURCE #-} StripeAPI.Types.DisputeEnhancedEvidenceVisaCompliance
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.dispute_enhanced_evidence@ in the specification.
data DisputeEnhancedEvidence = DisputeEnhancedEvidence
  { -- | visa_compelling_evidence_3:
    disputeEnhancedEvidenceVisaCompellingEvidence_3 :: (GHC.Maybe.Maybe DisputeEnhancedEvidenceVisaCompellingEvidence3),
    -- | visa_compliance:
    disputeEnhancedEvidenceVisaCompliance :: (GHC.Maybe.Maybe DisputeEnhancedEvidenceVisaCompliance)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DisputeEnhancedEvidence where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("visa_compelling_evidence_3" Data.Aeson.Types.ToJSON..=)) (disputeEnhancedEvidenceVisaCompellingEvidence_3 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("visa_compliance" Data.Aeson.Types.ToJSON..=)) (disputeEnhancedEvidenceVisaCompliance obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("visa_compelling_evidence_3" Data.Aeson.Types.ToJSON..=)) (disputeEnhancedEvidenceVisaCompellingEvidence_3 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("visa_compliance" Data.Aeson.Types.ToJSON..=)) (disputeEnhancedEvidenceVisaCompliance obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DisputeEnhancedEvidence where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DisputeEnhancedEvidence" (\obj -> (GHC.Base.pure DisputeEnhancedEvidence GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "visa_compelling_evidence_3")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "visa_compliance"))

-- | Create a new 'DisputeEnhancedEvidence' with all required fields.
mkDisputeEnhancedEvidence :: DisputeEnhancedEvidence
mkDisputeEnhancedEvidence =
  DisputeEnhancedEvidence
    { disputeEnhancedEvidenceVisaCompellingEvidence_3 = GHC.Maybe.Nothing,
      disputeEnhancedEvidenceVisaCompliance = GHC.Maybe.Nothing
    }
