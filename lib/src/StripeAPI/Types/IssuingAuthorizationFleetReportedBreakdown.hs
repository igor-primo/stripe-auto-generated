{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingAuthorizationFleetReportedBreakdown
module StripeAPI.Types.IssuingAuthorizationFleetReportedBreakdown where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationFleetFuelPriceData
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationFleetNonFuelPriceData
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationFleetTaxData
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_authorization_fleet_reported_breakdown@ in the specification.
data IssuingAuthorizationFleetReportedBreakdown = IssuingAuthorizationFleetReportedBreakdown
  { -- | fuel: Breakdown of fuel portion of the purchase.
    issuingAuthorizationFleetReportedBreakdownFuel :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationFleetReportedBreakdownFuel'NonNullable)),
    -- | non_fuel: Breakdown of non-fuel portion of the purchase.
    issuingAuthorizationFleetReportedBreakdownNonFuel :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationFleetReportedBreakdownNonFuel'NonNullable)),
    -- | tax: Information about tax included in this transaction.
    issuingAuthorizationFleetReportedBreakdownTax :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationFleetReportedBreakdownTax'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFleetReportedBreakdown where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fuel" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownFuel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("non_fuel" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownNonFuel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownTax obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fuel" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownFuel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("non_fuel" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownNonFuel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownTax obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFleetReportedBreakdown where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationFleetReportedBreakdown" (\obj -> ((GHC.Base.pure IssuingAuthorizationFleetReportedBreakdown GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fuel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "non_fuel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax"))

-- | Create a new 'IssuingAuthorizationFleetReportedBreakdown' with all required fields.
mkIssuingAuthorizationFleetReportedBreakdown :: IssuingAuthorizationFleetReportedBreakdown
mkIssuingAuthorizationFleetReportedBreakdown =
  IssuingAuthorizationFleetReportedBreakdown
    { issuingAuthorizationFleetReportedBreakdownFuel = GHC.Maybe.Nothing,
      issuingAuthorizationFleetReportedBreakdownNonFuel = GHC.Maybe.Nothing,
      issuingAuthorizationFleetReportedBreakdownTax = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.issuing_authorization_fleet_reported_breakdown.properties.fuel.anyOf@ in the specification.
--
-- Breakdown of fuel portion of the purchase.
data IssuingAuthorizationFleetReportedBreakdownFuel'NonNullable = IssuingAuthorizationFleetReportedBreakdownFuel'NonNullable
  { -- | gross_amount_decimal: Gross fuel amount that should equal Fuel Quantity multiplied by Fuel Unit Cost, inclusive of taxes.
    issuingAuthorizationFleetReportedBreakdownFuel'NonNullableGrossAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFleetReportedBreakdownFuel'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gross_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownFuel'NonNullableGrossAmountDecimal obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gross_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownFuel'NonNullableGrossAmountDecimal obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFleetReportedBreakdownFuel'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationFleetReportedBreakdownFuel'NonNullable" (\obj -> GHC.Base.pure IssuingAuthorizationFleetReportedBreakdownFuel'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gross_amount_decimal"))

-- | Create a new 'IssuingAuthorizationFleetReportedBreakdownFuel'NonNullable' with all required fields.
mkIssuingAuthorizationFleetReportedBreakdownFuel'NonNullable :: IssuingAuthorizationFleetReportedBreakdownFuel'NonNullable
mkIssuingAuthorizationFleetReportedBreakdownFuel'NonNullable = IssuingAuthorizationFleetReportedBreakdownFuel'NonNullable {issuingAuthorizationFleetReportedBreakdownFuel'NonNullableGrossAmountDecimal = GHC.Maybe.Nothing}

-- | Defines the object schema located at @components.schemas.issuing_authorization_fleet_reported_breakdown.properties.non_fuel.anyOf@ in the specification.
--
-- Breakdown of non-fuel portion of the purchase.
data IssuingAuthorizationFleetReportedBreakdownNonFuel'NonNullable = IssuingAuthorizationFleetReportedBreakdownNonFuel'NonNullable
  { -- | gross_amount_decimal: Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes.
    issuingAuthorizationFleetReportedBreakdownNonFuel'NonNullableGrossAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFleetReportedBreakdownNonFuel'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gross_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownNonFuel'NonNullableGrossAmountDecimal obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gross_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownNonFuel'NonNullableGrossAmountDecimal obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFleetReportedBreakdownNonFuel'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationFleetReportedBreakdownNonFuel'NonNullable" (\obj -> GHC.Base.pure IssuingAuthorizationFleetReportedBreakdownNonFuel'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gross_amount_decimal"))

-- | Create a new 'IssuingAuthorizationFleetReportedBreakdownNonFuel'NonNullable' with all required fields.
mkIssuingAuthorizationFleetReportedBreakdownNonFuel'NonNullable :: IssuingAuthorizationFleetReportedBreakdownNonFuel'NonNullable
mkIssuingAuthorizationFleetReportedBreakdownNonFuel'NonNullable = IssuingAuthorizationFleetReportedBreakdownNonFuel'NonNullable {issuingAuthorizationFleetReportedBreakdownNonFuel'NonNullableGrossAmountDecimal = GHC.Maybe.Nothing}

-- | Defines the object schema located at @components.schemas.issuing_authorization_fleet_reported_breakdown.properties.tax.anyOf@ in the specification.
--
-- Information about tax included in this transaction.
data IssuingAuthorizationFleetReportedBreakdownTax'NonNullable = IssuingAuthorizationFleetReportedBreakdownTax'NonNullable
  { -- | local_amount_decimal: Amount of state or provincial Sales Tax included in the transaction amount. \`null\` if not reported by merchant or not subject to tax.
    issuingAuthorizationFleetReportedBreakdownTax'NonNullableLocalAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | national_amount_decimal: Amount of national Sales Tax or VAT included in the transaction amount. \`null\` if not reported by merchant or not subject to tax.
    issuingAuthorizationFleetReportedBreakdownTax'NonNullableNationalAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFleetReportedBreakdownTax'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownTax'NonNullableLocalAmountDecimal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("national_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownTax'NonNullableNationalAmountDecimal obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownTax'NonNullableLocalAmountDecimal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("national_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetReportedBreakdownTax'NonNullableNationalAmountDecimal obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFleetReportedBreakdownTax'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationFleetReportedBreakdownTax'NonNullable" (\obj -> (GHC.Base.pure IssuingAuthorizationFleetReportedBreakdownTax'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "local_amount_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "national_amount_decimal"))

-- | Create a new 'IssuingAuthorizationFleetReportedBreakdownTax'NonNullable' with all required fields.
mkIssuingAuthorizationFleetReportedBreakdownTax'NonNullable :: IssuingAuthorizationFleetReportedBreakdownTax'NonNullable
mkIssuingAuthorizationFleetReportedBreakdownTax'NonNullable =
  IssuingAuthorizationFleetReportedBreakdownTax'NonNullable
    { issuingAuthorizationFleetReportedBreakdownTax'NonNullableLocalAmountDecimal = GHC.Maybe.Nothing,
      issuingAuthorizationFleetReportedBreakdownTax'NonNullableNationalAmountDecimal = GHC.Maybe.Nothing
    }
