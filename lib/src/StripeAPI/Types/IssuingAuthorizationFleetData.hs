{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingAuthorizationFleetData
module StripeAPI.Types.IssuingAuthorizationFleetData where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationFleetCardholderPromptData
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationFleetFuelPriceData
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationFleetNonFuelPriceData
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationFleetReportedBreakdown
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationFleetTaxData
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_authorization_fleet_data@ in the specification.
data IssuingAuthorizationFleetData = IssuingAuthorizationFleetData
  { -- | cardholder_prompt_data: Answers to prompts presented to the cardholder at the point of sale. Prompted fields vary depending on the configuration of your physical fleet cards. Typical points of sale support only numeric entry.
    issuingAuthorizationFleetDataCardholderPromptData :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationFleetDataCardholderPromptData'NonNullable)),
    -- | purchase_type: The type of purchase.
    issuingAuthorizationFleetDataPurchaseType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationFleetDataPurchaseType'NonNullable)),
    -- | reported_breakdown: More information about the total amount. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed. This information is not guaranteed to be accurate as some merchants may provide unreliable data.
    issuingAuthorizationFleetDataReportedBreakdown :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationFleetDataReportedBreakdown'NonNullable)),
    -- | service_type: The type of fuel service.
    issuingAuthorizationFleetDataServiceType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationFleetDataServiceType'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFleetData where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cardholder_prompt_data" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("purchase_type" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataPurchaseType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reported_breakdown" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("service_type" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataServiceType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cardholder_prompt_data" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("purchase_type" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataPurchaseType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reported_breakdown" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("service_type" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataServiceType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFleetData where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationFleetData" (\obj -> (((GHC.Base.pure IssuingAuthorizationFleetData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cardholder_prompt_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "purchase_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reported_breakdown")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "service_type"))

-- | Create a new 'IssuingAuthorizationFleetData' with all required fields.
mkIssuingAuthorizationFleetData :: IssuingAuthorizationFleetData
mkIssuingAuthorizationFleetData =
  IssuingAuthorizationFleetData
    { issuingAuthorizationFleetDataCardholderPromptData = GHC.Maybe.Nothing,
      issuingAuthorizationFleetDataPurchaseType = GHC.Maybe.Nothing,
      issuingAuthorizationFleetDataReportedBreakdown = GHC.Maybe.Nothing,
      issuingAuthorizationFleetDataServiceType = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.issuing_authorization_fleet_data.properties.cardholder_prompt_data.anyOf@ in the specification.
--
-- Answers to prompts presented to the cardholder at the point of sale. Prompted fields vary depending on the configuration of your physical fleet cards. Typical points of sale support only numeric entry.
data IssuingAuthorizationFleetDataCardholderPromptData'NonNullable = IssuingAuthorizationFleetDataCardholderPromptData'NonNullable
  { -- | alphanumeric_id: [Deprecated] An alphanumeric ID, though typical point of sales only support numeric entry. The card program can be configured to prompt for a vehicle ID, driver ID, or generic ID.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingAuthorizationFleetDataCardholderPromptData'NonNullableAlphanumericId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | driver_id: Driver ID.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingAuthorizationFleetDataCardholderPromptData'NonNullableDriverId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | odometer: Odometer reading.
    issuingAuthorizationFleetDataCardholderPromptData'NonNullableOdometer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | unspecified_id: An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingAuthorizationFleetDataCardholderPromptData'NonNullableUnspecifiedId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | user_id: User ID.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingAuthorizationFleetDataCardholderPromptData'NonNullableUserId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | vehicle_number: Vehicle number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingAuthorizationFleetDataCardholderPromptData'NonNullableVehicleNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFleetDataCardholderPromptData'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alphanumeric_id" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData'NonNullableAlphanumericId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("driver_id" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData'NonNullableDriverId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("odometer" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData'NonNullableOdometer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unspecified_id" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData'NonNullableUnspecifiedId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_id" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData'NonNullableUserId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vehicle_number" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData'NonNullableVehicleNumber obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alphanumeric_id" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData'NonNullableAlphanumericId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("driver_id" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData'NonNullableDriverId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("odometer" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData'NonNullableOdometer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unspecified_id" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData'NonNullableUnspecifiedId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_id" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData'NonNullableUserId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vehicle_number" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataCardholderPromptData'NonNullableVehicleNumber obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFleetDataCardholderPromptData'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationFleetDataCardholderPromptData'NonNullable" (\obj -> (((((GHC.Base.pure IssuingAuthorizationFleetDataCardholderPromptData'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alphanumeric_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "driver_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "odometer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "unspecified_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "vehicle_number"))

-- | Create a new 'IssuingAuthorizationFleetDataCardholderPromptData'NonNullable' with all required fields.
mkIssuingAuthorizationFleetDataCardholderPromptData'NonNullable :: IssuingAuthorizationFleetDataCardholderPromptData'NonNullable
mkIssuingAuthorizationFleetDataCardholderPromptData'NonNullable =
  IssuingAuthorizationFleetDataCardholderPromptData'NonNullable
    { issuingAuthorizationFleetDataCardholderPromptData'NonNullableAlphanumericId = GHC.Maybe.Nothing,
      issuingAuthorizationFleetDataCardholderPromptData'NonNullableDriverId = GHC.Maybe.Nothing,
      issuingAuthorizationFleetDataCardholderPromptData'NonNullableOdometer = GHC.Maybe.Nothing,
      issuingAuthorizationFleetDataCardholderPromptData'NonNullableUnspecifiedId = GHC.Maybe.Nothing,
      issuingAuthorizationFleetDataCardholderPromptData'NonNullableUserId = GHC.Maybe.Nothing,
      issuingAuthorizationFleetDataCardholderPromptData'NonNullableVehicleNumber = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.issuing_authorization_fleet_data.properties.purchase_type@ in the specification.
--
-- The type of purchase.
data IssuingAuthorizationFleetDataPurchaseType'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingAuthorizationFleetDataPurchaseType'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingAuthorizationFleetDataPurchaseType'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"fuel_and_non_fuel_purchase"@
    IssuingAuthorizationFleetDataPurchaseType'NonNullableEnumFuelAndNonFuelPurchase
  | -- | Represents the JSON value @"fuel_purchase"@
    IssuingAuthorizationFleetDataPurchaseType'NonNullableEnumFuelPurchase
  | -- | Represents the JSON value @"non_fuel_purchase"@
    IssuingAuthorizationFleetDataPurchaseType'NonNullableEnumNonFuelPurchase
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFleetDataPurchaseType'NonNullable where
  toJSON (IssuingAuthorizationFleetDataPurchaseType'NonNullableOther val) = val
  toJSON (IssuingAuthorizationFleetDataPurchaseType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingAuthorizationFleetDataPurchaseType'NonNullableEnumFuelAndNonFuelPurchase) = "fuel_and_non_fuel_purchase"
  toJSON (IssuingAuthorizationFleetDataPurchaseType'NonNullableEnumFuelPurchase) = "fuel_purchase"
  toJSON (IssuingAuthorizationFleetDataPurchaseType'NonNullableEnumNonFuelPurchase) = "non_fuel_purchase"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFleetDataPurchaseType'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "fuel_and_non_fuel_purchase" -> IssuingAuthorizationFleetDataPurchaseType'NonNullableEnumFuelAndNonFuelPurchase
          | val GHC.Classes.== "fuel_purchase" -> IssuingAuthorizationFleetDataPurchaseType'NonNullableEnumFuelPurchase
          | val GHC.Classes.== "non_fuel_purchase" -> IssuingAuthorizationFleetDataPurchaseType'NonNullableEnumNonFuelPurchase
          | GHC.Base.otherwise -> IssuingAuthorizationFleetDataPurchaseType'NonNullableOther val
      )

-- | Defines the object schema located at @components.schemas.issuing_authorization_fleet_data.properties.reported_breakdown.anyOf@ in the specification.
--
-- More information about the total amount. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed. This information is not guaranteed to be accurate as some merchants may provide unreliable data.
data IssuingAuthorizationFleetDataReportedBreakdown'NonNullable = IssuingAuthorizationFleetDataReportedBreakdown'NonNullable
  { -- | fuel: Breakdown of fuel portion of the purchase.
    issuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullable)),
    -- | non_fuel: Breakdown of non-fuel portion of the purchase.
    issuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullable)),
    -- | tax: Information about tax included in this transaction.
    issuingAuthorizationFleetDataReportedBreakdown'NonNullableTax :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFleetDataReportedBreakdown'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fuel" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("non_fuel" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableTax obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fuel" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("non_fuel" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableTax obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFleetDataReportedBreakdown'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationFleetDataReportedBreakdown'NonNullable" (\obj -> ((GHC.Base.pure IssuingAuthorizationFleetDataReportedBreakdown'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fuel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "non_fuel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax"))

-- | Create a new 'IssuingAuthorizationFleetDataReportedBreakdown'NonNullable' with all required fields.
mkIssuingAuthorizationFleetDataReportedBreakdown'NonNullable :: IssuingAuthorizationFleetDataReportedBreakdown'NonNullable
mkIssuingAuthorizationFleetDataReportedBreakdown'NonNullable =
  IssuingAuthorizationFleetDataReportedBreakdown'NonNullable
    { issuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel = GHC.Maybe.Nothing,
      issuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel = GHC.Maybe.Nothing,
      issuingAuthorizationFleetDataReportedBreakdown'NonNullableTax = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.issuing_authorization_fleet_data.properties.reported_breakdown.anyOf.properties.fuel.anyOf@ in the specification.
--
-- Breakdown of fuel portion of the purchase.
data IssuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullable = IssuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullable
  { -- | gross_amount_decimal: Gross fuel amount that should equal Fuel Quantity multiplied by Fuel Unit Cost, inclusive of taxes.
    issuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullableGrossAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gross_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullableGrossAmountDecimal obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gross_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullableGrossAmountDecimal obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullable" (\obj -> GHC.Base.pure IssuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gross_amount_decimal"))

-- | Create a new 'IssuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullable' with all required fields.
mkIssuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullable :: IssuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullable
mkIssuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullable = IssuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullable {issuingAuthorizationFleetDataReportedBreakdown'NonNullableFuel'NonNullableGrossAmountDecimal = GHC.Maybe.Nothing}

-- | Defines the object schema located at @components.schemas.issuing_authorization_fleet_data.properties.reported_breakdown.anyOf.properties.non_fuel.anyOf@ in the specification.
--
-- Breakdown of non-fuel portion of the purchase.
data IssuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullable = IssuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullable
  { -- | gross_amount_decimal: Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes.
    issuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullableGrossAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gross_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullableGrossAmountDecimal obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gross_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullableGrossAmountDecimal obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullable" (\obj -> GHC.Base.pure IssuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gross_amount_decimal"))

-- | Create a new 'IssuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullable' with all required fields.
mkIssuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullable :: IssuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullable
mkIssuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullable = IssuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullable {issuingAuthorizationFleetDataReportedBreakdown'NonNullableNonFuel'NonNullableGrossAmountDecimal = GHC.Maybe.Nothing}

-- | Defines the object schema located at @components.schemas.issuing_authorization_fleet_data.properties.reported_breakdown.anyOf.properties.tax.anyOf@ in the specification.
--
-- Information about tax included in this transaction.
data IssuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullable = IssuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullable
  { -- | local_amount_decimal: Amount of state or provincial Sales Tax included in the transaction amount. \`null\` if not reported by merchant or not subject to tax.
    issuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullableLocalAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | national_amount_decimal: Amount of national Sales Tax or VAT included in the transaction amount. \`null\` if not reported by merchant or not subject to tax.
    issuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullableNationalAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullableLocalAmountDecimal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("national_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullableNationalAmountDecimal obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullableLocalAmountDecimal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("national_amount_decimal" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullableNationalAmountDecimal obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullable" (\obj -> (GHC.Base.pure IssuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "local_amount_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "national_amount_decimal"))

-- | Create a new 'IssuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullable' with all required fields.
mkIssuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullable :: IssuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullable
mkIssuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullable =
  IssuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullable
    { issuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullableLocalAmountDecimal = GHC.Maybe.Nothing,
      issuingAuthorizationFleetDataReportedBreakdown'NonNullableTax'NonNullableNationalAmountDecimal = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.issuing_authorization_fleet_data.properties.service_type@ in the specification.
--
-- The type of fuel service.
data IssuingAuthorizationFleetDataServiceType'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingAuthorizationFleetDataServiceType'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingAuthorizationFleetDataServiceType'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"full_service"@
    IssuingAuthorizationFleetDataServiceType'NonNullableEnumFullService
  | -- | Represents the JSON value @"non_fuel_transaction"@
    IssuingAuthorizationFleetDataServiceType'NonNullableEnumNonFuelTransaction
  | -- | Represents the JSON value @"self_service"@
    IssuingAuthorizationFleetDataServiceType'NonNullableEnumSelfService
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationFleetDataServiceType'NonNullable where
  toJSON (IssuingAuthorizationFleetDataServiceType'NonNullableOther val) = val
  toJSON (IssuingAuthorizationFleetDataServiceType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingAuthorizationFleetDataServiceType'NonNullableEnumFullService) = "full_service"
  toJSON (IssuingAuthorizationFleetDataServiceType'NonNullableEnumNonFuelTransaction) = "non_fuel_transaction"
  toJSON (IssuingAuthorizationFleetDataServiceType'NonNullableEnumSelfService) = "self_service"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationFleetDataServiceType'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "full_service" -> IssuingAuthorizationFleetDataServiceType'NonNullableEnumFullService
          | val GHC.Classes.== "non_fuel_transaction" -> IssuingAuthorizationFleetDataServiceType'NonNullableEnumNonFuelTransaction
          | val GHC.Classes.== "self_service" -> IssuingAuthorizationFleetDataServiceType'NonNullableEnumSelfService
          | GHC.Base.otherwise -> IssuingAuthorizationFleetDataServiceType'NonNullableOther val
      )
