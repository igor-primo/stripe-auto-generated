{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Issuing_PersonalizationDesign
module StripeAPI.Types.Issuing_PersonalizationDesign where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.File
import {-# SOURCE #-} StripeAPI.Types.IssuingPersonalizationDesignCarrierText
import {-# SOURCE #-} StripeAPI.Types.IssuingPersonalizationDesignPreferences
import {-# SOURCE #-} StripeAPI.Types.IssuingPersonalizationDesignRejectionReasons
import {-# SOURCE #-} StripeAPI.Types.Issuing_PhysicalBundle
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing.personalization_design@ in the specification.
--
-- A Personalization Design is a logical grouping of a Physical Bundle, card logo, and carrier text that represents a product line.
data Issuing'personalizationDesign = Issuing'personalizationDesign
  { -- | card_logo: The file for the card logo to use with physical bundles that support card logos. Must have a \`purpose\` value of \`issuing_logo\`.
    issuing'personalizationDesignCardLogo :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Issuing'personalizationDesignCardLogo'NonNullableVariants)),
    -- | carrier_text: Hash containing carrier text, for use with physical bundles that support carrier text.
    issuing'personalizationDesignCarrierText :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Issuing'personalizationDesignCarrierText'NonNullable)),
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    issuing'personalizationDesignCreated :: GHC.Types.Int,
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuing'personalizationDesignId :: Data.Text.Internal.Text,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    issuing'personalizationDesignLivemode :: GHC.Types.Bool,
    -- | lookup_key: A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuing'personalizationDesignLookupKey :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    issuing'personalizationDesignMetadata :: Data.Aeson.Types.Internal.Object,
    -- | name: Friendly display name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuing'personalizationDesignName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | physical_bundle: The physical bundle object belonging to this personalization design.
    issuing'personalizationDesignPhysicalBundle :: Issuing'personalizationDesignPhysicalBundle'Variants,
    -- | preferences:
    issuing'personalizationDesignPreferences :: IssuingPersonalizationDesignPreferences,
    -- | rejection_reasons:
    issuing'personalizationDesignRejectionReasons :: IssuingPersonalizationDesignRejectionReasons,
    -- | status: Whether this personalization design can be used to create cards.
    issuing'personalizationDesignStatus :: Issuing'personalizationDesignStatus'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'personalizationDesign where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_logo" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignCardLogo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("carrier_text" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignCarrierText obj) : ["created" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignCreated obj] : ["id" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignId obj] : ["livemode" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lookup_key" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignLookupKey obj) : ["metadata" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignMetadata obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignName obj) : ["physical_bundle" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignPhysicalBundle obj] : ["preferences" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignPreferences obj] : ["rejection_reasons" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignRejectionReasons obj] : ["status" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignStatus obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "issuing.personalization_design"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_logo" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignCardLogo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("carrier_text" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignCarrierText obj) : ["created" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignCreated obj] : ["id" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignId obj] : ["livemode" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lookup_key" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignLookupKey obj) : ["metadata" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignMetadata obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignName obj) : ["physical_bundle" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignPhysicalBundle obj] : ["preferences" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignPreferences obj] : ["rejection_reasons" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignRejectionReasons obj] : ["status" Data.Aeson.Types.ToJSON..= issuing'personalizationDesignStatus obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "issuing.personalization_design"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'personalizationDesign where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'personalizationDesign" (\obj -> (((((((((((GHC.Base.pure Issuing'personalizationDesign GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_logo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "carrier_text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lookup_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "physical_bundle")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "preferences")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "rejection_reasons")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))

-- | Create a new 'Issuing'personalizationDesign' with all required fields.
mkIssuing'personalizationDesign ::
  -- | 'issuing'personalizationDesignCreated'
  GHC.Types.Int ->
  -- | 'issuing'personalizationDesignId'
  Data.Text.Internal.Text ->
  -- | 'issuing'personalizationDesignLivemode'
  GHC.Types.Bool ->
  -- | 'issuing'personalizationDesignMetadata'
  Data.Aeson.Types.Internal.Object ->
  -- | 'issuing'personalizationDesignPhysicalBundle'
  Issuing'personalizationDesignPhysicalBundle'Variants ->
  -- | 'issuing'personalizationDesignPreferences'
  IssuingPersonalizationDesignPreferences ->
  -- | 'issuing'personalizationDesignRejectionReasons'
  IssuingPersonalizationDesignRejectionReasons ->
  -- | 'issuing'personalizationDesignStatus'
  Issuing'personalizationDesignStatus' ->
  Issuing'personalizationDesign
mkIssuing'personalizationDesign issuing'personalizationDesignCreated issuing'personalizationDesignId issuing'personalizationDesignLivemode issuing'personalizationDesignMetadata issuing'personalizationDesignPhysicalBundle issuing'personalizationDesignPreferences issuing'personalizationDesignRejectionReasons issuing'personalizationDesignStatus =
  Issuing'personalizationDesign
    { issuing'personalizationDesignCardLogo = GHC.Maybe.Nothing,
      issuing'personalizationDesignCarrierText = GHC.Maybe.Nothing,
      issuing'personalizationDesignCreated = issuing'personalizationDesignCreated,
      issuing'personalizationDesignId = issuing'personalizationDesignId,
      issuing'personalizationDesignLivemode = issuing'personalizationDesignLivemode,
      issuing'personalizationDesignLookupKey = GHC.Maybe.Nothing,
      issuing'personalizationDesignMetadata = issuing'personalizationDesignMetadata,
      issuing'personalizationDesignName = GHC.Maybe.Nothing,
      issuing'personalizationDesignPhysicalBundle = issuing'personalizationDesignPhysicalBundle,
      issuing'personalizationDesignPreferences = issuing'personalizationDesignPreferences,
      issuing'personalizationDesignRejectionReasons = issuing'personalizationDesignRejectionReasons,
      issuing'personalizationDesignStatus = issuing'personalizationDesignStatus
    }

-- | Defines the oneOf schema located at @components.schemas.issuing.personalization_design.properties.card_logo.anyOf@ in the specification.
--
-- The file for the card logo to use with physical bundles that support card logos. Must have a \`purpose\` value of \`issuing_logo\`.
data Issuing'personalizationDesignCardLogo'NonNullableVariants
  = Issuing'personalizationDesignCardLogo'NonNullableText Data.Text.Internal.Text
  | Issuing'personalizationDesignCardLogo'NonNullableFile File
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'personalizationDesignCardLogo'NonNullableVariants where
  toJSON (Issuing'personalizationDesignCardLogo'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Issuing'personalizationDesignCardLogo'NonNullableFile a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'personalizationDesignCardLogo'NonNullableVariants where
  parseJSON val = case (Issuing'personalizationDesignCardLogo'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Issuing'personalizationDesignCardLogo'NonNullableFile Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.issuing.personalization_design.properties.carrier_text.anyOf@ in the specification.
--
-- Hash containing carrier text, for use with physical bundles that support carrier text.
data Issuing'personalizationDesignCarrierText'NonNullable = Issuing'personalizationDesignCarrierText'NonNullable
  { -- | footer_body: The footer body text of the carrier letter.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuing'personalizationDesignCarrierText'NonNullableFooterBody :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | footer_title: The footer title text of the carrier letter.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuing'personalizationDesignCarrierText'NonNullableFooterTitle :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | header_body: The header body text of the carrier letter.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuing'personalizationDesignCarrierText'NonNullableHeaderBody :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | header_title: The header title text of the carrier letter.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuing'personalizationDesignCarrierText'NonNullableHeaderTitle :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'personalizationDesignCarrierText'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("footer_body" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignCarrierText'NonNullableFooterBody obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("footer_title" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignCarrierText'NonNullableFooterTitle obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("header_body" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignCarrierText'NonNullableHeaderBody obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("header_title" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignCarrierText'NonNullableHeaderTitle obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("footer_body" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignCarrierText'NonNullableFooterBody obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("footer_title" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignCarrierText'NonNullableFooterTitle obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("header_body" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignCarrierText'NonNullableHeaderBody obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("header_title" Data.Aeson.Types.ToJSON..=)) (issuing'personalizationDesignCarrierText'NonNullableHeaderTitle obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'personalizationDesignCarrierText'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'personalizationDesignCarrierText'NonNullable" (\obj -> (((GHC.Base.pure Issuing'personalizationDesignCarrierText'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "footer_body")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "footer_title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "header_body")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "header_title"))

-- | Create a new 'Issuing'personalizationDesignCarrierText'NonNullable' with all required fields.
mkIssuing'personalizationDesignCarrierText'NonNullable :: Issuing'personalizationDesignCarrierText'NonNullable
mkIssuing'personalizationDesignCarrierText'NonNullable =
  Issuing'personalizationDesignCarrierText'NonNullable
    { issuing'personalizationDesignCarrierText'NonNullableFooterBody = GHC.Maybe.Nothing,
      issuing'personalizationDesignCarrierText'NonNullableFooterTitle = GHC.Maybe.Nothing,
      issuing'personalizationDesignCarrierText'NonNullableHeaderBody = GHC.Maybe.Nothing,
      issuing'personalizationDesignCarrierText'NonNullableHeaderTitle = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.issuing.personalization_design.properties.physical_bundle.anyOf@ in the specification.
--
-- The physical bundle object belonging to this personalization design.
data Issuing'personalizationDesignPhysicalBundle'Variants
  = Issuing'personalizationDesignPhysicalBundle'Text Data.Text.Internal.Text
  | Issuing'personalizationDesignPhysicalBundle'Issuing'physicalBundle Issuing'physicalBundle
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'personalizationDesignPhysicalBundle'Variants where
  toJSON (Issuing'personalizationDesignPhysicalBundle'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Issuing'personalizationDesignPhysicalBundle'Issuing'physicalBundle a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'personalizationDesignPhysicalBundle'Variants where
  parseJSON val = case (Issuing'personalizationDesignPhysicalBundle'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Issuing'personalizationDesignPhysicalBundle'Issuing'physicalBundle Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.issuing.personalization_design.properties.status@ in the specification.
--
-- Whether this personalization design can be used to create cards.
data Issuing'personalizationDesignStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Issuing'personalizationDesignStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Issuing'personalizationDesignStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    Issuing'personalizationDesignStatus'EnumActive
  | -- | Represents the JSON value @"inactive"@
    Issuing'personalizationDesignStatus'EnumInactive
  | -- | Represents the JSON value @"rejected"@
    Issuing'personalizationDesignStatus'EnumRejected
  | -- | Represents the JSON value @"review"@
    Issuing'personalizationDesignStatus'EnumReview
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'personalizationDesignStatus' where
  toJSON (Issuing'personalizationDesignStatus'Other val) = val
  toJSON (Issuing'personalizationDesignStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Issuing'personalizationDesignStatus'EnumActive) = "active"
  toJSON (Issuing'personalizationDesignStatus'EnumInactive) = "inactive"
  toJSON (Issuing'personalizationDesignStatus'EnumRejected) = "rejected"
  toJSON (Issuing'personalizationDesignStatus'EnumReview) = "review"

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'personalizationDesignStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "active" -> Issuing'personalizationDesignStatus'EnumActive
          | val GHC.Classes.== "inactive" -> Issuing'personalizationDesignStatus'EnumInactive
          | val GHC.Classes.== "rejected" -> Issuing'personalizationDesignStatus'EnumRejected
          | val GHC.Classes.== "review" -> Issuing'personalizationDesignStatus'EnumReview
          | GHC.Base.otherwise -> Issuing'personalizationDesignStatus'Other val
      )
