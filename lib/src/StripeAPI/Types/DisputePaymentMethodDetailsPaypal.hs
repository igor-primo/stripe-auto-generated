{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DisputePaymentMethodDetailsPaypal
module StripeAPI.Types.DisputePaymentMethodDetailsPaypal where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.dispute_payment_method_details_paypal@ in the specification.
data DisputePaymentMethodDetailsPaypal = DisputePaymentMethodDetailsPaypal
  { -- | case_id: The ID of the dispute in PayPal.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputePaymentMethodDetailsPaypalCaseId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | reason_code: The reason for the dispute as defined by PayPal
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputePaymentMethodDetailsPaypalReasonCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DisputePaymentMethodDetailsPaypal where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("case_id" Data.Aeson.Types.ToJSON..=)) (disputePaymentMethodDetailsPaypalCaseId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reason_code" Data.Aeson.Types.ToJSON..=)) (disputePaymentMethodDetailsPaypalReasonCode obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("case_id" Data.Aeson.Types.ToJSON..=)) (disputePaymentMethodDetailsPaypalCaseId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reason_code" Data.Aeson.Types.ToJSON..=)) (disputePaymentMethodDetailsPaypalReasonCode obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DisputePaymentMethodDetailsPaypal where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DisputePaymentMethodDetailsPaypal" (\obj -> (GHC.Base.pure DisputePaymentMethodDetailsPaypal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "case_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reason_code"))

-- | Create a new 'DisputePaymentMethodDetailsPaypal' with all required fields.
mkDisputePaymentMethodDetailsPaypal :: DisputePaymentMethodDetailsPaypal
mkDisputePaymentMethodDetailsPaypal =
  DisputePaymentMethodDetailsPaypal
    { disputePaymentMethodDetailsPaypalCaseId = GHC.Maybe.Nothing,
      disputePaymentMethodDetailsPaypalReasonCode = GHC.Maybe.Nothing
    }
