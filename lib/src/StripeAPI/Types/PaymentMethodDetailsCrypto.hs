{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodDetailsCrypto
module StripeAPI.Types.PaymentMethodDetailsCrypto where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_details_crypto@ in the specification.
data PaymentMethodDetailsCrypto = PaymentMethodDetailsCrypto
  { -- | buyer_address: The wallet address of the customer.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCryptoBuyerAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | network: The blockchain network that the transaction was sent on.
    paymentMethodDetailsCryptoNetwork :: (GHC.Maybe.Maybe PaymentMethodDetailsCryptoNetwork'),
    -- | token_currency: The token currency that the transaction was sent with.
    paymentMethodDetailsCryptoTokenCurrency :: (GHC.Maybe.Maybe PaymentMethodDetailsCryptoTokenCurrency'),
    -- | transaction_hash: The blockchain transaction hash of the crypto payment.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCryptoTransactionHash :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsCrypto where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("buyer_address" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCryptoBuyerAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCryptoNetwork obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("token_currency" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCryptoTokenCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction_hash" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCryptoTransactionHash obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("buyer_address" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCryptoBuyerAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCryptoNetwork obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("token_currency" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCryptoTokenCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction_hash" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCryptoTransactionHash obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCrypto where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCrypto" (\obj -> (((GHC.Base.pure PaymentMethodDetailsCrypto GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "buyer_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "token_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transaction_hash"))

-- | Create a new 'PaymentMethodDetailsCrypto' with all required fields.
mkPaymentMethodDetailsCrypto :: PaymentMethodDetailsCrypto
mkPaymentMethodDetailsCrypto =
  PaymentMethodDetailsCrypto
    { paymentMethodDetailsCryptoBuyerAddress = GHC.Maybe.Nothing,
      paymentMethodDetailsCryptoNetwork = GHC.Maybe.Nothing,
      paymentMethodDetailsCryptoTokenCurrency = GHC.Maybe.Nothing,
      paymentMethodDetailsCryptoTransactionHash = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_method_details_crypto.properties.network@ in the specification.
--
-- The blockchain network that the transaction was sent on.
data PaymentMethodDetailsCryptoNetwork'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodDetailsCryptoNetwork'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodDetailsCryptoNetwork'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"base"@
    PaymentMethodDetailsCryptoNetwork'EnumBase
  | -- | Represents the JSON value @"ethereum"@
    PaymentMethodDetailsCryptoNetwork'EnumEthereum
  | -- | Represents the JSON value @"polygon"@
    PaymentMethodDetailsCryptoNetwork'EnumPolygon
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsCryptoNetwork' where
  toJSON (PaymentMethodDetailsCryptoNetwork'Other val) = val
  toJSON (PaymentMethodDetailsCryptoNetwork'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodDetailsCryptoNetwork'EnumBase) = "base"
  toJSON (PaymentMethodDetailsCryptoNetwork'EnumEthereum) = "ethereum"
  toJSON (PaymentMethodDetailsCryptoNetwork'EnumPolygon) = "polygon"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCryptoNetwork' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "base" -> PaymentMethodDetailsCryptoNetwork'EnumBase
          | val GHC.Classes.== "ethereum" -> PaymentMethodDetailsCryptoNetwork'EnumEthereum
          | val GHC.Classes.== "polygon" -> PaymentMethodDetailsCryptoNetwork'EnumPolygon
          | GHC.Base.otherwise -> PaymentMethodDetailsCryptoNetwork'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_method_details_crypto.properties.token_currency@ in the specification.
--
-- The token currency that the transaction was sent with.
data PaymentMethodDetailsCryptoTokenCurrency'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodDetailsCryptoTokenCurrency'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodDetailsCryptoTokenCurrency'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"usdc"@
    PaymentMethodDetailsCryptoTokenCurrency'EnumUsdc
  | -- | Represents the JSON value @"usdg"@
    PaymentMethodDetailsCryptoTokenCurrency'EnumUsdg
  | -- | Represents the JSON value @"usdp"@
    PaymentMethodDetailsCryptoTokenCurrency'EnumUsdp
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsCryptoTokenCurrency' where
  toJSON (PaymentMethodDetailsCryptoTokenCurrency'Other val) = val
  toJSON (PaymentMethodDetailsCryptoTokenCurrency'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodDetailsCryptoTokenCurrency'EnumUsdc) = "usdc"
  toJSON (PaymentMethodDetailsCryptoTokenCurrency'EnumUsdg) = "usdg"
  toJSON (PaymentMethodDetailsCryptoTokenCurrency'EnumUsdp) = "usdp"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCryptoTokenCurrency' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "usdc" -> PaymentMethodDetailsCryptoTokenCurrency'EnumUsdc
          | val GHC.Classes.== "usdg" -> PaymentMethodDetailsCryptoTokenCurrency'EnumUsdg
          | val GHC.Classes.== "usdp" -> PaymentMethodDetailsCryptoTokenCurrency'EnumUsdp
          | GHC.Base.otherwise -> PaymentMethodDetailsCryptoTokenCurrency'Other val
      )
