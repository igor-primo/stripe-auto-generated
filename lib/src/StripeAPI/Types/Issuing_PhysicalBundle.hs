{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Issuing_PhysicalBundle
module StripeAPI.Types.Issuing_PhysicalBundle where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.IssuingPhysicalBundleFeatures
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing.physical_bundle@ in the specification.
--
-- A Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.
data Issuing'physicalBundle = Issuing'physicalBundle
  { -- | features:
    issuing'physicalBundleFeatures :: IssuingPhysicalBundleFeatures,
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuing'physicalBundleId :: Data.Text.Internal.Text,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    issuing'physicalBundleLivemode :: GHC.Types.Bool,
    -- | name: Friendly display name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuing'physicalBundleName :: Data.Text.Internal.Text,
    -- | status: Whether this physical bundle can be used to create cards.
    issuing'physicalBundleStatus :: Issuing'physicalBundleStatus',
    -- | type: Whether this physical bundle is a standard Stripe offering or custom-made for you.
    issuing'physicalBundleType :: Issuing'physicalBundleType'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'physicalBundle where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["features" Data.Aeson.Types.ToJSON..= issuing'physicalBundleFeatures obj] : ["id" Data.Aeson.Types.ToJSON..= issuing'physicalBundleId obj] : ["livemode" Data.Aeson.Types.ToJSON..= issuing'physicalBundleLivemode obj] : ["name" Data.Aeson.Types.ToJSON..= issuing'physicalBundleName obj] : ["status" Data.Aeson.Types.ToJSON..= issuing'physicalBundleStatus obj] : ["type" Data.Aeson.Types.ToJSON..= issuing'physicalBundleType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "issuing.physical_bundle"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["features" Data.Aeson.Types.ToJSON..= issuing'physicalBundleFeatures obj] : ["id" Data.Aeson.Types.ToJSON..= issuing'physicalBundleId obj] : ["livemode" Data.Aeson.Types.ToJSON..= issuing'physicalBundleLivemode obj] : ["name" Data.Aeson.Types.ToJSON..= issuing'physicalBundleName obj] : ["status" Data.Aeson.Types.ToJSON..= issuing'physicalBundleStatus obj] : ["type" Data.Aeson.Types.ToJSON..= issuing'physicalBundleType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "issuing.physical_bundle"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'physicalBundle where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'physicalBundle" (\obj -> (((((GHC.Base.pure Issuing'physicalBundle GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "features")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'Issuing'physicalBundle' with all required fields.
mkIssuing'physicalBundle ::
  -- | 'issuing'physicalBundleFeatures'
  IssuingPhysicalBundleFeatures ->
  -- | 'issuing'physicalBundleId'
  Data.Text.Internal.Text ->
  -- | 'issuing'physicalBundleLivemode'
  GHC.Types.Bool ->
  -- | 'issuing'physicalBundleName'
  Data.Text.Internal.Text ->
  -- | 'issuing'physicalBundleStatus'
  Issuing'physicalBundleStatus' ->
  -- | 'issuing'physicalBundleType'
  Issuing'physicalBundleType' ->
  Issuing'physicalBundle
mkIssuing'physicalBundle issuing'physicalBundleFeatures issuing'physicalBundleId issuing'physicalBundleLivemode issuing'physicalBundleName issuing'physicalBundleStatus issuing'physicalBundleType =
  Issuing'physicalBundle
    { issuing'physicalBundleFeatures = issuing'physicalBundleFeatures,
      issuing'physicalBundleId = issuing'physicalBundleId,
      issuing'physicalBundleLivemode = issuing'physicalBundleLivemode,
      issuing'physicalBundleName = issuing'physicalBundleName,
      issuing'physicalBundleStatus = issuing'physicalBundleStatus,
      issuing'physicalBundleType = issuing'physicalBundleType
    }

-- | Defines the enum schema located at @components.schemas.issuing.physical_bundle.properties.status@ in the specification.
--
-- Whether this physical bundle can be used to create cards.
data Issuing'physicalBundleStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Issuing'physicalBundleStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Issuing'physicalBundleStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    Issuing'physicalBundleStatus'EnumActive
  | -- | Represents the JSON value @"inactive"@
    Issuing'physicalBundleStatus'EnumInactive
  | -- | Represents the JSON value @"review"@
    Issuing'physicalBundleStatus'EnumReview
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'physicalBundleStatus' where
  toJSON (Issuing'physicalBundleStatus'Other val) = val
  toJSON (Issuing'physicalBundleStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Issuing'physicalBundleStatus'EnumActive) = "active"
  toJSON (Issuing'physicalBundleStatus'EnumInactive) = "inactive"
  toJSON (Issuing'physicalBundleStatus'EnumReview) = "review"

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'physicalBundleStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "active" -> Issuing'physicalBundleStatus'EnumActive
          | val GHC.Classes.== "inactive" -> Issuing'physicalBundleStatus'EnumInactive
          | val GHC.Classes.== "review" -> Issuing'physicalBundleStatus'EnumReview
          | GHC.Base.otherwise -> Issuing'physicalBundleStatus'Other val
      )

-- | Defines the enum schema located at @components.schemas.issuing.physical_bundle.properties.type@ in the specification.
--
-- Whether this physical bundle is a standard Stripe offering or custom-made for you.
data Issuing'physicalBundleType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Issuing'physicalBundleType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Issuing'physicalBundleType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"custom"@
    Issuing'physicalBundleType'EnumCustom
  | -- | Represents the JSON value @"standard"@
    Issuing'physicalBundleType'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'physicalBundleType' where
  toJSON (Issuing'physicalBundleType'Other val) = val
  toJSON (Issuing'physicalBundleType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Issuing'physicalBundleType'EnumCustom) = "custom"
  toJSON (Issuing'physicalBundleType'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'physicalBundleType' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "custom" -> Issuing'physicalBundleType'EnumCustom
          | val GHC.Classes.== "standard" -> Issuing'physicalBundleType'EnumStandard
          | GHC.Base.otherwise -> Issuing'physicalBundleType'Other val
      )
