{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AccountRequirements
module StripeAPI.Types.AccountRequirements where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.AccountRequirementsAlternative
import {-# SOURCE #-} StripeAPI.Types.AccountRequirementsError
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.account_requirements@ in the specification.
data AccountRequirements = AccountRequirements
  { -- | alternatives: Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
    accountRequirementsAlternatives :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [AccountRequirementsAlternative])),
    -- | current_deadline: Date by which the fields in \`currently_due\` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
    accountRequirementsCurrentDeadline :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | currently_due: Fields that need to be collected to keep the account enabled. If not collected by \`current_deadline\`, these fields appear in \`past_due\` as well, and the account is disabled.
    accountRequirementsCurrentlyDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text])),
    -- | disabled_reason: If the account is disabled, this enum describes why. [Learn more about handling verification issues](https:\/\/stripe.com\/docs\/connect\/handling-api-verification).
    accountRequirementsDisabledReason :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountRequirementsDisabledReason'NonNullable)),
    -- | errors: Fields that are \`currently_due\` and need to be collected again because validation or verification failed.
    accountRequirementsErrors :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [AccountRequirementsError])),
    -- | eventually_due: Fields you must collect when all thresholds are reached. As they become required, they appear in \`currently_due\` as well, and \`current_deadline\` becomes set.
    accountRequirementsEventuallyDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text])),
    -- | past_due: Fields that weren\'t collected by \`current_deadline\`. These fields need to be collected to enable the account.
    accountRequirementsPastDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text])),
    -- | pending_verification: Fields that might become required depending on the results of verification or review. It\'s an empty array unless an asynchronous verification is pending. If verification fails, these fields move to \`eventually_due\`, \`currently_due\`, or \`past_due\`. Fields might appear in \`eventually_due\`, \`currently_due\`, or \`past_due\` and in \`pending_verification\` if verification fails but another verification is still pending.
    accountRequirementsPendingVerification :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountRequirements where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alternatives" Data.Aeson.Types.ToJSON..=)) (accountRequirementsAlternatives obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_deadline" Data.Aeson.Types.ToJSON..=)) (accountRequirementsCurrentDeadline obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (accountRequirementsCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("disabled_reason" Data.Aeson.Types.ToJSON..=)) (accountRequirementsDisabledReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (accountRequirementsErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eventually_due" Data.Aeson.Types.ToJSON..=)) (accountRequirementsEventuallyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (accountRequirementsPastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (accountRequirementsPendingVerification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alternatives" Data.Aeson.Types.ToJSON..=)) (accountRequirementsAlternatives obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_deadline" Data.Aeson.Types.ToJSON..=)) (accountRequirementsCurrentDeadline obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (accountRequirementsCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("disabled_reason" Data.Aeson.Types.ToJSON..=)) (accountRequirementsDisabledReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (accountRequirementsErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eventually_due" Data.Aeson.Types.ToJSON..=)) (accountRequirementsEventuallyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (accountRequirementsPastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (accountRequirementsPendingVerification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountRequirements where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountRequirements" (\obj -> (((((((GHC.Base.pure AccountRequirements GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alternatives")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "current_deadline")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "disabled_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "eventually_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pending_verification"))

-- | Create a new 'AccountRequirements' with all required fields.
mkAccountRequirements :: AccountRequirements
mkAccountRequirements =
  AccountRequirements
    { accountRequirementsAlternatives = GHC.Maybe.Nothing,
      accountRequirementsCurrentDeadline = GHC.Maybe.Nothing,
      accountRequirementsCurrentlyDue = GHC.Maybe.Nothing,
      accountRequirementsDisabledReason = GHC.Maybe.Nothing,
      accountRequirementsErrors = GHC.Maybe.Nothing,
      accountRequirementsEventuallyDue = GHC.Maybe.Nothing,
      accountRequirementsPastDue = GHC.Maybe.Nothing,
      accountRequirementsPendingVerification = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.account_requirements.properties.disabled_reason@ in the specification.
--
-- If the account is disabled, this enum describes why. [Learn more about handling verification issues](https:\/\/stripe.com\/docs\/connect\/handling-api-verification).
data AccountRequirementsDisabledReason'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountRequirementsDisabledReason'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountRequirementsDisabledReason'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"action_required.requested_capabilities"@
    AccountRequirementsDisabledReason'NonNullableEnumActionRequired'requestedCapabilities
  | -- | Represents the JSON value @"listed"@
    AccountRequirementsDisabledReason'NonNullableEnumListed
  | -- | Represents the JSON value @"other"@
    AccountRequirementsDisabledReason'NonNullableEnumOther
  | -- | Represents the JSON value @"platform_paused"@
    AccountRequirementsDisabledReason'NonNullableEnumPlatformPaused
  | -- | Represents the JSON value @"rejected.fraud"@
    AccountRequirementsDisabledReason'NonNullableEnumRejected'fraud
  | -- | Represents the JSON value @"rejected.incomplete_verification"@
    AccountRequirementsDisabledReason'NonNullableEnumRejected'incompleteVerification
  | -- | Represents the JSON value @"rejected.listed"@
    AccountRequirementsDisabledReason'NonNullableEnumRejected'listed
  | -- | Represents the JSON value @"rejected.other"@
    AccountRequirementsDisabledReason'NonNullableEnumRejected'other
  | -- | Represents the JSON value @"rejected.platform_fraud"@
    AccountRequirementsDisabledReason'NonNullableEnumRejected'platformFraud
  | -- | Represents the JSON value @"rejected.platform_other"@
    AccountRequirementsDisabledReason'NonNullableEnumRejected'platformOther
  | -- | Represents the JSON value @"rejected.platform_terms_of_service"@
    AccountRequirementsDisabledReason'NonNullableEnumRejected'platformTermsOfService
  | -- | Represents the JSON value @"rejected.terms_of_service"@
    AccountRequirementsDisabledReason'NonNullableEnumRejected'termsOfService
  | -- | Represents the JSON value @"requirements.past_due"@
    AccountRequirementsDisabledReason'NonNullableEnumRequirements'pastDue
  | -- | Represents the JSON value @"requirements.pending_verification"@
    AccountRequirementsDisabledReason'NonNullableEnumRequirements'pendingVerification
  | -- | Represents the JSON value @"under_review"@
    AccountRequirementsDisabledReason'NonNullableEnumUnderReview
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountRequirementsDisabledReason'NonNullable where
  toJSON (AccountRequirementsDisabledReason'NonNullableOther val) = val
  toJSON (AccountRequirementsDisabledReason'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumActionRequired'requestedCapabilities) = "action_required.requested_capabilities"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumListed) = "listed"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumOther) = "other"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumPlatformPaused) = "platform_paused"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumRejected'fraud) = "rejected.fraud"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumRejected'incompleteVerification) = "rejected.incomplete_verification"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumRejected'listed) = "rejected.listed"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumRejected'other) = "rejected.other"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumRejected'platformFraud) = "rejected.platform_fraud"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumRejected'platformOther) = "rejected.platform_other"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumRejected'platformTermsOfService) = "rejected.platform_terms_of_service"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumRejected'termsOfService) = "rejected.terms_of_service"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumRequirements'pastDue) = "requirements.past_due"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumRequirements'pendingVerification) = "requirements.pending_verification"
  toJSON (AccountRequirementsDisabledReason'NonNullableEnumUnderReview) = "under_review"

instance Data.Aeson.Types.FromJSON.FromJSON AccountRequirementsDisabledReason'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "action_required.requested_capabilities" -> AccountRequirementsDisabledReason'NonNullableEnumActionRequired'requestedCapabilities
          | val GHC.Classes.== "listed" -> AccountRequirementsDisabledReason'NonNullableEnumListed
          | val GHC.Classes.== "other" -> AccountRequirementsDisabledReason'NonNullableEnumOther
          | val GHC.Classes.== "platform_paused" -> AccountRequirementsDisabledReason'NonNullableEnumPlatformPaused
          | val GHC.Classes.== "rejected.fraud" -> AccountRequirementsDisabledReason'NonNullableEnumRejected'fraud
          | val GHC.Classes.== "rejected.incomplete_verification" -> AccountRequirementsDisabledReason'NonNullableEnumRejected'incompleteVerification
          | val GHC.Classes.== "rejected.listed" -> AccountRequirementsDisabledReason'NonNullableEnumRejected'listed
          | val GHC.Classes.== "rejected.other" -> AccountRequirementsDisabledReason'NonNullableEnumRejected'other
          | val GHC.Classes.== "rejected.platform_fraud" -> AccountRequirementsDisabledReason'NonNullableEnumRejected'platformFraud
          | val GHC.Classes.== "rejected.platform_other" -> AccountRequirementsDisabledReason'NonNullableEnumRejected'platformOther
          | val GHC.Classes.== "rejected.platform_terms_of_service" -> AccountRequirementsDisabledReason'NonNullableEnumRejected'platformTermsOfService
          | val GHC.Classes.== "rejected.terms_of_service" -> AccountRequirementsDisabledReason'NonNullableEnumRejected'termsOfService
          | val GHC.Classes.== "requirements.past_due" -> AccountRequirementsDisabledReason'NonNullableEnumRequirements'pastDue
          | val GHC.Classes.== "requirements.pending_verification" -> AccountRequirementsDisabledReason'NonNullableEnumRequirements'pendingVerification
          | val GHC.Classes.== "under_review" -> AccountRequirementsDisabledReason'NonNullableEnumUnderReview
          | GHC.Base.otherwise -> AccountRequirementsDisabledReason'NonNullableOther val
      )
