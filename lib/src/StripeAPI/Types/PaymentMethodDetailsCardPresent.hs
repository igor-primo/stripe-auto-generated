{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodDetailsCardPresent
module StripeAPI.Types.PaymentMethodDetailsCardPresent where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsPrivatePaymentMethodsCardPresentCommonWallet
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsCardPresentOffline
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsCardPresentReceipt
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_details_card_present@ in the specification.
data PaymentMethodDetailsCardPresent = PaymentMethodDetailsCardPresent
  { -- | amount_authorized: The authorized amount
    paymentMethodDetailsCardPresentAmountAuthorized :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | brand: Card brand. Can be \`amex\`, \`cartes_bancaires\`, \`diners\`, \`discover\`, \`eftpos_au\`, \`jcb\`, \`link\`, \`mastercard\`, \`unionpay\`, \`visa\` or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentBrand :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | brand_product: The [product code](https:\/\/stripe.com\/docs\/card-product-codes) that identifies the specific program or product associated with a card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentBrandProduct :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | capture_before: When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured.
    paymentMethodDetailsCardPresentCaptureBefore :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | cardholder_name: The cardholder name as read from the card, in [ISO 7813](https:\/\/en.wikipedia.org\/wiki\/ISO\/IEC_7813) format. May include alphanumeric characters, special characters and first\/last name separator (\`\/\`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentCardholderName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | country: Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you\'ve collected.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | description: A high-level description of the type of cards issued in this range.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | emv_auth_data: Authorization response cryptogram.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentEmvAuthData :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | exp_month: Two-digit number representing the card\'s expiration month.
    paymentMethodDetailsCardPresentExpMonth :: GHC.Types.Int,
    -- | exp_year: Four-digit number representing the card\'s expiration year.
    paymentMethodDetailsCardPresentExpYear :: GHC.Types.Int,
    -- | fingerprint: Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
    --
    -- *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentFingerprint :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentFunding :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | generated_card: ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentGeneratedCard :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | incremental_authorization_supported: Whether this [PaymentIntent](https:\/\/stripe.com\/docs\/api\/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https:\/\/stripe.com\/docs\/api\/payment_intents\/create\#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support).
    paymentMethodDetailsCardPresentIncrementalAuthorizationSupported :: GHC.Types.Bool,
    -- | issuer: The name of the card\'s issuing bank.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentIssuer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | last4: The last four digits of the card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentLast4 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | network: Identifies which network this charge was processed on. Can be \`amex\`, \`cartes_bancaires\`, \`diners\`, \`discover\`, \`eftpos_au\`, \`interac\`, \`jcb\`, \`link\`, \`mastercard\`, \`unionpay\`, \`visa\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentNetwork :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | network_transaction_id: This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentNetworkTransactionId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | offline: Details about payments collected offline.
    paymentMethodDetailsCardPresentOffline :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentMethodDetailsCardPresentOffline'NonNullable)),
    -- | overcapture_supported: Defines whether the authorized amount can be over-captured or not
    paymentMethodDetailsCardPresentOvercaptureSupported :: GHC.Types.Bool,
    -- | preferred_locales: The languages that the issuing bank recommends using for localizing any customer-facing text, as read from the card. Referenced from EMV tag 5F2D, data encoded on the card\'s chip.
    paymentMethodDetailsCardPresentPreferredLocales :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text])),
    -- | read_method: How card details were read in this transaction.
    paymentMethodDetailsCardPresentReadMethod :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentMethodDetailsCardPresentReadMethod'NonNullable)),
    -- | receipt: A collection of fields required to be displayed on receipts. Only required for EMV transactions.
    paymentMethodDetailsCardPresentReceipt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentMethodDetailsCardPresentReceipt'NonNullable)),
    -- | wallet:
    paymentMethodDetailsCardPresentWallet :: (GHC.Maybe.Maybe PaymentFlowsPrivatePaymentMethodsCardPresentCommonWallet)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsCardPresent where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_authorized" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentAmountAuthorized obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentBrand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand_product" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentBrandProduct obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_before" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentCaptureBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cardholder_name" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentCardholderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("emv_auth_data" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentEmvAuthData obj) : ["exp_month" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentExpMonth obj] : ["exp_year" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentExpYear obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentFingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentFunding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("generated_card" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentGeneratedCard obj) : ["incremental_authorization_supported" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentIncrementalAuthorizationSupported obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issuer" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentIssuer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentNetwork obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_transaction_id" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentNetworkTransactionId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("offline" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentOffline obj) : ["overcapture_supported" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentOvercaptureSupported obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locales" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentPreferredLocales obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("read_method" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReadMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receipt" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentWallet obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_authorized" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentAmountAuthorized obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentBrand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand_product" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentBrandProduct obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_before" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentCaptureBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cardholder_name" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentCardholderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("emv_auth_data" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentEmvAuthData obj) : ["exp_month" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentExpMonth obj] : ["exp_year" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentExpYear obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentFingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentFunding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("generated_card" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentGeneratedCard obj) : ["incremental_authorization_supported" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentIncrementalAuthorizationSupported obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issuer" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentIssuer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentNetwork obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_transaction_id" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentNetworkTransactionId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("offline" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentOffline obj) : ["overcapture_supported" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentOvercaptureSupported obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locales" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentPreferredLocales obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("read_method" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReadMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receipt" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentWallet obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardPresent where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardPresent" (\obj -> (((((((((((((((((((((((GHC.Base.pure PaymentMethodDetailsCardPresent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_authorized")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "brand_product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cardholder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "emv_auth_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "generated_card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "incremental_authorization_supported")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "issuer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "network_transaction_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "offline")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "overcapture_supported")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_locales")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "read_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "receipt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wallet"))

-- | Create a new 'PaymentMethodDetailsCardPresent' with all required fields.
mkPaymentMethodDetailsCardPresent ::
  -- | 'paymentMethodDetailsCardPresentExpMonth'
  GHC.Types.Int ->
  -- | 'paymentMethodDetailsCardPresentExpYear'
  GHC.Types.Int ->
  -- | 'paymentMethodDetailsCardPresentIncrementalAuthorizationSupported'
  GHC.Types.Bool ->
  -- | 'paymentMethodDetailsCardPresentOvercaptureSupported'
  GHC.Types.Bool ->
  PaymentMethodDetailsCardPresent
mkPaymentMethodDetailsCardPresent paymentMethodDetailsCardPresentExpMonth paymentMethodDetailsCardPresentExpYear paymentMethodDetailsCardPresentIncrementalAuthorizationSupported paymentMethodDetailsCardPresentOvercaptureSupported =
  PaymentMethodDetailsCardPresent
    { paymentMethodDetailsCardPresentAmountAuthorized = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentBrand = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentBrandProduct = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentCaptureBefore = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentCardholderName = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentCountry = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentDescription = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentEmvAuthData = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentExpMonth = paymentMethodDetailsCardPresentExpMonth,
      paymentMethodDetailsCardPresentExpYear = paymentMethodDetailsCardPresentExpYear,
      paymentMethodDetailsCardPresentFingerprint = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentFunding = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentGeneratedCard = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentIncrementalAuthorizationSupported = paymentMethodDetailsCardPresentIncrementalAuthorizationSupported,
      paymentMethodDetailsCardPresentIssuer = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentLast4 = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentNetwork = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentNetworkTransactionId = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentOffline = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentOvercaptureSupported = paymentMethodDetailsCardPresentOvercaptureSupported,
      paymentMethodDetailsCardPresentPreferredLocales = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReadMethod = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentWallet = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_method_details_card_present.properties.offline.anyOf@ in the specification.
--
-- Details about payments collected offline.
data PaymentMethodDetailsCardPresentOffline'NonNullable = PaymentMethodDetailsCardPresentOffline'NonNullable
  { -- | stored_at: Time at which the payment was collected while offline
    paymentMethodDetailsCardPresentOffline'NonNullableStoredAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | type: The method used to process this payment method offline. Only deferred is allowed.
    paymentMethodDetailsCardPresentOffline'NonNullableType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsCardPresentOffline'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stored_at" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentOffline'NonNullableStoredAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentOffline'NonNullableType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stored_at" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentOffline'NonNullableStoredAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentOffline'NonNullableType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardPresentOffline'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardPresentOffline'NonNullable" (\obj -> (GHC.Base.pure PaymentMethodDetailsCardPresentOffline'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "stored_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'PaymentMethodDetailsCardPresentOffline'NonNullable' with all required fields.
mkPaymentMethodDetailsCardPresentOffline'NonNullable :: PaymentMethodDetailsCardPresentOffline'NonNullable
mkPaymentMethodDetailsCardPresentOffline'NonNullable =
  PaymentMethodDetailsCardPresentOffline'NonNullable
    { paymentMethodDetailsCardPresentOffline'NonNullableStoredAt = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentOffline'NonNullableType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_method_details_card_present.properties.offline.anyOf.properties.type@ in the specification.
--
-- The method used to process this payment method offline. Only deferred is allowed.
data PaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"deferred"@
    PaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableEnumDeferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullable where
  toJSON (PaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableOther val) = val
  toJSON (PaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableEnumDeferred) = "deferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "deferred" -> PaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableEnumDeferred
          | GHC.Base.otherwise -> PaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_method_details_card_present.properties.read_method@ in the specification.
--
-- How card details were read in this transaction.
data PaymentMethodDetailsCardPresentReadMethod'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodDetailsCardPresentReadMethod'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodDetailsCardPresentReadMethod'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"contact_emv"@
    PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumContactEmv
  | -- | Represents the JSON value @"contactless_emv"@
    PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumContactlessEmv
  | -- | Represents the JSON value @"contactless_magstripe_mode"@
    PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumContactlessMagstripeMode
  | -- | Represents the JSON value @"magnetic_stripe_fallback"@
    PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumMagneticStripeFallback
  | -- | Represents the JSON value @"magnetic_stripe_track2"@
    PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumMagneticStripeTrack2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsCardPresentReadMethod'NonNullable where
  toJSON (PaymentMethodDetailsCardPresentReadMethod'NonNullableOther val) = val
  toJSON (PaymentMethodDetailsCardPresentReadMethod'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumContactEmv) = "contact_emv"
  toJSON (PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumContactlessEmv) = "contactless_emv"
  toJSON (PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumContactlessMagstripeMode) = "contactless_magstripe_mode"
  toJSON (PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumMagneticStripeFallback) = "magnetic_stripe_fallback"
  toJSON (PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumMagneticStripeTrack2) = "magnetic_stripe_track2"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardPresentReadMethod'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "contact_emv" -> PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumContactEmv
          | val GHC.Classes.== "contactless_emv" -> PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumContactlessEmv
          | val GHC.Classes.== "contactless_magstripe_mode" -> PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumContactlessMagstripeMode
          | val GHC.Classes.== "magnetic_stripe_fallback" -> PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumMagneticStripeFallback
          | val GHC.Classes.== "magnetic_stripe_track2" -> PaymentMethodDetailsCardPresentReadMethod'NonNullableEnumMagneticStripeTrack2
          | GHC.Base.otherwise -> PaymentMethodDetailsCardPresentReadMethod'NonNullableOther val
      )

-- | Defines the object schema located at @components.schemas.payment_method_details_card_present.properties.receipt.anyOf@ in the specification.
--
-- A collection of fields required to be displayed on receipts. Only required for EMV transactions.
data PaymentMethodDetailsCardPresentReceipt'NonNullable = PaymentMethodDetailsCardPresentReceipt'NonNullable
  { -- | account_type: The type of account being debited or credited
    paymentMethodDetailsCardPresentReceipt'NonNullableAccountType :: (GHC.Maybe.Maybe PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'),
    -- | application_cryptogram: The Application Cryptogram, a unique value generated by the card to authenticate the transaction with issuers.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentReceipt'NonNullableApplicationCryptogram :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | application_preferred_name: The Application Identifier (AID) on the card used to determine which networks are eligible to process the transaction. Referenced from EMV tag 9F12, data encoded on the card\'s chip.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentReceipt'NonNullableApplicationPreferredName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_code: Identifier for this transaction.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentReceipt'NonNullableAuthorizationCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_response_code: EMV tag 8A. A code returned by the card issuer.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentReceipt'NonNullableAuthorizationResponseCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | cardholder_verification_method: Describes the method used by the cardholder to verify ownership of the card. One of the following: \`approval\`, \`failure\`, \`none\`, \`offline_pin\`, \`offline_pin_and_signature\`, \`online_pin\`, or \`signature\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentReceipt'NonNullableCardholderVerificationMethod :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | dedicated_file_name: Similar to the application_preferred_name, identifying the applications (AIDs) available on the card. Referenced from EMV tag 84.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentReceipt'NonNullableDedicatedFileName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | terminal_verification_results: A 5-byte string that records the checks and validations that occur between the card and the terminal. These checks determine how the terminal processes the transaction and what risk tolerance is acceptable. Referenced from EMV Tag 95.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentReceipt'NonNullableTerminalVerificationResults :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | transaction_status_information: An indication of which steps were completed during the card read process. Referenced from EMV Tag 9B.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsCardPresentReceipt'NonNullableTransactionStatusInformation :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsCardPresentReceipt'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableAccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_cryptogram" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableApplicationCryptogram obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_preferred_name" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableApplicationPreferredName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authorization_code" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableAuthorizationCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authorization_response_code" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableAuthorizationResponseCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cardholder_verification_method" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableCardholderVerificationMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dedicated_file_name" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableDedicatedFileName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("terminal_verification_results" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableTerminalVerificationResults obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction_status_information" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableTransactionStatusInformation obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableAccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_cryptogram" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableApplicationCryptogram obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_preferred_name" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableApplicationPreferredName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authorization_code" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableAuthorizationCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authorization_response_code" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableAuthorizationResponseCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cardholder_verification_method" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableCardholderVerificationMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dedicated_file_name" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableDedicatedFileName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("terminal_verification_results" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableTerminalVerificationResults obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction_status_information" Data.Aeson.Types.ToJSON..=)) (paymentMethodDetailsCardPresentReceipt'NonNullableTransactionStatusInformation obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardPresentReceipt'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardPresentReceipt'NonNullable" (\obj -> ((((((((GHC.Base.pure PaymentMethodDetailsCardPresentReceipt'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_cryptogram")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_preferred_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authorization_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authorization_response_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cardholder_verification_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dedicated_file_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "terminal_verification_results")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transaction_status_information"))

-- | Create a new 'PaymentMethodDetailsCardPresentReceipt'NonNullable' with all required fields.
mkPaymentMethodDetailsCardPresentReceipt'NonNullable :: PaymentMethodDetailsCardPresentReceipt'NonNullable
mkPaymentMethodDetailsCardPresentReceipt'NonNullable =
  PaymentMethodDetailsCardPresentReceipt'NonNullable
    { paymentMethodDetailsCardPresentReceipt'NonNullableAccountType = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'NonNullableApplicationCryptogram = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'NonNullableApplicationPreferredName = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'NonNullableAuthorizationCode = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'NonNullableAuthorizationResponseCode = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'NonNullableCardholderVerificationMethod = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'NonNullableDedicatedFileName = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'NonNullableTerminalVerificationResults = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'NonNullableTransactionStatusInformation = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_method_details_card_present.properties.receipt.anyOf.properties.account_type@ in the specification.
--
-- The type of account being debited or credited
data PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"checking"@
    PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'EnumChecking
  | -- | Represents the JSON value @"credit"@
    PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'EnumCredit
  | -- | Represents the JSON value @"prepaid"@
    PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'EnumPrepaid
  | -- | Represents the JSON value @"unknown"@
    PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'EnumUnknown
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType' where
  toJSON (PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'Other val) = val
  toJSON (PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'EnumChecking) = "checking"
  toJSON (PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'EnumCredit) = "credit"
  toJSON (PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'EnumPrepaid) = "prepaid"
  toJSON (PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'EnumUnknown) = "unknown"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "checking" -> PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'EnumChecking
          | val GHC.Classes.== "credit" -> PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'EnumCredit
          | val GHC.Classes.== "prepaid" -> PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'EnumPrepaid
          | val GHC.Classes.== "unknown" -> PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'EnumUnknown
          | GHC.Base.otherwise -> PaymentMethodDetailsCardPresentReceipt'NonNullableAccountType'Other val
      )
