{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Account
module StripeAPI.Types.Account where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.AccountAnnualRevenue
import {-# SOURCE #-} StripeAPI.Types.AccountBacsDebitPaymentsSettings
import {-# SOURCE #-} StripeAPI.Types.AccountBrandingSettings
import {-# SOURCE #-} StripeAPI.Types.AccountBusinessProfile
import {-# SOURCE #-} StripeAPI.Types.AccountCapabilities
import {-# SOURCE #-} StripeAPI.Types.AccountCardIssuingSettings
import {-# SOURCE #-} StripeAPI.Types.AccountCardPaymentsSettings
import {-# SOURCE #-} StripeAPI.Types.AccountDashboardSettings
import {-# SOURCE #-} StripeAPI.Types.AccountFutureRequirements
import {-# SOURCE #-} StripeAPI.Types.AccountGroupMembership
import {-# SOURCE #-} StripeAPI.Types.AccountInvoicesSettings
import {-# SOURCE #-} StripeAPI.Types.AccountMonthlyEstimatedRevenue
import {-# SOURCE #-} StripeAPI.Types.AccountPaymentsSettings
import {-# SOURCE #-} StripeAPI.Types.AccountPayoutSettings
import {-# SOURCE #-} StripeAPI.Types.AccountRequirements
import {-# SOURCE #-} StripeAPI.Types.AccountRequirementsError
import {-# SOURCE #-} StripeAPI.Types.AccountSepaDebitPaymentsSettings
import {-# SOURCE #-} StripeAPI.Types.AccountSettings
import {-# SOURCE #-} StripeAPI.Types.AccountTosAcceptance
import {-# SOURCE #-} StripeAPI.Types.AccountTreasurySettings
import {-# SOURCE #-} StripeAPI.Types.AccountUnificationAccountController
import {-# SOURCE #-} StripeAPI.Types.Address
import {-# SOURCE #-} StripeAPI.Types.BankAccount
import {-# SOURCE #-} StripeAPI.Types.Card
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.DeletedCustomer
import {-# SOURCE #-} StripeAPI.Types.ExternalAccountRequirements
import {-# SOURCE #-} StripeAPI.Types.LegalEntityCompany
import {-# SOURCE #-} StripeAPI.Types.Person
import {-# SOURCE #-} StripeAPI.Types.TokenCardNetworks
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.account@ in the specification.
--
-- This is an object representing a Stripe account. You can retrieve it to see
-- properties on the account like its current requirements or if the account is
-- enabled to make live charges or receive payouts.
--
-- For accounts where [controller.requirement_collection](\/api\/accounts\/object\#account_object-controller-requirement_collection)
-- is \`application\`, which includes Custom accounts, the properties below are always
-- returned.
--
-- For accounts where [controller.requirement_collection](\/api\/accounts\/object\#account_object-controller-requirement_collection)
-- is \`stripe\`, which includes Standard and Express accounts, some properties are only returned
-- until you create an [Account Link](\/api\/account_links) or [Account Session](\/api\/account_sessions)
-- to start Connect Onboarding. Learn about the [differences between accounts](\/connect\/accounts).
data Account = Account
  { -- | business_profile: Business information about the account.
    accountBusinessProfile :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountBusinessProfile'NonNullable)),
    -- | business_type: The business type.
    accountBusinessType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountBusinessType'NonNullable)),
    -- | capabilities:
    accountCapabilities :: (GHC.Maybe.Maybe AccountCapabilities),
    -- | charges_enabled: Whether the account can process charges.
    accountChargesEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | company:
    accountCompany :: (GHC.Maybe.Maybe LegalEntityCompany),
    -- | controller:
    accountController :: (GHC.Maybe.Maybe AccountUnificationAccountController),
    -- | country: The account\'s country.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | created: Time at which the account was connected. Measured in seconds since the Unix epoch.
    accountCreated :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | default_currency: Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account\'s country](https:\/\/stripe.com\/docs\/payouts).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountDefaultCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | details_submitted: Whether account details have been submitted. Accounts with Stripe Dashboard access, which includes Standard accounts, cannot receive payouts before this is true. Accounts where this is false should be directed to [an onboarding flow](\/connect\/onboarding) to finish submitting account details.
    accountDetailsSubmitted :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | email: An email address associated with the account. It\'s not used for authentication and Stripe doesn\'t market to this field without explicit approval from the platform.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountEmail :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | external_accounts: External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where \`controller[is_controller]\` is true.
    accountExternalAccounts :: (GHC.Maybe.Maybe AccountExternalAccounts'),
    -- | future_requirements:
    accountFutureRequirements :: (GHC.Maybe.Maybe AccountFutureRequirements),
    -- | groups: The groups associated with the account.
    accountGroups :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountGroups'NonNullable)),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountId :: Data.Text.Internal.Text,
    -- | individual: This is an object representing a person associated with a Stripe account.
    --
    -- A platform can only access a subset of data in a person for an account where [account.controller.requirement_collection](\/api\/accounts\/object\#account_object-controller-requirement_collection) is \`stripe\`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.
    --
    -- See the [Standard onboarding](\/connect\/standard-accounts) or [Express onboarding](\/connect\/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](\/connect\/handling-api-verification\#person-information).
    accountIndividual :: (GHC.Maybe.Maybe Person),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    accountMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | payouts_enabled: Whether the funds in this account can be paid out.
    accountPayoutsEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | requirements:
    accountRequirements :: (GHC.Maybe.Maybe AccountRequirements),
    -- | settings: Options for customizing how the account functions within Stripe.
    accountSettings :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountSettings'NonNullable)),
    -- | tos_acceptance:
    accountTosAcceptance :: (GHC.Maybe.Maybe AccountTosAcceptance),
    -- | type: The Stripe account type. Can be \`standard\`, \`express\`, \`custom\`, or \`none\`.
    accountType :: (GHC.Maybe.Maybe AccountType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Account where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_profile" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_type" Data.Aeson.Types.ToJSON..=)) (accountBusinessType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capabilities" Data.Aeson.Types.ToJSON..=)) (accountCapabilities obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("charges_enabled" Data.Aeson.Types.ToJSON..=)) (accountChargesEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company" Data.Aeson.Types.ToJSON..=)) (accountCompany obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("controller" Data.Aeson.Types.ToJSON..=)) (accountController obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (accountCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created" Data.Aeson.Types.ToJSON..=)) (accountCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_currency" Data.Aeson.Types.ToJSON..=)) (accountDefaultCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("details_submitted" Data.Aeson.Types.ToJSON..=)) (accountDetailsSubmitted obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (accountEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("external_accounts" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (accountFutureRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (accountGroups obj) : ["id" Data.Aeson.Types.ToJSON..= accountId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("individual" Data.Aeson.Types.ToJSON..=)) (accountIndividual obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (accountMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payouts_enabled" Data.Aeson.Types.ToJSON..=)) (accountPayoutsEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (accountRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (accountSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tos_acceptance" Data.Aeson.Types.ToJSON..=)) (accountTosAcceptance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (accountType obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "account"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_profile" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_type" Data.Aeson.Types.ToJSON..=)) (accountBusinessType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capabilities" Data.Aeson.Types.ToJSON..=)) (accountCapabilities obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("charges_enabled" Data.Aeson.Types.ToJSON..=)) (accountChargesEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company" Data.Aeson.Types.ToJSON..=)) (accountCompany obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("controller" Data.Aeson.Types.ToJSON..=)) (accountController obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (accountCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created" Data.Aeson.Types.ToJSON..=)) (accountCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_currency" Data.Aeson.Types.ToJSON..=)) (accountDefaultCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("details_submitted" Data.Aeson.Types.ToJSON..=)) (accountDetailsSubmitted obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (accountEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("external_accounts" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (accountFutureRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (accountGroups obj) : ["id" Data.Aeson.Types.ToJSON..= accountId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("individual" Data.Aeson.Types.ToJSON..=)) (accountIndividual obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (accountMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payouts_enabled" Data.Aeson.Types.ToJSON..=)) (accountPayoutsEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (accountRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (accountSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tos_acceptance" Data.Aeson.Types.ToJSON..=)) (accountTosAcceptance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (accountType obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "account"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Account where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Account" (\obj -> (((((((((((((((((((((GHC.Base.pure Account GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "business_profile")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "business_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capabilities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "charges_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "company")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "controller")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "details_submitted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "external_accounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "future_requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "groups")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "individual")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payouts_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tos_acceptance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'Account' with all required fields.
mkAccount ::
  -- | 'accountId'
  Data.Text.Internal.Text ->
  Account
mkAccount accountId =
  Account
    { accountBusinessProfile = GHC.Maybe.Nothing,
      accountBusinessType = GHC.Maybe.Nothing,
      accountCapabilities = GHC.Maybe.Nothing,
      accountChargesEnabled = GHC.Maybe.Nothing,
      accountCompany = GHC.Maybe.Nothing,
      accountController = GHC.Maybe.Nothing,
      accountCountry = GHC.Maybe.Nothing,
      accountCreated = GHC.Maybe.Nothing,
      accountDefaultCurrency = GHC.Maybe.Nothing,
      accountDetailsSubmitted = GHC.Maybe.Nothing,
      accountEmail = GHC.Maybe.Nothing,
      accountExternalAccounts = GHC.Maybe.Nothing,
      accountFutureRequirements = GHC.Maybe.Nothing,
      accountGroups = GHC.Maybe.Nothing,
      accountId = accountId,
      accountIndividual = GHC.Maybe.Nothing,
      accountMetadata = GHC.Maybe.Nothing,
      accountPayoutsEnabled = GHC.Maybe.Nothing,
      accountRequirements = GHC.Maybe.Nothing,
      accountSettings = GHC.Maybe.Nothing,
      accountTosAcceptance = GHC.Maybe.Nothing,
      accountType = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.account.properties.business_profile.anyOf@ in the specification.
--
-- Business information about the account.
data AccountBusinessProfile'NonNullable = AccountBusinessProfile'NonNullable
  { -- | annual_revenue: The applicant\'s gross annual revenue for its preceding fiscal year.
    accountBusinessProfile'NonNullableAnnualRevenue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountBusinessProfile'NonNullableAnnualRevenue'NonNullable)),
    -- | estimated_worker_count: An estimated upper bound of employees, contractors, vendors, etc. currently working for the business.
    accountBusinessProfile'NonNullableEstimatedWorkerCount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | mcc: [The merchant category code for the account](\/connect\/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBusinessProfile'NonNullableMcc :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | minority_owned_business_designation: Whether the business is a minority-owned, women-owned, and\/or LGBTQI+ -owned business.
    accountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullable])),
    -- | monthly_estimated_revenue:
    accountBusinessProfile'NonNullableMonthlyEstimatedRevenue :: (GHC.Maybe.Maybe AccountMonthlyEstimatedRevenue),
    -- | name: The customer-facing business name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBusinessProfile'NonNullableName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | product_description: Internal-only description of the product sold or service provided by the business. It\'s used by Stripe for risk and underwriting purposes.
    --
    -- Constraints:
    --
    -- * Maximum length of 40000
    accountBusinessProfile'NonNullableProductDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | support_address: A publicly available mailing address for sending support issues to.
    accountBusinessProfile'NonNullableSupportAddress :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountBusinessProfile'NonNullableSupportAddress'NonNullable)),
    -- | support_email: A publicly available email address for sending support issues to.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBusinessProfile'NonNullableSupportEmail :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | support_phone: A publicly available phone number to call with support issues.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBusinessProfile'NonNullableSupportPhone :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | support_url: A publicly available website for handling support issues.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBusinessProfile'NonNullableSupportUrl :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | url: The business\'s publicly available website.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBusinessProfile'NonNullableUrl :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountBusinessProfile'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("annual_revenue" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableAnnualRevenue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("estimated_worker_count" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableEstimatedWorkerCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mcc" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableMcc obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("minority_owned_business_designation" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("monthly_estimated_revenue" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableMonthlyEstimatedRevenue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_description" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableProductDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("support_address" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("support_email" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("support_phone" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportPhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("support_url" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("url" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableUrl obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("annual_revenue" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableAnnualRevenue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("estimated_worker_count" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableEstimatedWorkerCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mcc" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableMcc obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("minority_owned_business_designation" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("monthly_estimated_revenue" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableMonthlyEstimatedRevenue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_description" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableProductDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("support_address" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("support_email" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("support_phone" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportPhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("support_url" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("url" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableUrl obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountBusinessProfile'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountBusinessProfile'NonNullable" (\obj -> (((((((((((GHC.Base.pure AccountBusinessProfile'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "annual_revenue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "estimated_worker_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mcc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "minority_owned_business_designation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "monthly_estimated_revenue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "product_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "support_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "support_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "support_phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "support_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "url"))

-- | Create a new 'AccountBusinessProfile'NonNullable' with all required fields.
mkAccountBusinessProfile'NonNullable :: AccountBusinessProfile'NonNullable
mkAccountBusinessProfile'NonNullable =
  AccountBusinessProfile'NonNullable
    { accountBusinessProfile'NonNullableAnnualRevenue = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableEstimatedWorkerCount = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableMcc = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableMonthlyEstimatedRevenue = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableName = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableProductDescription = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableSupportAddress = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableSupportEmail = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableSupportPhone = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableSupportUrl = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableUrl = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.account.properties.business_profile.anyOf.properties.annual_revenue.anyOf@ in the specification.
--
-- The applicant\\\'s gross annual revenue for its preceding fiscal year.
data AccountBusinessProfile'NonNullableAnnualRevenue'NonNullable = AccountBusinessProfile'NonNullableAnnualRevenue'NonNullable
  { -- | amount: A non-negative integer representing the amount in the [smallest currency unit](\/currencies\#zero-decimal).
    accountBusinessProfile'NonNullableAnnualRevenue'NonNullableAmount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    accountBusinessProfile'NonNullableAnnualRevenue'NonNullableCurrency :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | fiscal_year_end: The close-out date of the preceding fiscal year in ISO 8601 format. E.g. 2023-12-31 for the 31st of December, 2023.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBusinessProfile'NonNullableAnnualRevenue'NonNullableFiscalYearEnd :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountBusinessProfile'NonNullableAnnualRevenue'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableAnnualRevenue'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableAnnualRevenue'NonNullableCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fiscal_year_end" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableAnnualRevenue'NonNullableFiscalYearEnd obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableAnnualRevenue'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableAnnualRevenue'NonNullableCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fiscal_year_end" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableAnnualRevenue'NonNullableFiscalYearEnd obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountBusinessProfile'NonNullableAnnualRevenue'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountBusinessProfile'NonNullableAnnualRevenue'NonNullable" (\obj -> ((GHC.Base.pure AccountBusinessProfile'NonNullableAnnualRevenue'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fiscal_year_end"))

-- | Create a new 'AccountBusinessProfile'NonNullableAnnualRevenue'NonNullable' with all required fields.
mkAccountBusinessProfile'NonNullableAnnualRevenue'NonNullable :: AccountBusinessProfile'NonNullableAnnualRevenue'NonNullable
mkAccountBusinessProfile'NonNullableAnnualRevenue'NonNullable =
  AccountBusinessProfile'NonNullableAnnualRevenue'NonNullable
    { accountBusinessProfile'NonNullableAnnualRevenue'NonNullableAmount = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableAnnualRevenue'NonNullableCurrency = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableAnnualRevenue'NonNullableFiscalYearEnd = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.account.properties.business_profile.anyOf.properties.minority_owned_business_designation.items@ in the specification.
data AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"lgbtqi_owned_business"@
    AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumLgbtqiOwnedBusiness
  | -- | Represents the JSON value @"minority_owned_business"@
    AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumMinorityOwnedBusiness
  | -- | Represents the JSON value @"none_of_these_apply"@
    AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumNoneOfTheseApply
  | -- | Represents the JSON value @"prefer_not_to_answer"@
    AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumPreferNotToAnswer
  | -- | Represents the JSON value @"women_owned_business"@
    AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumWomenOwnedBusiness
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullable where
  toJSON (AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableOther val) = val
  toJSON (AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumLgbtqiOwnedBusiness) = "lgbtqi_owned_business"
  toJSON (AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumMinorityOwnedBusiness) = "minority_owned_business"
  toJSON (AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumNoneOfTheseApply) = "none_of_these_apply"
  toJSON (AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumPreferNotToAnswer) = "prefer_not_to_answer"
  toJSON (AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumWomenOwnedBusiness) = "women_owned_business"

instance Data.Aeson.Types.FromJSON.FromJSON AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "lgbtqi_owned_business" -> AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumLgbtqiOwnedBusiness
          | val GHC.Classes.== "minority_owned_business" -> AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumMinorityOwnedBusiness
          | val GHC.Classes.== "none_of_these_apply" -> AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumNoneOfTheseApply
          | val GHC.Classes.== "prefer_not_to_answer" -> AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumPreferNotToAnswer
          | val GHC.Classes.== "women_owned_business" -> AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableEnumWomenOwnedBusiness
          | GHC.Base.otherwise -> AccountBusinessProfile'NonNullableMinorityOwnedBusinessDesignation'NonNullableOther val
      )

-- | Defines the object schema located at @components.schemas.account.properties.business_profile.anyOf.properties.support_address.anyOf@ in the specification.
--
-- A publicly available mailing address for sending support issues to.
data AccountBusinessProfile'NonNullableSupportAddress'NonNullable = AccountBusinessProfile'NonNullableSupportAddress'NonNullable
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBusinessProfile'NonNullableSupportAddress'NonNullableCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBusinessProfile'NonNullableSupportAddress'NonNullableCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBusinessProfile'NonNullableSupportAddress'NonNullableLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBusinessProfile'NonNullableSupportAddress'NonNullableLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBusinessProfile'NonNullableSupportAddress'NonNullablePostalCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBusinessProfile'NonNullableSupportAddress'NonNullableState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountBusinessProfile'NonNullableSupportAddress'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress'NonNullableState obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (accountBusinessProfile'NonNullableSupportAddress'NonNullableState obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountBusinessProfile'NonNullableSupportAddress'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountBusinessProfile'NonNullableSupportAddress'NonNullable" (\obj -> (((((GHC.Base.pure AccountBusinessProfile'NonNullableSupportAddress'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'AccountBusinessProfile'NonNullableSupportAddress'NonNullable' with all required fields.
mkAccountBusinessProfile'NonNullableSupportAddress'NonNullable :: AccountBusinessProfile'NonNullableSupportAddress'NonNullable
mkAccountBusinessProfile'NonNullableSupportAddress'NonNullable =
  AccountBusinessProfile'NonNullableSupportAddress'NonNullable
    { accountBusinessProfile'NonNullableSupportAddress'NonNullableCity = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableSupportAddress'NonNullableCountry = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableSupportAddress'NonNullableLine1 = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableSupportAddress'NonNullableLine2 = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableSupportAddress'NonNullablePostalCode = GHC.Maybe.Nothing,
      accountBusinessProfile'NonNullableSupportAddress'NonNullableState = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.account.properties.business_type@ in the specification.
--
-- The business type.
data AccountBusinessType'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountBusinessType'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountBusinessType'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"company"@
    AccountBusinessType'NonNullableEnumCompany
  | -- | Represents the JSON value @"government_entity"@
    AccountBusinessType'NonNullableEnumGovernmentEntity
  | -- | Represents the JSON value @"individual"@
    AccountBusinessType'NonNullableEnumIndividual
  | -- | Represents the JSON value @"non_profit"@
    AccountBusinessType'NonNullableEnumNonProfit
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountBusinessType'NonNullable where
  toJSON (AccountBusinessType'NonNullableOther val) = val
  toJSON (AccountBusinessType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountBusinessType'NonNullableEnumCompany) = "company"
  toJSON (AccountBusinessType'NonNullableEnumGovernmentEntity) = "government_entity"
  toJSON (AccountBusinessType'NonNullableEnumIndividual) = "individual"
  toJSON (AccountBusinessType'NonNullableEnumNonProfit) = "non_profit"

instance Data.Aeson.Types.FromJSON.FromJSON AccountBusinessType'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "company" -> AccountBusinessType'NonNullableEnumCompany
          | val GHC.Classes.== "government_entity" -> AccountBusinessType'NonNullableEnumGovernmentEntity
          | val GHC.Classes.== "individual" -> AccountBusinessType'NonNullableEnumIndividual
          | val GHC.Classes.== "non_profit" -> AccountBusinessType'NonNullableEnumNonProfit
          | GHC.Base.otherwise -> AccountBusinessType'NonNullableOther val
      )

-- | Defines the object schema located at @components.schemas.account.properties.external_accounts@ in the specification.
--
-- External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where \`controller[is_controller]\` is true.
data AccountExternalAccounts' = AccountExternalAccounts'
  { -- | data: The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
    accountExternalAccounts'Data :: [AccountExternalAccounts'Data'],
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    accountExternalAccounts'HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountExternalAccounts' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= accountExternalAccounts'Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= accountExternalAccounts'HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= accountExternalAccounts'Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= accountExternalAccounts'Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= accountExternalAccounts'HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= accountExternalAccounts'Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalAccounts' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountExternalAccounts'" (\obj -> ((GHC.Base.pure AccountExternalAccounts' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'AccountExternalAccounts'' with all required fields.
mkAccountExternalAccounts' ::
  -- | 'accountExternalAccounts'Data'
  [AccountExternalAccounts'Data'] ->
  -- | 'accountExternalAccounts'HasMore'
  GHC.Types.Bool ->
  -- | 'accountExternalAccounts'Url'
  Data.Text.Internal.Text ->
  AccountExternalAccounts'
mkAccountExternalAccounts' accountExternalAccounts'Data accountExternalAccounts'HasMore accountExternalAccounts'Url =
  AccountExternalAccounts'
    { accountExternalAccounts'Data = accountExternalAccounts'Data,
      accountExternalAccounts'HasMore = accountExternalAccounts'HasMore,
      accountExternalAccounts'Url = accountExternalAccounts'Url
    }

-- | Defines the object schema located at @components.schemas.account.properties.external_accounts.properties.data.items.anyOf@ in the specification.
data AccountExternalAccounts'Data' = AccountExternalAccounts'Data'
  { -- | account: The account this bank account belongs to. Only applicable on Accounts (not customers or recipients) This property is only available when returned as an [External Account](\/api\/external_account_bank_accounts\/object) where [controller.is_controller](\/api\/accounts\/object\#account_object-controller-is_controller) is \`true\`.
    accountExternalAccounts'Data'Account :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountExternalAccounts'Data'Account'NonNullableVariants)),
    -- | account_holder_name: The name of the person or business that owns the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'AccountHolderName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | account_holder_type: The type of entity that holds the account. This can be either \`individual\` or \`company\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'AccountHolderType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | account_type: The bank account type. This can only be \`checking\` or \`savings\` in most countries. In Japan, this can only be \`futsu\` or \`toza\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'AccountType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_city: City\/District\/Suburb\/Town\/Village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'AddressCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_country: Billing address country, if provided when creating card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'AddressCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line1: Address line 1 (Street address\/PO Box\/Company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'AddressLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line1_check: If \`address_line1\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'AddressLine1Check :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line2: Address line 2 (Apartment\/Suite\/Unit\/Building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'AddressLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_state: State\/County\/Province\/Region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'AddressState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_zip: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'AddressZip :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_zip_check: If \`address_zip\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'AddressZipCheck :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | allow_redisplay: This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
    accountExternalAccounts'Data'AllowRedisplay :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountExternalAccounts'Data'AllowRedisplay'NonNullable)),
    -- | available_payout_methods: A set of available payout methods for this bank account. Only values from this set should be passed as the \`method\` when creating a payout.
    accountExternalAccounts'Data'AvailablePayoutMethods :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullable])),
    -- | bank_name: Name of the bank associated with the routing number (e.g., \`WELLS FARGO\`).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'BankName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | brand: Card brand. Can be \`American Express\`, \`Diners Club\`, \`Discover\`, \`Eftpos Australia\`, \`Girocard\`, \`JCB\`, \`MasterCard\`, \`UnionPay\`, \`Visa\`, or \`Unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'Brand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter ISO code representing the country the bank account is located in.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/payouts) paid out to the bank account.
    accountExternalAccounts'Data'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | customer: The ID of the customer that the bank account is associated with.
    accountExternalAccounts'Data'Customer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountExternalAccounts'Data'Customer'NonNullableVariants)),
    -- | cvc_check: If a CVC was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`. A result of unchecked indicates that CVC was provided but hasn\'t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https:\/\/support.stripe.com\/questions\/check-if-a-card-is-valid-without-a-charge).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'CvcCheck :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | default_for_currency: Whether this bank account is the default external account for its currency.
    accountExternalAccounts'Data'DefaultForCurrency :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Bool)),
    -- | dynamic_last4: (For tokenized numbers only.) The last four digits of the device account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'DynamicLast4 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | exp_month: Two-digit number representing the card\'s expiration month.
    accountExternalAccounts'Data'ExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | exp_year: Four-digit number representing the card\'s expiration year.
    accountExternalAccounts'Data'ExpYear :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'Fingerprint :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'Funding :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | future_requirements: Information about the [upcoming new requirements for the bank account](https:\/\/stripe.com\/docs\/connect\/custom-accounts\/future-requirements), including what information needs to be collected, and by when.
    accountExternalAccounts'Data'FutureRequirements :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountExternalAccounts'Data'FutureRequirements'NonNullable)),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | iin: Issuer identification number of the card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'Iin :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last4: The last four digits of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'Last4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    accountExternalAccounts'Data'Metadata :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Aeson.Types.Internal.Object)),
    -- | name: Cardholder name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'Name :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | networks:
    accountExternalAccounts'Data'Networks :: (GHC.Maybe.Maybe TokenCardNetworks),
    -- | object: String representing the object\'s type. Objects of the same type share the same value.
    accountExternalAccounts'Data'Object :: (GHC.Maybe.Maybe AccountExternalAccounts'Data'Object'),
    -- | regulated_status: Status of a card based on the card issuer.
    accountExternalAccounts'Data'RegulatedStatus :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountExternalAccounts'Data'RegulatedStatus'NonNullable)),
    -- | requirements: Information about the requirements for the bank account, including what information needs to be collected.
    accountExternalAccounts'Data'Requirements :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable AccountExternalAccounts'Data'Requirements'NonNullable)),
    -- | routing_number: The routing transit number for the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'RoutingNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | status: For bank accounts, possible values are \`new\`, \`validated\`, \`verified\`, \`verification_failed\`, or \`errored\`. A bank account that hasn\'t had any activity or validation performed is \`new\`. If Stripe can determine that the bank account exists, its status will be \`validated\`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be \`verified\`. If the verification failed for any reason, such as microdeposit failure, the status will be \`verification_failed\`. If a payout sent to this bank account fails, we\'ll set the status to \`errored\` and will not continue to send [scheduled payouts](https:\/\/stripe.com\/docs\/payouts\#payout-schedule) until the bank details are updated.
    --
    -- For external accounts, possible values are \`new\`, \`errored\` and \`verification_failed\`. If a payout fails, the status is set to \`errored\` and scheduled payouts are stopped until account details are updated. In the US and India, if we can\'t [verify the owner of the bank account](https:\/\/support.stripe.com\/questions\/bank-account-ownership-verification), we\'ll set the status to \`verification_failed\`. Other validations aren\'t run against external accounts because they\'re only used for payouts. This means the other statuses don\'t apply.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'Status :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | tokenization_method: If the card number is tokenized, this is the method that was used. Can be \`android_pay\` (includes Google Pay), \`apple_pay\`, \`masterpass\`, \`visa_checkout\`, or null.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountExternalAccounts'Data'TokenizationMethod :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountExternalAccounts'Data' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1_check" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressLine1Check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip_check" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressZipCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_redisplay" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AllowRedisplay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_payout_methods" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AvailablePayoutMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'BankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Brand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Customer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc_check" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'CvcCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_for_currency" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'DefaultForCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dynamic_last4" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'DynamicLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_month" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'ExpMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_year" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'ExpYear obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Fingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Funding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'FutureRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("iin" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Iin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Last4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("networks" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Networks obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Object obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("regulated_status" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'RegulatedStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Requirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'RoutingNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Status obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tokenization_method" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'TokenizationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1_check" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressLine1Check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip_check" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AddressZipCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_redisplay" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AllowRedisplay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_payout_methods" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'AvailablePayoutMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'BankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Brand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Customer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc_check" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'CvcCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_for_currency" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'DefaultForCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dynamic_last4" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'DynamicLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_month" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'ExpMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_year" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'ExpYear obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Fingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Funding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'FutureRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("iin" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Iin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Last4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("networks" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Networks obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Object obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("regulated_status" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'RegulatedStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Requirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'RoutingNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Status obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tokenization_method" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'TokenizationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalAccounts'Data' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountExternalAccounts'Data'" (\obj -> ((((((((((((((((((((((((((((((((((((((GHC.Base.pure AccountExternalAccounts'Data' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_redisplay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "future_requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "iin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "networks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "regulated_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tokenization_method"))

-- | Create a new 'AccountExternalAccounts'Data'' with all required fields.
mkAccountExternalAccounts'Data' :: AccountExternalAccounts'Data'
mkAccountExternalAccounts'Data' =
  AccountExternalAccounts'Data'
    { accountExternalAccounts'Data'Account = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'AccountHolderName = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'AccountHolderType = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'AccountType = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'AddressCity = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'AddressCountry = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'AddressLine1 = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'AddressLine1Check = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'AddressLine2 = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'AddressState = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'AddressZip = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'AddressZipCheck = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'AllowRedisplay = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'AvailablePayoutMethods = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'BankName = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Brand = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Country = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Currency = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Customer = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'CvcCheck = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'DefaultForCurrency = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'DynamicLast4 = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'ExpMonth = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'ExpYear = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Fingerprint = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Funding = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'FutureRequirements = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Id = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Iin = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Last4 = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Metadata = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Name = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Networks = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Object = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'RegulatedStatus = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Requirements = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'RoutingNumber = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Status = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'TokenizationMethod = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.account.properties.external_accounts.properties.data.items.anyOf.properties.account.anyOf@ in the specification.
--
-- The account this bank account belongs to. Only applicable on Accounts (not customers or recipients) This property is only available when returned as an [External Account](\/api\/external_account_bank_accounts\/object) where [controller.is_controller](\/api\/accounts\/object\#account_object-controller-is_controller) is \`true\`.
data AccountExternalAccounts'Data'Account'NonNullableVariants
  = AccountExternalAccounts'Data'Account'NonNullableText Data.Text.Internal.Text
  | AccountExternalAccounts'Data'Account'NonNullableAccount Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountExternalAccounts'Data'Account'NonNullableVariants where
  toJSON (AccountExternalAccounts'Data'Account'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (AccountExternalAccounts'Data'Account'NonNullableAccount a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalAccounts'Data'Account'NonNullableVariants where
  parseJSON val = case (AccountExternalAccounts'Data'Account'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((AccountExternalAccounts'Data'Account'NonNullableAccount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.account.properties.external_accounts.properties.data.items.anyOf.properties.allow_redisplay@ in the specification.
--
-- This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
data AccountExternalAccounts'Data'AllowRedisplay'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountExternalAccounts'Data'AllowRedisplay'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountExternalAccounts'Data'AllowRedisplay'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"always"@
    AccountExternalAccounts'Data'AllowRedisplay'NonNullableEnumAlways
  | -- | Represents the JSON value @"limited"@
    AccountExternalAccounts'Data'AllowRedisplay'NonNullableEnumLimited
  | -- | Represents the JSON value @"unspecified"@
    AccountExternalAccounts'Data'AllowRedisplay'NonNullableEnumUnspecified
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountExternalAccounts'Data'AllowRedisplay'NonNullable where
  toJSON (AccountExternalAccounts'Data'AllowRedisplay'NonNullableOther val) = val
  toJSON (AccountExternalAccounts'Data'AllowRedisplay'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountExternalAccounts'Data'AllowRedisplay'NonNullableEnumAlways) = "always"
  toJSON (AccountExternalAccounts'Data'AllowRedisplay'NonNullableEnumLimited) = "limited"
  toJSON (AccountExternalAccounts'Data'AllowRedisplay'NonNullableEnumUnspecified) = "unspecified"

instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalAccounts'Data'AllowRedisplay'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "always" -> AccountExternalAccounts'Data'AllowRedisplay'NonNullableEnumAlways
          | val GHC.Classes.== "limited" -> AccountExternalAccounts'Data'AllowRedisplay'NonNullableEnumLimited
          | val GHC.Classes.== "unspecified" -> AccountExternalAccounts'Data'AllowRedisplay'NonNullableEnumUnspecified
          | GHC.Base.otherwise -> AccountExternalAccounts'Data'AllowRedisplay'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.account.properties.external_accounts.properties.data.items.anyOf.properties.available_payout_methods.items@ in the specification.
data AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"instant"@
    AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullableEnumInstant
  | -- | Represents the JSON value @"standard"@
    AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullableEnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullable where
  toJSON (AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullableOther val) = val
  toJSON (AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullableEnumInstant) = "instant"
  toJSON (AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullableEnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "instant" -> AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullableEnumInstant
          | val GHC.Classes.== "standard" -> AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullableEnumStandard
          | GHC.Base.otherwise -> AccountExternalAccounts'Data'AvailablePayoutMethods'NonNullableOther val
      )

-- | Defines the oneOf schema located at @components.schemas.account.properties.external_accounts.properties.data.items.anyOf.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer that the bank account is associated with.
data AccountExternalAccounts'Data'Customer'NonNullableVariants
  = AccountExternalAccounts'Data'Customer'NonNullableText Data.Text.Internal.Text
  | AccountExternalAccounts'Data'Customer'NonNullableCustomer Customer
  | AccountExternalAccounts'Data'Customer'NonNullableDeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountExternalAccounts'Data'Customer'NonNullableVariants where
  toJSON (AccountExternalAccounts'Data'Customer'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (AccountExternalAccounts'Data'Customer'NonNullableCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (AccountExternalAccounts'Data'Customer'NonNullableDeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalAccounts'Data'Customer'NonNullableVariants where
  parseJSON val = case (AccountExternalAccounts'Data'Customer'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((AccountExternalAccounts'Data'Customer'NonNullableCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((AccountExternalAccounts'Data'Customer'NonNullableDeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.account.properties.external_accounts.properties.data.items.anyOf.properties.future_requirements.anyOf@ in the specification.
--
-- Information about the [upcoming new requirements for the bank account](https:\\\/\\\/stripe.com\\\/docs\\\/connect\\\/custom-accounts\\\/future-requirements), including what information needs to be collected, and by when.
data AccountExternalAccounts'Data'FutureRequirements'NonNullable = AccountExternalAccounts'Data'FutureRequirements'NonNullable
  { -- | currently_due: Fields that need to be collected to keep the external account enabled. If not collected by \`current_deadline\`, these fields appear in \`past_due\` as well, and the account is disabled.
    accountExternalAccounts'Data'FutureRequirements'NonNullableCurrentlyDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text])),
    -- | errors: Fields that are \`currently_due\` and need to be collected again because validation or verification failed.
    accountExternalAccounts'Data'FutureRequirements'NonNullableErrors :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [AccountRequirementsError])),
    -- | past_due: Fields that weren\'t collected by \`current_deadline\`. These fields need to be collected to enable the external account.
    accountExternalAccounts'Data'FutureRequirements'NonNullablePastDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text])),
    -- | pending_verification: Fields that might become required depending on the results of verification or review. It\'s an empty array unless an asynchronous verification is pending. If verification fails, these fields move to \`eventually_due\`, \`currently_due\`, or \`past_due\`. Fields might appear in \`eventually_due\`, \`currently_due\`, or \`past_due\` and in \`pending_verification\` if verification fails but another verification is still pending.
    accountExternalAccounts'Data'FutureRequirements'NonNullablePendingVerification :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountExternalAccounts'Data'FutureRequirements'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'FutureRequirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'FutureRequirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'FutureRequirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'FutureRequirements'NonNullablePendingVerification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'FutureRequirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'FutureRequirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'FutureRequirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'FutureRequirements'NonNullablePendingVerification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalAccounts'Data'FutureRequirements'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountExternalAccounts'Data'FutureRequirements'NonNullable" (\obj -> (((GHC.Base.pure AccountExternalAccounts'Data'FutureRequirements'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pending_verification"))

-- | Create a new 'AccountExternalAccounts'Data'FutureRequirements'NonNullable' with all required fields.
mkAccountExternalAccounts'Data'FutureRequirements'NonNullable :: AccountExternalAccounts'Data'FutureRequirements'NonNullable
mkAccountExternalAccounts'Data'FutureRequirements'NonNullable =
  AccountExternalAccounts'Data'FutureRequirements'NonNullable
    { accountExternalAccounts'Data'FutureRequirements'NonNullableCurrentlyDue = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'FutureRequirements'NonNullableErrors = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'FutureRequirements'NonNullablePastDue = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'FutureRequirements'NonNullablePendingVerification = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.account.properties.external_accounts.properties.data.items.anyOf.properties.object@ in the specification.
--
-- String representing the object\'s type. Objects of the same type share the same value.
data AccountExternalAccounts'Data'Object'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountExternalAccounts'Data'Object'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountExternalAccounts'Data'Object'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"bank_account"@
    AccountExternalAccounts'Data'Object'EnumBankAccount
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountExternalAccounts'Data'Object' where
  toJSON (AccountExternalAccounts'Data'Object'Other val) = val
  toJSON (AccountExternalAccounts'Data'Object'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountExternalAccounts'Data'Object'EnumBankAccount) = "bank_account"

instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalAccounts'Data'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "bank_account" -> AccountExternalAccounts'Data'Object'EnumBankAccount
          | GHC.Base.otherwise -> AccountExternalAccounts'Data'Object'Other val
      )

-- | Defines the enum schema located at @components.schemas.account.properties.external_accounts.properties.data.items.anyOf.properties.regulated_status@ in the specification.
--
-- Status of a card based on the card issuer.
data AccountExternalAccounts'Data'RegulatedStatus'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountExternalAccounts'Data'RegulatedStatus'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountExternalAccounts'Data'RegulatedStatus'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"regulated"@
    AccountExternalAccounts'Data'RegulatedStatus'NonNullableEnumRegulated
  | -- | Represents the JSON value @"unregulated"@
    AccountExternalAccounts'Data'RegulatedStatus'NonNullableEnumUnregulated
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountExternalAccounts'Data'RegulatedStatus'NonNullable where
  toJSON (AccountExternalAccounts'Data'RegulatedStatus'NonNullableOther val) = val
  toJSON (AccountExternalAccounts'Data'RegulatedStatus'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountExternalAccounts'Data'RegulatedStatus'NonNullableEnumRegulated) = "regulated"
  toJSON (AccountExternalAccounts'Data'RegulatedStatus'NonNullableEnumUnregulated) = "unregulated"

instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalAccounts'Data'RegulatedStatus'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "regulated" -> AccountExternalAccounts'Data'RegulatedStatus'NonNullableEnumRegulated
          | val GHC.Classes.== "unregulated" -> AccountExternalAccounts'Data'RegulatedStatus'NonNullableEnumUnregulated
          | GHC.Base.otherwise -> AccountExternalAccounts'Data'RegulatedStatus'NonNullableOther val
      )

-- | Defines the object schema located at @components.schemas.account.properties.external_accounts.properties.data.items.anyOf.properties.requirements.anyOf@ in the specification.
--
-- Information about the requirements for the bank account, including what information needs to be collected.
data AccountExternalAccounts'Data'Requirements'NonNullable = AccountExternalAccounts'Data'Requirements'NonNullable
  { -- | currently_due: Fields that need to be collected to keep the external account enabled. If not collected by \`current_deadline\`, these fields appear in \`past_due\` as well, and the account is disabled.
    accountExternalAccounts'Data'Requirements'NonNullableCurrentlyDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text])),
    -- | errors: Fields that are \`currently_due\` and need to be collected again because validation or verification failed.
    accountExternalAccounts'Data'Requirements'NonNullableErrors :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [AccountRequirementsError])),
    -- | past_due: Fields that weren\'t collected by \`current_deadline\`. These fields need to be collected to enable the external account.
    accountExternalAccounts'Data'Requirements'NonNullablePastDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text])),
    -- | pending_verification: Fields that might become required depending on the results of verification or review. It\'s an empty array unless an asynchronous verification is pending. If verification fails, these fields move to \`eventually_due\`, \`currently_due\`, or \`past_due\`. Fields might appear in \`eventually_due\`, \`currently_due\`, or \`past_due\` and in \`pending_verification\` if verification fails but another verification is still pending.
    accountExternalAccounts'Data'Requirements'NonNullablePendingVerification :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountExternalAccounts'Data'Requirements'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Requirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Requirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Requirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Requirements'NonNullablePendingVerification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Requirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Requirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Requirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (accountExternalAccounts'Data'Requirements'NonNullablePendingVerification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalAccounts'Data'Requirements'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountExternalAccounts'Data'Requirements'NonNullable" (\obj -> (((GHC.Base.pure AccountExternalAccounts'Data'Requirements'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pending_verification"))

-- | Create a new 'AccountExternalAccounts'Data'Requirements'NonNullable' with all required fields.
mkAccountExternalAccounts'Data'Requirements'NonNullable :: AccountExternalAccounts'Data'Requirements'NonNullable
mkAccountExternalAccounts'Data'Requirements'NonNullable =
  AccountExternalAccounts'Data'Requirements'NonNullable
    { accountExternalAccounts'Data'Requirements'NonNullableCurrentlyDue = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Requirements'NonNullableErrors = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Requirements'NonNullablePastDue = GHC.Maybe.Nothing,
      accountExternalAccounts'Data'Requirements'NonNullablePendingVerification = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.account.properties.groups.anyOf@ in the specification.
--
-- The groups associated with the account.
data AccountGroups'NonNullable = AccountGroups'NonNullable
  { -- | payments_pricing: The group the account is in to determine their payments pricing, and null if the account is on customized pricing. [See the Platform pricing tool documentation](https:\/\/stripe.com\/docs\/connect\/platform-pricing-tools) for details.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountGroups'NonNullablePaymentsPricing :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountGroups'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payments_pricing" Data.Aeson.Types.ToJSON..=)) (accountGroups'NonNullablePaymentsPricing obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payments_pricing" Data.Aeson.Types.ToJSON..=)) (accountGroups'NonNullablePaymentsPricing obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountGroups'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountGroups'NonNullable" (\obj -> GHC.Base.pure AccountGroups'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payments_pricing"))

-- | Create a new 'AccountGroups'NonNullable' with all required fields.
mkAccountGroups'NonNullable :: AccountGroups'NonNullable
mkAccountGroups'NonNullable = AccountGroups'NonNullable {accountGroups'NonNullablePaymentsPricing = GHC.Maybe.Nothing}

-- | Defines the object schema located at @components.schemas.account.properties.settings.anyOf@ in the specification.
--
-- Options for customizing how the account functions within Stripe.
data AccountSettings'NonNullable = AccountSettings'NonNullable
  { -- | bacs_debit_payments:
    accountSettings'NonNullableBacsDebitPayments :: (GHC.Maybe.Maybe AccountBacsDebitPaymentsSettings),
    -- | branding:
    accountSettings'NonNullableBranding :: (GHC.Maybe.Maybe AccountBrandingSettings),
    -- | card_issuing:
    accountSettings'NonNullableCardIssuing :: (GHC.Maybe.Maybe AccountCardIssuingSettings),
    -- | card_payments:
    accountSettings'NonNullableCardPayments :: (GHC.Maybe.Maybe AccountCardPaymentsSettings),
    -- | dashboard:
    accountSettings'NonNullableDashboard :: (GHC.Maybe.Maybe AccountDashboardSettings),
    -- | invoices:
    accountSettings'NonNullableInvoices :: (GHC.Maybe.Maybe AccountInvoicesSettings),
    -- | payments:
    accountSettings'NonNullablePayments :: (GHC.Maybe.Maybe AccountPaymentsSettings),
    -- | payouts:
    accountSettings'NonNullablePayouts :: (GHC.Maybe.Maybe AccountPayoutSettings),
    -- | sepa_debit_payments:
    accountSettings'NonNullableSepaDebitPayments :: (GHC.Maybe.Maybe AccountSepaDebitPaymentsSettings),
    -- | treasury:
    accountSettings'NonNullableTreasury :: (GHC.Maybe.Maybe AccountTreasurySettings)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountSettings'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bacs_debit_payments" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableBacsDebitPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableBranding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_issuing" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableCardIssuing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_payments" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableCardPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dashboard" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableDashboard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoices" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableInvoices obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payments" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullablePayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payouts" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullablePayouts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit_payments" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableSepaDebitPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("treasury" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableTreasury obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bacs_debit_payments" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableBacsDebitPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableBranding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_issuing" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableCardIssuing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_payments" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableCardPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dashboard" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableDashboard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoices" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableInvoices obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payments" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullablePayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payouts" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullablePayouts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit_payments" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableSepaDebitPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("treasury" Data.Aeson.Types.ToJSON..=)) (accountSettings'NonNullableTreasury obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountSettings'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountSettings'NonNullable" (\obj -> (((((((((GHC.Base.pure AccountSettings'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bacs_debit_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "branding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_issuing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dashboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "invoices")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payouts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sepa_debit_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "treasury"))

-- | Create a new 'AccountSettings'NonNullable' with all required fields.
mkAccountSettings'NonNullable :: AccountSettings'NonNullable
mkAccountSettings'NonNullable =
  AccountSettings'NonNullable
    { accountSettings'NonNullableBacsDebitPayments = GHC.Maybe.Nothing,
      accountSettings'NonNullableBranding = GHC.Maybe.Nothing,
      accountSettings'NonNullableCardIssuing = GHC.Maybe.Nothing,
      accountSettings'NonNullableCardPayments = GHC.Maybe.Nothing,
      accountSettings'NonNullableDashboard = GHC.Maybe.Nothing,
      accountSettings'NonNullableInvoices = GHC.Maybe.Nothing,
      accountSettings'NonNullablePayments = GHC.Maybe.Nothing,
      accountSettings'NonNullablePayouts = GHC.Maybe.Nothing,
      accountSettings'NonNullableSepaDebitPayments = GHC.Maybe.Nothing,
      accountSettings'NonNullableTreasury = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.account.properties.type@ in the specification.
--
-- The Stripe account type. Can be \`standard\`, \`express\`, \`custom\`, or \`none\`.
data AccountType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"custom"@
    AccountType'EnumCustom
  | -- | Represents the JSON value @"express"@
    AccountType'EnumExpress
  | -- | Represents the JSON value @"none"@
    AccountType'EnumNone
  | -- | Represents the JSON value @"standard"@
    AccountType'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountType' where
  toJSON (AccountType'Other val) = val
  toJSON (AccountType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountType'EnumCustom) = "custom"
  toJSON (AccountType'EnumExpress) = "express"
  toJSON (AccountType'EnumNone) = "none"
  toJSON (AccountType'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON AccountType' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "custom" -> AccountType'EnumCustom
          | val GHC.Classes.== "express" -> AccountType'EnumExpress
          | val GHC.Classes.== "none" -> AccountType'EnumNone
          | val GHC.Classes.== "standard" -> AccountType'EnumStandard
          | GHC.Base.otherwise -> AccountType'Other val
      )
