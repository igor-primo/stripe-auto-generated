{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema BillingCreditGrantsResourceAmount
module StripeAPI.Types.BillingCreditGrantsResourceAmount where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.BillingCreditGrantsResourceMonetaryAmount
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.billing_credit_grants_resource_amount@ in the specification.
data BillingCreditGrantsResourceAmount = BillingCreditGrantsResourceAmount
  { -- | monetary: The monetary amount.
    billingCreditGrantsResourceAmountMonetary :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable BillingCreditGrantsResourceAmountMonetary'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON BillingCreditGrantsResourceAmount where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("monetary" Data.Aeson.Types.ToJSON..=)) (billingCreditGrantsResourceAmountMonetary obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "monetary"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("monetary" Data.Aeson.Types.ToJSON..=)) (billingCreditGrantsResourceAmountMonetary obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "monetary"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON BillingCreditGrantsResourceAmount where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "BillingCreditGrantsResourceAmount" (\obj -> GHC.Base.pure BillingCreditGrantsResourceAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "monetary"))

-- | Create a new 'BillingCreditGrantsResourceAmount' with all required fields.
mkBillingCreditGrantsResourceAmount :: BillingCreditGrantsResourceAmount
mkBillingCreditGrantsResourceAmount = BillingCreditGrantsResourceAmount {billingCreditGrantsResourceAmountMonetary = GHC.Maybe.Nothing}

-- | Defines the object schema located at @components.schemas.billing_credit_grants_resource_amount.properties.monetary.anyOf@ in the specification.
--
-- The monetary amount.
data BillingCreditGrantsResourceAmountMonetary'NonNullable = BillingCreditGrantsResourceAmountMonetary'NonNullable
  { -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    billingCreditGrantsResourceAmountMonetary'NonNullableCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | value: A positive integer representing the amount.
    billingCreditGrantsResourceAmountMonetary'NonNullableValue :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON BillingCreditGrantsResourceAmountMonetary'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (billingCreditGrantsResourceAmountMonetary'NonNullableCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("value" Data.Aeson.Types.ToJSON..=)) (billingCreditGrantsResourceAmountMonetary'NonNullableValue obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (billingCreditGrantsResourceAmountMonetary'NonNullableCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("value" Data.Aeson.Types.ToJSON..=)) (billingCreditGrantsResourceAmountMonetary'NonNullableValue obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON BillingCreditGrantsResourceAmountMonetary'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "BillingCreditGrantsResourceAmountMonetary'NonNullable" (\obj -> (GHC.Base.pure BillingCreditGrantsResourceAmountMonetary'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "value"))

-- | Create a new 'BillingCreditGrantsResourceAmountMonetary'NonNullable' with all required fields.
mkBillingCreditGrantsResourceAmountMonetary'NonNullable :: BillingCreditGrantsResourceAmountMonetary'NonNullable
mkBillingCreditGrantsResourceAmountMonetary'NonNullable =
  BillingCreditGrantsResourceAmountMonetary'NonNullable
    { billingCreditGrantsResourceAmountMonetary'NonNullableCurrency = GHC.Maybe.Nothing,
      billingCreditGrantsResourceAmountMonetary'NonNullableValue = GHC.Maybe.Nothing
    }
