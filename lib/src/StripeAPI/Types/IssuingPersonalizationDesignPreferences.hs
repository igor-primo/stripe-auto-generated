{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingPersonalizationDesignPreferences
module StripeAPI.Types.IssuingPersonalizationDesignPreferences where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_personalization_design_preferences@ in the specification.
data IssuingPersonalizationDesignPreferences = IssuingPersonalizationDesignPreferences
  { -- | is_default: Whether we use this personalization design to create cards when one isn\'t specified. A connected account uses the Connect platform\'s default design if no personalization design is set as the default design.
    issuingPersonalizationDesignPreferencesIsDefault :: GHC.Types.Bool,
    -- | is_platform_default: Whether this personalization design is used to create cards when one is not specified and a default for this connected account does not exist.
    issuingPersonalizationDesignPreferencesIsPlatformDefault :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Bool))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingPersonalizationDesignPreferences where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["is_default" Data.Aeson.Types.ToJSON..= issuingPersonalizationDesignPreferencesIsDefault obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_platform_default" Data.Aeson.Types.ToJSON..=)) (issuingPersonalizationDesignPreferencesIsPlatformDefault obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["is_default" Data.Aeson.Types.ToJSON..= issuingPersonalizationDesignPreferencesIsDefault obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_platform_default" Data.Aeson.Types.ToJSON..=)) (issuingPersonalizationDesignPreferencesIsPlatformDefault obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingPersonalizationDesignPreferences where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingPersonalizationDesignPreferences" (\obj -> (GHC.Base.pure IssuingPersonalizationDesignPreferences GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_default")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_platform_default"))

-- | Create a new 'IssuingPersonalizationDesignPreferences' with all required fields.
mkIssuingPersonalizationDesignPreferences ::
  -- | 'issuingPersonalizationDesignPreferencesIsDefault'
  GHC.Types.Bool ->
  IssuingPersonalizationDesignPreferences
mkIssuingPersonalizationDesignPreferences issuingPersonalizationDesignPreferencesIsDefault =
  IssuingPersonalizationDesignPreferences
    { issuingPersonalizationDesignPreferencesIsDefault = issuingPersonalizationDesignPreferencesIsDefault,
      issuingPersonalizationDesignPreferencesIsPlatformDefault = GHC.Maybe.Nothing
    }
