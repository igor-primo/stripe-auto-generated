{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentIntentPaymentMethodOptionsBacsDebit
module StripeAPI.Types.PaymentIntentPaymentMethodOptionsBacsDebit where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsMandateOptionsBacsDebit
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_intent_payment_method_options_bacs_debit@ in the specification.
data PaymentIntentPaymentMethodOptionsBacsDebit = PaymentIntentPaymentMethodOptionsBacsDebit
  { -- | mandate_options:
    paymentIntentPaymentMethodOptionsBacsDebitMandateOptions :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMandateOptionsBacsDebit),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'),
    -- | target_date: Controls when Stripe will attempt to debit the funds from the customer\'s account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptionsBacsDebitTargetDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBacsDebit where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebitMandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebitTargetDate obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebitMandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptionsBacsDebitTargetDate obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBacsDebit where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsBacsDebit" (\obj -> ((GHC.Base.pure PaymentIntentPaymentMethodOptionsBacsDebit GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target_date"))

-- | Create a new 'PaymentIntentPaymentMethodOptionsBacsDebit' with all required fields.
mkPaymentIntentPaymentMethodOptionsBacsDebit :: PaymentIntentPaymentMethodOptionsBacsDebit
mkPaymentIntentPaymentMethodOptionsBacsDebit =
  PaymentIntentPaymentMethodOptionsBacsDebit
    { paymentIntentPaymentMethodOptionsBacsDebitMandateOptions = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptionsBacsDebitTargetDate = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent_payment_method_options_bacs_debit.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsBacsDebitSetupFutureUsage'Other val
      )
