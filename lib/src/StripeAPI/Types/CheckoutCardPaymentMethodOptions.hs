{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CheckoutCardPaymentMethodOptions
module StripeAPI.Types.CheckoutCardPaymentMethodOptions where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.CheckoutCardInstallmentsOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentPagesPrivateCardPaymentMethodOptionsResourceRestrictions
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.checkout_card_payment_method_options@ in the specification.
data CheckoutCardPaymentMethodOptions = CheckoutCardPaymentMethodOptions
  { -- | installments:
    checkoutCardPaymentMethodOptionsInstallments :: (GHC.Maybe.Maybe CheckoutCardInstallmentsOptions),
    -- | request_extended_authorization: Request ability to [capture beyond the standard authorization validity window](\/payments\/extended-authorization) for this CheckoutSession.
    checkoutCardPaymentMethodOptionsRequestExtendedAuthorization :: (GHC.Maybe.Maybe CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization'),
    -- | request_incremental_authorization: Request ability to [increment the authorization](\/payments\/incremental-authorization) for this CheckoutSession.
    checkoutCardPaymentMethodOptionsRequestIncrementalAuthorization :: (GHC.Maybe.Maybe CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization'),
    -- | request_multicapture: Request ability to make [multiple captures](\/payments\/multicapture) for this CheckoutSession.
    checkoutCardPaymentMethodOptionsRequestMulticapture :: (GHC.Maybe.Maybe CheckoutCardPaymentMethodOptionsRequestMulticapture'),
    -- | request_overcapture: Request ability to [overcapture](\/payments\/overcapture) for this CheckoutSession.
    checkoutCardPaymentMethodOptionsRequestOvercapture :: (GHC.Maybe.Maybe CheckoutCardPaymentMethodOptionsRequestOvercapture'),
    -- | request_three_d_secure: We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https:\/\/stripe.com\/docs\/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to \`automatic\`. Read our guide on [manually requesting 3D Secure](https:\/\/stripe.com\/docs\/payments\/3d-secure\/authentication-flow\#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    checkoutCardPaymentMethodOptionsRequestThreeDSecure :: CheckoutCardPaymentMethodOptionsRequestThreeDSecure',
    -- | restrictions:
    checkoutCardPaymentMethodOptionsRestrictions :: (GHC.Maybe.Maybe PaymentPagesPrivateCardPaymentMethodOptionsResourceRestrictions),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    checkoutCardPaymentMethodOptionsSetupFutureUsage :: (GHC.Maybe.Maybe CheckoutCardPaymentMethodOptionsSetupFutureUsage'),
    -- | statement_descriptor_suffix_kana: Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKana :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | statement_descriptor_suffix_kanji: Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKanji :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CheckoutCardPaymentMethodOptions where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsInstallments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_extended_authorization" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsRequestExtendedAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsRequestIncrementalAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_multicapture" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsRequestMulticapture obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_overcapture" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsRequestOvercapture obj) : ["request_three_d_secure" Data.Aeson.Types.ToJSON..= checkoutCardPaymentMethodOptionsRequestThreeDSecure obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("restrictions" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsRestrictions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsSetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kana" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kanji" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKanji obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsInstallments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_extended_authorization" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsRequestExtendedAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsRequestIncrementalAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_multicapture" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsRequestMulticapture obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_overcapture" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsRequestOvercapture obj) : ["request_three_d_secure" Data.Aeson.Types.ToJSON..= checkoutCardPaymentMethodOptionsRequestThreeDSecure obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("restrictions" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsRestrictions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsSetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kana" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kanji" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKanji obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON CheckoutCardPaymentMethodOptions where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CheckoutCardPaymentMethodOptions" (\obj -> (((((((((GHC.Base.pure CheckoutCardPaymentMethodOptions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_extended_authorization")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_multicapture")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_overcapture")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "request_three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "restrictions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor_suffix_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor_suffix_kanji"))

-- | Create a new 'CheckoutCardPaymentMethodOptions' with all required fields.
mkCheckoutCardPaymentMethodOptions ::
  -- | 'checkoutCardPaymentMethodOptionsRequestThreeDSecure'
  CheckoutCardPaymentMethodOptionsRequestThreeDSecure' ->
  CheckoutCardPaymentMethodOptions
mkCheckoutCardPaymentMethodOptions checkoutCardPaymentMethodOptionsRequestThreeDSecure =
  CheckoutCardPaymentMethodOptions
    { checkoutCardPaymentMethodOptionsInstallments = GHC.Maybe.Nothing,
      checkoutCardPaymentMethodOptionsRequestExtendedAuthorization = GHC.Maybe.Nothing,
      checkoutCardPaymentMethodOptionsRequestIncrementalAuthorization = GHC.Maybe.Nothing,
      checkoutCardPaymentMethodOptionsRequestMulticapture = GHC.Maybe.Nothing,
      checkoutCardPaymentMethodOptionsRequestOvercapture = GHC.Maybe.Nothing,
      checkoutCardPaymentMethodOptionsRequestThreeDSecure = checkoutCardPaymentMethodOptionsRequestThreeDSecure,
      checkoutCardPaymentMethodOptionsRestrictions = GHC.Maybe.Nothing,
      checkoutCardPaymentMethodOptionsSetupFutureUsage = GHC.Maybe.Nothing,
      checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKana = GHC.Maybe.Nothing,
      checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKanji = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.checkout_card_payment_method_options.properties.request_extended_authorization@ in the specification.
--
-- Request ability to [capture beyond the standard authorization validity window](\/payments\/extended-authorization) for this CheckoutSession.
data CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"if_available"@
    CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization'EnumIfAvailable
  | -- | Represents the JSON value @"never"@
    CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization' where
  toJSON (CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization'Other val) = val
  toJSON (CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization'EnumIfAvailable) = "if_available"
  toJSON (CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "if_available" -> CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization'EnumIfAvailable
          | val GHC.Classes.== "never" -> CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization'EnumNever
          | GHC.Base.otherwise -> CheckoutCardPaymentMethodOptionsRequestExtendedAuthorization'Other val
      )

-- | Defines the enum schema located at @components.schemas.checkout_card_payment_method_options.properties.request_incremental_authorization@ in the specification.
--
-- Request ability to [increment the authorization](\/payments\/incremental-authorization) for this CheckoutSession.
data CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"if_available"@
    CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization'EnumIfAvailable
  | -- | Represents the JSON value @"never"@
    CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization' where
  toJSON (CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization'Other val) = val
  toJSON (CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization'EnumIfAvailable) = "if_available"
  toJSON (CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "if_available" -> CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization'EnumIfAvailable
          | val GHC.Classes.== "never" -> CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization'EnumNever
          | GHC.Base.otherwise -> CheckoutCardPaymentMethodOptionsRequestIncrementalAuthorization'Other val
      )

-- | Defines the enum schema located at @components.schemas.checkout_card_payment_method_options.properties.request_multicapture@ in the specification.
--
-- Request ability to make [multiple captures](\/payments\/multicapture) for this CheckoutSession.
data CheckoutCardPaymentMethodOptionsRequestMulticapture'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    CheckoutCardPaymentMethodOptionsRequestMulticapture'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    CheckoutCardPaymentMethodOptionsRequestMulticapture'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"if_available"@
    CheckoutCardPaymentMethodOptionsRequestMulticapture'EnumIfAvailable
  | -- | Represents the JSON value @"never"@
    CheckoutCardPaymentMethodOptionsRequestMulticapture'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CheckoutCardPaymentMethodOptionsRequestMulticapture' where
  toJSON (CheckoutCardPaymentMethodOptionsRequestMulticapture'Other val) = val
  toJSON (CheckoutCardPaymentMethodOptionsRequestMulticapture'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (CheckoutCardPaymentMethodOptionsRequestMulticapture'EnumIfAvailable) = "if_available"
  toJSON (CheckoutCardPaymentMethodOptionsRequestMulticapture'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON CheckoutCardPaymentMethodOptionsRequestMulticapture' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "if_available" -> CheckoutCardPaymentMethodOptionsRequestMulticapture'EnumIfAvailable
          | val GHC.Classes.== "never" -> CheckoutCardPaymentMethodOptionsRequestMulticapture'EnumNever
          | GHC.Base.otherwise -> CheckoutCardPaymentMethodOptionsRequestMulticapture'Other val
      )

-- | Defines the enum schema located at @components.schemas.checkout_card_payment_method_options.properties.request_overcapture@ in the specification.
--
-- Request ability to [overcapture](\/payments\/overcapture) for this CheckoutSession.
data CheckoutCardPaymentMethodOptionsRequestOvercapture'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    CheckoutCardPaymentMethodOptionsRequestOvercapture'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    CheckoutCardPaymentMethodOptionsRequestOvercapture'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"if_available"@
    CheckoutCardPaymentMethodOptionsRequestOvercapture'EnumIfAvailable
  | -- | Represents the JSON value @"never"@
    CheckoutCardPaymentMethodOptionsRequestOvercapture'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CheckoutCardPaymentMethodOptionsRequestOvercapture' where
  toJSON (CheckoutCardPaymentMethodOptionsRequestOvercapture'Other val) = val
  toJSON (CheckoutCardPaymentMethodOptionsRequestOvercapture'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (CheckoutCardPaymentMethodOptionsRequestOvercapture'EnumIfAvailable) = "if_available"
  toJSON (CheckoutCardPaymentMethodOptionsRequestOvercapture'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON CheckoutCardPaymentMethodOptionsRequestOvercapture' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "if_available" -> CheckoutCardPaymentMethodOptionsRequestOvercapture'EnumIfAvailable
          | val GHC.Classes.== "never" -> CheckoutCardPaymentMethodOptionsRequestOvercapture'EnumNever
          | GHC.Base.otherwise -> CheckoutCardPaymentMethodOptionsRequestOvercapture'Other val
      )

-- | Defines the enum schema located at @components.schemas.checkout_card_payment_method_options.properties.request_three_d_secure@ in the specification.
--
-- We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https:\/\/stripe.com\/docs\/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to \`automatic\`. Read our guide on [manually requesting 3D Secure](https:\/\/stripe.com\/docs\/payments\/3d-secure\/authentication-flow\#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
data CheckoutCardPaymentMethodOptionsRequestThreeDSecure'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    CheckoutCardPaymentMethodOptionsRequestThreeDSecure'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    CheckoutCardPaymentMethodOptionsRequestThreeDSecure'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"any"@
    CheckoutCardPaymentMethodOptionsRequestThreeDSecure'EnumAny
  | -- | Represents the JSON value @"automatic"@
    CheckoutCardPaymentMethodOptionsRequestThreeDSecure'EnumAutomatic
  | -- | Represents the JSON value @"challenge"@
    CheckoutCardPaymentMethodOptionsRequestThreeDSecure'EnumChallenge
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CheckoutCardPaymentMethodOptionsRequestThreeDSecure' where
  toJSON (CheckoutCardPaymentMethodOptionsRequestThreeDSecure'Other val) = val
  toJSON (CheckoutCardPaymentMethodOptionsRequestThreeDSecure'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (CheckoutCardPaymentMethodOptionsRequestThreeDSecure'EnumAny) = "any"
  toJSON (CheckoutCardPaymentMethodOptionsRequestThreeDSecure'EnumAutomatic) = "automatic"
  toJSON (CheckoutCardPaymentMethodOptionsRequestThreeDSecure'EnumChallenge) = "challenge"

instance Data.Aeson.Types.FromJSON.FromJSON CheckoutCardPaymentMethodOptionsRequestThreeDSecure' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "any" -> CheckoutCardPaymentMethodOptionsRequestThreeDSecure'EnumAny
          | val GHC.Classes.== "automatic" -> CheckoutCardPaymentMethodOptionsRequestThreeDSecure'EnumAutomatic
          | val GHC.Classes.== "challenge" -> CheckoutCardPaymentMethodOptionsRequestThreeDSecure'EnumChallenge
          | GHC.Base.otherwise -> CheckoutCardPaymentMethodOptionsRequestThreeDSecure'Other val
      )

-- | Defines the enum schema located at @components.schemas.checkout_card_payment_method_options.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data CheckoutCardPaymentMethodOptionsSetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    CheckoutCardPaymentMethodOptionsSetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    CheckoutCardPaymentMethodOptionsSetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CheckoutCardPaymentMethodOptionsSetupFutureUsage' where
  toJSON (CheckoutCardPaymentMethodOptionsSetupFutureUsage'Other val) = val
  toJSON (CheckoutCardPaymentMethodOptionsSetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumNone) = "none"
  toJSON (CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON CheckoutCardPaymentMethodOptionsSetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> CheckoutCardPaymentMethodOptionsSetupFutureUsage'Other val
      )
