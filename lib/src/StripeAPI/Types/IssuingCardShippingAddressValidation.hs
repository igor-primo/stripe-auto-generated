{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingCardShippingAddressValidation
module StripeAPI.Types.IssuingCardShippingAddressValidation where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Address
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_card_shipping_address_validation@ in the specification.
data IssuingCardShippingAddressValidation = IssuingCardShippingAddressValidation
  { -- | mode: The address validation capabilities to use.
    issuingCardShippingAddressValidationMode :: IssuingCardShippingAddressValidationMode',
    -- | normalized_address: The normalized shipping address.
    issuingCardShippingAddressValidationNormalizedAddress :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingCardShippingAddressValidationNormalizedAddress'NonNullable)),
    -- | result: The validation result for the shipping address.
    issuingCardShippingAddressValidationResult :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingCardShippingAddressValidationResult'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShippingAddressValidation where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["mode" Data.Aeson.Types.ToJSON..= issuingCardShippingAddressValidationMode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("normalized_address" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("result" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationResult obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["mode" Data.Aeson.Types.ToJSON..= issuingCardShippingAddressValidationMode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("normalized_address" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("result" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationResult obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShippingAddressValidation where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardShippingAddressValidation" (\obj -> ((GHC.Base.pure IssuingCardShippingAddressValidation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "normalized_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "result"))

-- | Create a new 'IssuingCardShippingAddressValidation' with all required fields.
mkIssuingCardShippingAddressValidation ::
  -- | 'issuingCardShippingAddressValidationMode'
  IssuingCardShippingAddressValidationMode' ->
  IssuingCardShippingAddressValidation
mkIssuingCardShippingAddressValidation issuingCardShippingAddressValidationMode =
  IssuingCardShippingAddressValidation
    { issuingCardShippingAddressValidationMode = issuingCardShippingAddressValidationMode,
      issuingCardShippingAddressValidationNormalizedAddress = GHC.Maybe.Nothing,
      issuingCardShippingAddressValidationResult = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.issuing_card_shipping_address_validation.properties.mode@ in the specification.
--
-- The address validation capabilities to use.
data IssuingCardShippingAddressValidationMode'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingCardShippingAddressValidationMode'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingCardShippingAddressValidationMode'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"disabled"@
    IssuingCardShippingAddressValidationMode'EnumDisabled
  | -- | Represents the JSON value @"normalization_only"@
    IssuingCardShippingAddressValidationMode'EnumNormalizationOnly
  | -- | Represents the JSON value @"validation_and_normalization"@
    IssuingCardShippingAddressValidationMode'EnumValidationAndNormalization
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShippingAddressValidationMode' where
  toJSON (IssuingCardShippingAddressValidationMode'Other val) = val
  toJSON (IssuingCardShippingAddressValidationMode'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingCardShippingAddressValidationMode'EnumDisabled) = "disabled"
  toJSON (IssuingCardShippingAddressValidationMode'EnumNormalizationOnly) = "normalization_only"
  toJSON (IssuingCardShippingAddressValidationMode'EnumValidationAndNormalization) = "validation_and_normalization"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShippingAddressValidationMode' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "disabled" -> IssuingCardShippingAddressValidationMode'EnumDisabled
          | val GHC.Classes.== "normalization_only" -> IssuingCardShippingAddressValidationMode'EnumNormalizationOnly
          | val GHC.Classes.== "validation_and_normalization" -> IssuingCardShippingAddressValidationMode'EnumValidationAndNormalization
          | GHC.Base.otherwise -> IssuingCardShippingAddressValidationMode'Other val
      )

-- | Defines the object schema located at @components.schemas.issuing_card_shipping_address_validation.properties.normalized_address.anyOf@ in the specification.
--
-- The normalized shipping address.
data IssuingCardShippingAddressValidationNormalizedAddress'NonNullable = IssuingCardShippingAddressValidationNormalizedAddress'NonNullable
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingCardShippingAddressValidationNormalizedAddress'NonNullableCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingCardShippingAddressValidationNormalizedAddress'NonNullableCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingCardShippingAddressValidationNormalizedAddress'NonNullableLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingCardShippingAddressValidationNormalizedAddress'NonNullableLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingCardShippingAddressValidationNormalizedAddress'NonNullablePostalCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingCardShippingAddressValidationNormalizedAddress'NonNullableState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShippingAddressValidationNormalizedAddress'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress'NonNullableState obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (issuingCardShippingAddressValidationNormalizedAddress'NonNullableState obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShippingAddressValidationNormalizedAddress'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardShippingAddressValidationNormalizedAddress'NonNullable" (\obj -> (((((GHC.Base.pure IssuingCardShippingAddressValidationNormalizedAddress'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'IssuingCardShippingAddressValidationNormalizedAddress'NonNullable' with all required fields.
mkIssuingCardShippingAddressValidationNormalizedAddress'NonNullable :: IssuingCardShippingAddressValidationNormalizedAddress'NonNullable
mkIssuingCardShippingAddressValidationNormalizedAddress'NonNullable =
  IssuingCardShippingAddressValidationNormalizedAddress'NonNullable
    { issuingCardShippingAddressValidationNormalizedAddress'NonNullableCity = GHC.Maybe.Nothing,
      issuingCardShippingAddressValidationNormalizedAddress'NonNullableCountry = GHC.Maybe.Nothing,
      issuingCardShippingAddressValidationNormalizedAddress'NonNullableLine1 = GHC.Maybe.Nothing,
      issuingCardShippingAddressValidationNormalizedAddress'NonNullableLine2 = GHC.Maybe.Nothing,
      issuingCardShippingAddressValidationNormalizedAddress'NonNullablePostalCode = GHC.Maybe.Nothing,
      issuingCardShippingAddressValidationNormalizedAddress'NonNullableState = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.issuing_card_shipping_address_validation.properties.result@ in the specification.
--
-- The validation result for the shipping address.
data IssuingCardShippingAddressValidationResult'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingCardShippingAddressValidationResult'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingCardShippingAddressValidationResult'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"indeterminate"@
    IssuingCardShippingAddressValidationResult'NonNullableEnumIndeterminate
  | -- | Represents the JSON value @"likely_deliverable"@
    IssuingCardShippingAddressValidationResult'NonNullableEnumLikelyDeliverable
  | -- | Represents the JSON value @"likely_undeliverable"@
    IssuingCardShippingAddressValidationResult'NonNullableEnumLikelyUndeliverable
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShippingAddressValidationResult'NonNullable where
  toJSON (IssuingCardShippingAddressValidationResult'NonNullableOther val) = val
  toJSON (IssuingCardShippingAddressValidationResult'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingCardShippingAddressValidationResult'NonNullableEnumIndeterminate) = "indeterminate"
  toJSON (IssuingCardShippingAddressValidationResult'NonNullableEnumLikelyDeliverable) = "likely_deliverable"
  toJSON (IssuingCardShippingAddressValidationResult'NonNullableEnumLikelyUndeliverable) = "likely_undeliverable"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShippingAddressValidationResult'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "indeterminate" -> IssuingCardShippingAddressValidationResult'NonNullableEnumIndeterminate
          | val GHC.Classes.== "likely_deliverable" -> IssuingCardShippingAddressValidationResult'NonNullableEnumLikelyDeliverable
          | val GHC.Classes.== "likely_undeliverable" -> IssuingCardShippingAddressValidationResult'NonNullableEnumLikelyUndeliverable
          | GHC.Base.otherwise -> IssuingCardShippingAddressValidationResult'NonNullableOther val
      )
