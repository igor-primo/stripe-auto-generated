{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentIntent
module StripeAPI.Types.PaymentIntent where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Account
import {-# SOURCE #-} StripeAPI.Types.AccountRequirementsError
import {-# SOURCE #-} StripeAPI.Types.Address
import {-# SOURCE #-} StripeAPI.Types.ApiErrors
import {-# SOURCE #-} StripeAPI.Types.Application
import {-# SOURCE #-} StripeAPI.Types.BankAccount
import {-# SOURCE #-} StripeAPI.Types.Card
import {-# SOURCE #-} StripeAPI.Types.Charge
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.DeletedCustomer
import {-# SOURCE #-} StripeAPI.Types.ExternalAccountRequirements
import {-# SOURCE #-} StripeAPI.Types.LinkedAccountOptionsCommon
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsAmountDetails
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsAmountDetailsClient
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsAmountDetailsClientResourceTip
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsAutomaticPaymentMethodsPaymentIntent
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsInstallmentOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsPaymentIntentPresentmentDetails
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsPrivatePaymentMethodsKakaoPayPaymentMethodOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsPrivatePaymentMethodsNaverPayPaymentMethodOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsPrivatePaymentMethodsPaycoPaymentMethodOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsPrivatePaymentMethodsSamsungPayPaymentMethodOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentCardProcessing
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextAction
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionAlipayHandleRedirect
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionBoleto
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionCardAwaitNotification
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionDisplayBankTransferInstructions
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionDisplayMultibancoDetails
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionDisplayOxxoDetails
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionKonbini
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionPaynowDisplayQrCode
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionPixDisplayQrCode
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionPromptpayDisplayQrCode
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionRedirectToUrl
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionVerifyWithMicrodeposits
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionWechatPayDisplayQrCode
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionWechatPayRedirectToAndroidApp
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionWechatPayRedirectToIosApp
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsAcssDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsAuBecsDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsBacsDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsBlik
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsCard
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsEps
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsLink
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsMandateOptionsBacsDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsMobilepay
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsNzBankAccount
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsSepaDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsSwish
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentPaymentMethodOptionsUsBankAccount
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentProcessing
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentTypeSpecificPaymentMethodOptionsClient
import {-# SOURCE #-} StripeAPI.Types.PaymentMethod
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodConfigBizPaymentMethodConfigurationDetails
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsCardInstallmentsPlan
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsAffirm
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsAfterpayClearpay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsAlipay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsAlma
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsAmazonPay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsBancontact
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsBillie
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsBoleto
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCardInstallments
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCardMandateOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCardPresent
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCardPresentRouting
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCashapp
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCrypto
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCustomerBalance
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCustomerBalanceBankTransfer
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsFpx
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsGiropay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsGrabpay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsIdeal
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsKlarna
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsKonbini
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsKrCard
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsMultibanco
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsOxxo
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsP24
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsPaynow
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsPaypal
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsPix
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsPromptpay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsRevolutPay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsSatispay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsSofort
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsTwint
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsUsBankAccountMandateOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsWechatPay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsZip
import {-# SOURCE #-} StripeAPI.Types.Review
import {-# SOURCE #-} StripeAPI.Types.SetupIntent
import {-# SOURCE #-} StripeAPI.Types.Shipping
import {-# SOURCE #-} StripeAPI.Types.Source
import {-# SOURCE #-} StripeAPI.Types.SourceCodeVerificationFlow
import {-# SOURCE #-} StripeAPI.Types.SourceOrder
import {-# SOURCE #-} StripeAPI.Types.SourceOwner
import {-# SOURCE #-} StripeAPI.Types.SourceReceiverFlow
import {-# SOURCE #-} StripeAPI.Types.SourceRedirectFlow
import {-# SOURCE #-} StripeAPI.Types.SourceTypeAchCreditTransfer
import {-# SOURCE #-} StripeAPI.Types.SourceTypeAchDebit
import {-# SOURCE #-} StripeAPI.Types.SourceTypeAcssDebit
import {-# SOURCE #-} StripeAPI.Types.SourceTypeAlipay
import {-# SOURCE #-} StripeAPI.Types.SourceTypeAuBecsDebit
import {-# SOURCE #-} StripeAPI.Types.SourceTypeBancontact
import {-# SOURCE #-} StripeAPI.Types.SourceTypeCard
import {-# SOURCE #-} StripeAPI.Types.SourceTypeCardPresent
import {-# SOURCE #-} StripeAPI.Types.SourceTypeEps
import {-# SOURCE #-} StripeAPI.Types.SourceTypeGiropay
import {-# SOURCE #-} StripeAPI.Types.SourceTypeIdeal
import {-# SOURCE #-} StripeAPI.Types.SourceTypeKlarna
import {-# SOURCE #-} StripeAPI.Types.SourceTypeMultibanco
import {-# SOURCE #-} StripeAPI.Types.SourceTypeP24
import {-# SOURCE #-} StripeAPI.Types.SourceTypeSepaDebit
import {-# SOURCE #-} StripeAPI.Types.SourceTypeSofort
import {-# SOURCE #-} StripeAPI.Types.SourceTypeThreeDSecure
import {-# SOURCE #-} StripeAPI.Types.SourceTypeWechat
import {-# SOURCE #-} StripeAPI.Types.TokenCardNetworks
import {-# SOURCE #-} StripeAPI.Types.TransferData
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_intent@ in the specification.
--
-- A PaymentIntent guides you through the process of collecting a payment from your customer.
-- We recommend that you create exactly one PaymentIntent for each order or
-- customer session in your system. You can reference the PaymentIntent later to
-- see the history of payment attempts for a particular session.
--
-- A PaymentIntent transitions through
-- [multiple statuses](https:\/\/stripe.com\/docs\/payments\/intents\#intent-statuses)
-- throughout its lifetime as it interfaces with Stripe.js to perform
-- authentication flows and ultimately creates at most one successful charge.
--
-- Related guide: [Payment Intents API](https:\/\/stripe.com\/docs\/payments\/payment-intents)
data PaymentIntent = PaymentIntent
  { -- | amount: Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https:\/\/stripe.com\/docs\/currencies\#zero-decimal) (e.g., 100 cents to charge \$1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is \$0.50 US or [equivalent in charge currency](https:\/\/stripe.com\/docs\/currencies\#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of \$999,999.99).
    paymentIntentAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_capturable: Amount that can be captured from this PaymentIntent.
    paymentIntentAmountCapturable :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_details
    paymentIntentAmountDetails :: (GHC.Maybe.Maybe PaymentIntentAmountDetails'),
    -- | amount_received: Amount that this PaymentIntent collects.
    paymentIntentAmountReceived :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | application: ID of the Connect application that created the PaymentIntent.
    paymentIntentApplication :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentApplication'NonNullableVariants)),
    -- | application_fee_amount: The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner\'s Stripe account. The amount of the application fee collected will be capped at the total amount captured. For more information, see the PaymentIntents [use case for connected accounts](https:\/\/stripe.com\/docs\/payments\/connected-accounts).
    paymentIntentApplicationFeeAmount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | automatic_payment_methods: Settings to configure compatible payment methods from the [Stripe Dashboard](https:\/\/dashboard.stripe.com\/settings\/payment_methods)
    paymentIntentAutomaticPaymentMethods :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentAutomaticPaymentMethods'NonNullable)),
    -- | canceled_at: Populated when \`status\` is \`canceled\`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
    paymentIntentCanceledAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | cancellation_reason: Reason for cancellation of this PaymentIntent, either user-provided (\`duplicate\`, \`fraudulent\`, \`requested_by_customer\`, or \`abandoned\`) or generated by Stripe internally (\`failed_invoice\`, \`void_invoice\`, \`automatic\`, or \`expired\`).
    paymentIntentCancellationReason :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentCancellationReason'NonNullable)),
    -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentCaptureMethod :: (GHC.Maybe.Maybe PaymentIntentCaptureMethod'),
    -- | client_secret: The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
    --
    -- The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
    --
    -- Refer to our docs to [accept a payment](https:\/\/stripe.com\/docs\/payments\/accept-a-payment?ui=elements) and learn about how \`client_secret\` should be handled.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentClientSecret :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | confirmation_method: Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
    paymentIntentConfirmationMethod :: (GHC.Maybe.Maybe PaymentIntentConfirmationMethod'),
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    paymentIntentCreated :: GHC.Types.Int,
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    paymentIntentCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | customer: ID of the Customer this PaymentIntent belongs to, if one exists.
    --
    -- Payment methods attached to other Customers cannot be used with this PaymentIntent.
    --
    -- If [setup_future_usage](https:\/\/stripe.com\/docs\/api\#payment_intent_object-setup_future_usage) is set and this PaymentIntent\'s payment method is not \`card_present\`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is \`card_present\` and isn\'t a digital wallet, then a [generated_card](https:\/\/docs.stripe.com\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
    paymentIntentCustomer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentCustomer'NonNullableVariants)),
    -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | excluded_payment_method_types: The list of payment method types to exclude from use with this payment.
    paymentIntentExcludedPaymentMethodTypes :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [PaymentIntentExcludedPaymentMethodTypes'NonNullable])),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentId :: Data.Text.Internal.Text,
    -- | last_payment_error: The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
    paymentIntentLastPaymentError :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentLastPaymentError'NonNullable)),
    -- | latest_charge: ID of the latest [Charge object](https:\/\/stripe.com\/docs\/api\/charges) created by this PaymentIntent. This property is \`null\` until PaymentIntent confirmation is attempted.
    paymentIntentLatestCharge :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentLatestCharge'NonNullableVariants)),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    paymentIntentLivemode :: GHC.Types.Bool,
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https:\/\/stripe.com\/docs\/payments\/payment-intents\/creating-payment-intents\#storing-information-in-metadata).
    paymentIntentMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | next_action
    paymentIntentNextAction :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentNextAction'NonNullable)),
    -- | on_behalf_of: The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https:\/\/stripe.com\/docs\/payments\/connected-accounts) for details.
    paymentIntentOnBehalfOf :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentOnBehalfOf'NonNullableVariants)),
    -- | payment_method: ID of the payment method used in this PaymentIntent.
    paymentIntentPaymentMethod :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethod'NonNullableVariants)),
    -- | payment_method_configuration_details: Information about the [payment method configuration](https:\/\/stripe.com\/docs\/api\/payment_method_configurations) used for this PaymentIntent.
    paymentIntentPaymentMethodConfigurationDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodConfigurationDetails'NonNullable)),
    -- | payment_method_options: Payment-method-specific configuration for this PaymentIntent.
    paymentIntentPaymentMethodOptions :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptions'NonNullable)),
    -- | payment_method_types: The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. A comprehensive list of valid payment method types can be found [here](https:\/\/docs.stripe.com\/api\/payment_methods\/object\#payment_method_object-type).
    paymentIntentPaymentMethodTypes :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | presentment_details:
    paymentIntentPresentmentDetails :: (GHC.Maybe.Maybe PaymentFlowsPaymentIntentPresentmentDetails),
    -- | processing: If present, this property tells you about the processing state of the payment.
    paymentIntentProcessing :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentProcessing'NonNullable)),
    -- | receipt_email: Email address that the receipt for the resulting payment will be sent to. If \`receipt_email\` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https:\/\/dashboard.stripe.com\/account\/emails).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentReceiptEmail :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | review: ID of the review associated with this PaymentIntent, if any.
    paymentIntentReview :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentReview'NonNullableVariants)),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentSetupFutureUsage :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentSetupFutureUsage'NonNullable)),
    -- | shipping: Shipping information for this PaymentIntent.
    paymentIntentShipping :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentShipping'NonNullable)),
    -- | statement_descriptor: Text that appears on the customer\'s statement as the statement descriptor for a non-card charge. This value overrides the account\'s default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https:\/\/docs.stripe.com\/get-started\/account\/statement-descriptors).
    --
    -- Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https:\/\/docs.stripe.com\/get-started\/account\/statement-descriptors\#dynamic) instead.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentStatementDescriptor :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | statement_descriptor_suffix: Provides information about a card charge. Concatenated to the account\'s [statement descriptor prefix](https:\/\/docs.stripe.com\/get-started\/account\/statement-descriptors\#static) to form the complete statement descriptor that appears on the customer\'s statement.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentStatementDescriptorSuffix :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | status: Status of this PaymentIntent, one of \`requires_payment_method\`, \`requires_confirmation\`, \`requires_action\`, \`processing\`, \`requires_capture\`, \`canceled\`, or \`succeeded\`. Read more about each PaymentIntent [status](https:\/\/stripe.com\/docs\/payments\/intents\#intent-statuses).
    paymentIntentStatus :: PaymentIntentStatus',
    -- | transfer_data: The data that automatically creates a Transfer after the payment finalizes. Learn more about the [use case for connected accounts](https:\/\/stripe.com\/docs\/payments\/connected-accounts).
    paymentIntentTransferData :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentTransferData'NonNullable)),
    -- | transfer_group: A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https:\/\/stripe.com\/docs\/connect\/separate-charges-and-transfers).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentTransferGroup :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntent where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (paymentIntentAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_capturable" Data.Aeson.Types.ToJSON..=)) (paymentIntentAmountCapturable obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentAmountDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_received" Data.Aeson.Types.ToJSON..=)) (paymentIntentAmountReceived obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application" Data.Aeson.Types.ToJSON..=)) (paymentIntentApplication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_amount" Data.Aeson.Types.ToJSON..=)) (paymentIntentApplicationFeeAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("automatic_payment_methods" Data.Aeson.Types.ToJSON..=)) (paymentIntentAutomaticPaymentMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canceled_at" Data.Aeson.Types.ToJSON..=)) (paymentIntentCanceledAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cancellation_reason" Data.Aeson.Types.ToJSON..=)) (paymentIntentCancellationReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentCaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (paymentIntentClientSecret obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirmation_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentConfirmationMethod obj) : ["created" Data.Aeson.Types.ToJSON..= paymentIntentCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (paymentIntentCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (paymentIntentCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (paymentIntentDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("excluded_payment_method_types" Data.Aeson.Types.ToJSON..=)) (paymentIntentExcludedPaymentMethodTypes obj) : ["id" Data.Aeson.Types.ToJSON..= paymentIntentId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_payment_error" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("latest_charge" Data.Aeson.Types.ToJSON..=)) (paymentIntentLatestCharge obj) : ["livemode" Data.Aeson.Types.ToJSON..= paymentIntentLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (paymentIntentMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_action" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("on_behalf_of" Data.Aeson.Types.ToJSON..=)) (paymentIntentOnBehalfOf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_configuration_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodConfigurationDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_types" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("presentment_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentPresentmentDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("processing" Data.Aeson.Types.ToJSON..=)) (paymentIntentProcessing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receipt_email" Data.Aeson.Types.ToJSON..=)) (paymentIntentReceiptEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("review" Data.Aeson.Types.ToJSON..=)) (paymentIntentReview obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentSetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping" Data.Aeson.Types.ToJSON..=)) (paymentIntentShipping obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor" Data.Aeson.Types.ToJSON..=)) (paymentIntentStatementDescriptor obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix" Data.Aeson.Types.ToJSON..=)) (paymentIntentStatementDescriptorSuffix obj) : ["status" Data.Aeson.Types.ToJSON..= paymentIntentStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_data" Data.Aeson.Types.ToJSON..=)) (paymentIntentTransferData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_group" Data.Aeson.Types.ToJSON..=)) (paymentIntentTransferGroup obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "payment_intent"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (paymentIntentAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_capturable" Data.Aeson.Types.ToJSON..=)) (paymentIntentAmountCapturable obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentAmountDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_received" Data.Aeson.Types.ToJSON..=)) (paymentIntentAmountReceived obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application" Data.Aeson.Types.ToJSON..=)) (paymentIntentApplication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_amount" Data.Aeson.Types.ToJSON..=)) (paymentIntentApplicationFeeAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("automatic_payment_methods" Data.Aeson.Types.ToJSON..=)) (paymentIntentAutomaticPaymentMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canceled_at" Data.Aeson.Types.ToJSON..=)) (paymentIntentCanceledAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cancellation_reason" Data.Aeson.Types.ToJSON..=)) (paymentIntentCancellationReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentCaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (paymentIntentClientSecret obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirmation_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentConfirmationMethod obj) : ["created" Data.Aeson.Types.ToJSON..= paymentIntentCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (paymentIntentCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (paymentIntentCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (paymentIntentDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("excluded_payment_method_types" Data.Aeson.Types.ToJSON..=)) (paymentIntentExcludedPaymentMethodTypes obj) : ["id" Data.Aeson.Types.ToJSON..= paymentIntentId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_payment_error" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("latest_charge" Data.Aeson.Types.ToJSON..=)) (paymentIntentLatestCharge obj) : ["livemode" Data.Aeson.Types.ToJSON..= paymentIntentLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (paymentIntentMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_action" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("on_behalf_of" Data.Aeson.Types.ToJSON..=)) (paymentIntentOnBehalfOf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_configuration_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodConfigurationDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_types" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodTypes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("presentment_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentPresentmentDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("processing" Data.Aeson.Types.ToJSON..=)) (paymentIntentProcessing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receipt_email" Data.Aeson.Types.ToJSON..=)) (paymentIntentReceiptEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("review" Data.Aeson.Types.ToJSON..=)) (paymentIntentReview obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentSetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping" Data.Aeson.Types.ToJSON..=)) (paymentIntentShipping obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor" Data.Aeson.Types.ToJSON..=)) (paymentIntentStatementDescriptor obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix" Data.Aeson.Types.ToJSON..=)) (paymentIntentStatementDescriptorSuffix obj) : ["status" Data.Aeson.Types.ToJSON..= paymentIntentStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_data" Data.Aeson.Types.ToJSON..=)) (paymentIntentTransferData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_group" Data.Aeson.Types.ToJSON..=)) (paymentIntentTransferGroup obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "payment_intent"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntent where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntent" (\obj -> ((((((((((((((((((((((((((((((((((((((GHC.Base.pure PaymentIntent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_capturable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_received")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_fee_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "automatic_payment_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "canceled_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cancellation_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "confirmation_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "excluded_payment_method_types")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_payment_error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "latest_charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "next_action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "on_behalf_of")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_method_configuration_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_method_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_method_types")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "presentment_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "processing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "receipt_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "review")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "shipping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor_suffix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transfer_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transfer_group"))

-- | Create a new 'PaymentIntent' with all required fields.
mkPaymentIntent ::
  -- | 'paymentIntentCreated'
  GHC.Types.Int ->
  -- | 'paymentIntentId'
  Data.Text.Internal.Text ->
  -- | 'paymentIntentLivemode'
  GHC.Types.Bool ->
  -- | 'paymentIntentStatus'
  PaymentIntentStatus' ->
  PaymentIntent
mkPaymentIntent paymentIntentCreated paymentIntentId paymentIntentLivemode paymentIntentStatus =
  PaymentIntent
    { paymentIntentAmount = GHC.Maybe.Nothing,
      paymentIntentAmountCapturable = GHC.Maybe.Nothing,
      paymentIntentAmountDetails = GHC.Maybe.Nothing,
      paymentIntentAmountReceived = GHC.Maybe.Nothing,
      paymentIntentApplication = GHC.Maybe.Nothing,
      paymentIntentApplicationFeeAmount = GHC.Maybe.Nothing,
      paymentIntentAutomaticPaymentMethods = GHC.Maybe.Nothing,
      paymentIntentCanceledAt = GHC.Maybe.Nothing,
      paymentIntentCancellationReason = GHC.Maybe.Nothing,
      paymentIntentCaptureMethod = GHC.Maybe.Nothing,
      paymentIntentClientSecret = GHC.Maybe.Nothing,
      paymentIntentConfirmationMethod = GHC.Maybe.Nothing,
      paymentIntentCreated = paymentIntentCreated,
      paymentIntentCurrency = GHC.Maybe.Nothing,
      paymentIntentCustomer = GHC.Maybe.Nothing,
      paymentIntentDescription = GHC.Maybe.Nothing,
      paymentIntentExcludedPaymentMethodTypes = GHC.Maybe.Nothing,
      paymentIntentId = paymentIntentId,
      paymentIntentLastPaymentError = GHC.Maybe.Nothing,
      paymentIntentLatestCharge = GHC.Maybe.Nothing,
      paymentIntentLivemode = paymentIntentLivemode,
      paymentIntentMetadata = GHC.Maybe.Nothing,
      paymentIntentNextAction = GHC.Maybe.Nothing,
      paymentIntentOnBehalfOf = GHC.Maybe.Nothing,
      paymentIntentPaymentMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodConfigurationDetails = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodTypes = GHC.Maybe.Nothing,
      paymentIntentPresentmentDetails = GHC.Maybe.Nothing,
      paymentIntentProcessing = GHC.Maybe.Nothing,
      paymentIntentReceiptEmail = GHC.Maybe.Nothing,
      paymentIntentReview = GHC.Maybe.Nothing,
      paymentIntentSetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentShipping = GHC.Maybe.Nothing,
      paymentIntentStatementDescriptor = GHC.Maybe.Nothing,
      paymentIntentStatementDescriptorSuffix = GHC.Maybe.Nothing,
      paymentIntentStatus = paymentIntentStatus,
      paymentIntentTransferData = GHC.Maybe.Nothing,
      paymentIntentTransferGroup = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_intent.properties.amount_details.anyOf@ in the specification.
data PaymentIntentAmountDetails' = PaymentIntentAmountDetails'
  { -- | tip:
    paymentIntentAmountDetails'Tip :: (GHC.Maybe.Maybe PaymentFlowsAmountDetailsClientResourceTip)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentAmountDetails' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tip" Data.Aeson.Types.ToJSON..=)) (paymentIntentAmountDetails'Tip obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tip" Data.Aeson.Types.ToJSON..=)) (paymentIntentAmountDetails'Tip obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentAmountDetails' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentAmountDetails'" (\obj -> GHC.Base.pure PaymentIntentAmountDetails' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tip"))

-- | Create a new 'PaymentIntentAmountDetails'' with all required fields.
mkPaymentIntentAmountDetails' :: PaymentIntentAmountDetails'
mkPaymentIntentAmountDetails' = PaymentIntentAmountDetails' {paymentIntentAmountDetails'Tip = GHC.Maybe.Nothing}

-- | Defines the oneOf schema located at @components.schemas.payment_intent.properties.application.anyOf@ in the specification.
--
-- ID of the Connect application that created the PaymentIntent.
data PaymentIntentApplication'NonNullableVariants
  = PaymentIntentApplication'NonNullableText Data.Text.Internal.Text
  | PaymentIntentApplication'NonNullableApplication Application
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentApplication'NonNullableVariants where
  toJSON (PaymentIntentApplication'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentIntentApplication'NonNullableApplication a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentApplication'NonNullableVariants where
  parseJSON val = case (PaymentIntentApplication'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentIntentApplication'NonNullableApplication Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.payment_intent.properties.automatic_payment_methods.anyOf@ in the specification.
--
-- Settings to configure compatible payment methods from the [Stripe Dashboard](https:\\\/\\\/dashboard.stripe.com\\\/settings\\\/payment_methods)
data PaymentIntentAutomaticPaymentMethods'NonNullable = PaymentIntentAutomaticPaymentMethods'NonNullable
  { -- | allow_redirects: Controls whether this PaymentIntent will accept redirect-based payment methods.
    --
    -- Redirect-based payment methods may require your customer to be redirected to a payment method\'s app or site for authentication or additional steps. To [confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) this PaymentIntent, you may be required to provide a \`return_url\` to redirect customers back to your site after they authenticate or complete the payment.
    paymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects :: (GHC.Maybe.Maybe PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects'),
    -- | enabled: Automatically calculates compatible payment methods
    paymentIntentAutomaticPaymentMethods'NonNullableEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentAutomaticPaymentMethods'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_redirects" Data.Aeson.Types.ToJSON..=)) (paymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (paymentIntentAutomaticPaymentMethods'NonNullableEnabled obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_redirects" Data.Aeson.Types.ToJSON..=)) (paymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (paymentIntentAutomaticPaymentMethods'NonNullableEnabled obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentAutomaticPaymentMethods'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentAutomaticPaymentMethods'NonNullable" (\obj -> (GHC.Base.pure PaymentIntentAutomaticPaymentMethods'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_redirects")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled"))

-- | Create a new 'PaymentIntentAutomaticPaymentMethods'NonNullable' with all required fields.
mkPaymentIntentAutomaticPaymentMethods'NonNullable :: PaymentIntentAutomaticPaymentMethods'NonNullable
mkPaymentIntentAutomaticPaymentMethods'NonNullable =
  PaymentIntentAutomaticPaymentMethods'NonNullable
    { paymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects = GHC.Maybe.Nothing,
      paymentIntentAutomaticPaymentMethods'NonNullableEnabled = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.automatic_payment_methods.anyOf.properties.allow_redirects@ in the specification.
--
-- Controls whether this PaymentIntent will accept redirect-based payment methods.
--
-- Redirect-based payment methods may require your customer to be redirected to a payment method\'s app or site for authentication or additional steps. To [confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) this PaymentIntent, you may be required to provide a \`return_url\` to redirect customers back to your site after they authenticate or complete the payment.
data PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"always"@
    PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects'EnumAlways
  | -- | Represents the JSON value @"never"@
    PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects' where
  toJSON (PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects'Other val) = val
  toJSON (PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects'EnumAlways) = "always"
  toJSON (PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "always" -> PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects'EnumAlways
          | val GHC.Classes.== "never" -> PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects'EnumNever
          | GHC.Base.otherwise -> PaymentIntentAutomaticPaymentMethods'NonNullableAllowRedirects'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.cancellation_reason@ in the specification.
--
-- Reason for cancellation of this PaymentIntent, either user-provided (\`duplicate\`, \`fraudulent\`, \`requested_by_customer\`, or \`abandoned\`) or generated by Stripe internally (\`failed_invoice\`, \`void_invoice\`, \`automatic\`, or \`expired\`).
data PaymentIntentCancellationReason'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentCancellationReason'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentCancellationReason'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"abandoned"@
    PaymentIntentCancellationReason'NonNullableEnumAbandoned
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentCancellationReason'NonNullableEnumAutomatic
  | -- | Represents the JSON value @"duplicate"@
    PaymentIntentCancellationReason'NonNullableEnumDuplicate
  | -- | Represents the JSON value @"expired"@
    PaymentIntentCancellationReason'NonNullableEnumExpired
  | -- | Represents the JSON value @"failed_invoice"@
    PaymentIntentCancellationReason'NonNullableEnumFailedInvoice
  | -- | Represents the JSON value @"fraudulent"@
    PaymentIntentCancellationReason'NonNullableEnumFraudulent
  | -- | Represents the JSON value @"requested_by_customer"@
    PaymentIntentCancellationReason'NonNullableEnumRequestedByCustomer
  | -- | Represents the JSON value @"void_invoice"@
    PaymentIntentCancellationReason'NonNullableEnumVoidInvoice
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentCancellationReason'NonNullable where
  toJSON (PaymentIntentCancellationReason'NonNullableOther val) = val
  toJSON (PaymentIntentCancellationReason'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentCancellationReason'NonNullableEnumAbandoned) = "abandoned"
  toJSON (PaymentIntentCancellationReason'NonNullableEnumAutomatic) = "automatic"
  toJSON (PaymentIntentCancellationReason'NonNullableEnumDuplicate) = "duplicate"
  toJSON (PaymentIntentCancellationReason'NonNullableEnumExpired) = "expired"
  toJSON (PaymentIntentCancellationReason'NonNullableEnumFailedInvoice) = "failed_invoice"
  toJSON (PaymentIntentCancellationReason'NonNullableEnumFraudulent) = "fraudulent"
  toJSON (PaymentIntentCancellationReason'NonNullableEnumRequestedByCustomer) = "requested_by_customer"
  toJSON (PaymentIntentCancellationReason'NonNullableEnumVoidInvoice) = "void_invoice"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentCancellationReason'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "abandoned" -> PaymentIntentCancellationReason'NonNullableEnumAbandoned
          | val GHC.Classes.== "automatic" -> PaymentIntentCancellationReason'NonNullableEnumAutomatic
          | val GHC.Classes.== "duplicate" -> PaymentIntentCancellationReason'NonNullableEnumDuplicate
          | val GHC.Classes.== "expired" -> PaymentIntentCancellationReason'NonNullableEnumExpired
          | val GHC.Classes.== "failed_invoice" -> PaymentIntentCancellationReason'NonNullableEnumFailedInvoice
          | val GHC.Classes.== "fraudulent" -> PaymentIntentCancellationReason'NonNullableEnumFraudulent
          | val GHC.Classes.== "requested_by_customer" -> PaymentIntentCancellationReason'NonNullableEnumRequestedByCustomer
          | val GHC.Classes.== "void_invoice" -> PaymentIntentCancellationReason'NonNullableEnumVoidInvoice
          | GHC.Base.otherwise -> PaymentIntentCancellationReason'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentCaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentCaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentCaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentCaptureMethod'EnumAutomatic
  | -- | Represents the JSON value @"automatic_async"@
    PaymentIntentCaptureMethod'EnumAutomaticAsync
  | -- | Represents the JSON value @"manual"@
    PaymentIntentCaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentCaptureMethod' where
  toJSON (PaymentIntentCaptureMethod'Other val) = val
  toJSON (PaymentIntentCaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentCaptureMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentCaptureMethod'EnumAutomaticAsync) = "automatic_async"
  toJSON (PaymentIntentCaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentCaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentCaptureMethod'EnumAutomatic
          | val GHC.Classes.== "automatic_async" -> PaymentIntentCaptureMethod'EnumAutomaticAsync
          | val GHC.Classes.== "manual" -> PaymentIntentCaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentCaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.confirmation_method@ in the specification.
--
-- Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
data PaymentIntentConfirmationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentConfirmationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentConfirmationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentConfirmationMethod'EnumAutomatic
  | -- | Represents the JSON value @"manual"@
    PaymentIntentConfirmationMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentConfirmationMethod' where
  toJSON (PaymentIntentConfirmationMethod'Other val) = val
  toJSON (PaymentIntentConfirmationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentConfirmationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentConfirmationMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentConfirmationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentConfirmationMethod'EnumAutomatic
          | val GHC.Classes.== "manual" -> PaymentIntentConfirmationMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentConfirmationMethod'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.payment_intent.properties.customer.anyOf@ in the specification.
--
-- ID of the Customer this PaymentIntent belongs to, if one exists.
--
-- Payment methods attached to other Customers cannot be used with this PaymentIntent.
--
-- If [setup_future_usage](https:\/\/stripe.com\/docs\/api\#payment_intent_object-setup_future_usage) is set and this PaymentIntent\'s payment method is not \`card_present\`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is \`card_present\` and isn\'t a digital wallet, then a [generated_card](https:\/\/docs.stripe.com\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
data PaymentIntentCustomer'NonNullableVariants
  = PaymentIntentCustomer'NonNullableText Data.Text.Internal.Text
  | PaymentIntentCustomer'NonNullableCustomer Customer
  | PaymentIntentCustomer'NonNullableDeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentCustomer'NonNullableVariants where
  toJSON (PaymentIntentCustomer'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentIntentCustomer'NonNullableCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentIntentCustomer'NonNullableDeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentCustomer'NonNullableVariants where
  parseJSON val = case (PaymentIntentCustomer'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentIntentCustomer'NonNullableCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentIntentCustomer'NonNullableDeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.excluded_payment_method_types.items@ in the specification.
data PaymentIntentExcludedPaymentMethodTypes'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentExcludedPaymentMethodTypes'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentExcludedPaymentMethodTypes'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"acss_debit"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAcssDebit
  | -- | Represents the JSON value @"affirm"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAffirm
  | -- | Represents the JSON value @"afterpay_clearpay"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAfterpayClearpay
  | -- | Represents the JSON value @"alipay"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAlipay
  | -- | Represents the JSON value @"alma"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAlma
  | -- | Represents the JSON value @"amazon_pay"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAmazonPay
  | -- | Represents the JSON value @"au_becs_debit"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAuBecsDebit
  | -- | Represents the JSON value @"bacs_debit"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBacsDebit
  | -- | Represents the JSON value @"bancontact"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBancontact
  | -- | Represents the JSON value @"billie"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBillie
  | -- | Represents the JSON value @"blik"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBlik
  | -- | Represents the JSON value @"boleto"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBoleto
  | -- | Represents the JSON value @"card"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumCard
  | -- | Represents the JSON value @"cashapp"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumCashapp
  | -- | Represents the JSON value @"crypto"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumCrypto
  | -- | Represents the JSON value @"customer_balance"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumCustomerBalance
  | -- | Represents the JSON value @"eps"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumEps
  | -- | Represents the JSON value @"fpx"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumFpx
  | -- | Represents the JSON value @"giropay"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumGiropay
  | -- | Represents the JSON value @"grabpay"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumGrabpay
  | -- | Represents the JSON value @"ideal"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumIdeal
  | -- | Represents the JSON value @"kakao_pay"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumKakaoPay
  | -- | Represents the JSON value @"klarna"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumKlarna
  | -- | Represents the JSON value @"konbini"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumKonbini
  | -- | Represents the JSON value @"kr_card"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumKrCard
  | -- | Represents the JSON value @"mobilepay"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumMobilepay
  | -- | Represents the JSON value @"multibanco"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumMultibanco
  | -- | Represents the JSON value @"naver_pay"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumNaverPay
  | -- | Represents the JSON value @"nz_bank_account"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumNzBankAccount
  | -- | Represents the JSON value @"oxxo"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumOxxo
  | -- | Represents the JSON value @"p24"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumP24
  | -- | Represents the JSON value @"pay_by_bank"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPayByBank
  | -- | Represents the JSON value @"payco"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPayco
  | -- | Represents the JSON value @"paynow"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPaynow
  | -- | Represents the JSON value @"paypal"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPaypal
  | -- | Represents the JSON value @"pix"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPix
  | -- | Represents the JSON value @"promptpay"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPromptpay
  | -- | Represents the JSON value @"revolut_pay"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumRevolutPay
  | -- | Represents the JSON value @"samsung_pay"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSamsungPay
  | -- | Represents the JSON value @"satispay"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSatispay
  | -- | Represents the JSON value @"sepa_debit"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSepaDebit
  | -- | Represents the JSON value @"sofort"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSofort
  | -- | Represents the JSON value @"swish"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSwish
  | -- | Represents the JSON value @"twint"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumTwint
  | -- | Represents the JSON value @"us_bank_account"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumUsBankAccount
  | -- | Represents the JSON value @"wechat_pay"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumWechatPay
  | -- | Represents the JSON value @"zip"@
    PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumZip
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentExcludedPaymentMethodTypes'NonNullable where
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableOther val) = val
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAcssDebit) = "acss_debit"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAffirm) = "affirm"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAfterpayClearpay) = "afterpay_clearpay"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAlipay) = "alipay"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAlma) = "alma"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAmazonPay) = "amazon_pay"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAuBecsDebit) = "au_becs_debit"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBacsDebit) = "bacs_debit"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBancontact) = "bancontact"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBillie) = "billie"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBlik) = "blik"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBoleto) = "boleto"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumCard) = "card"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumCashapp) = "cashapp"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumCrypto) = "crypto"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumCustomerBalance) = "customer_balance"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumEps) = "eps"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumFpx) = "fpx"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumGiropay) = "giropay"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumGrabpay) = "grabpay"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumIdeal) = "ideal"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumKakaoPay) = "kakao_pay"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumKlarna) = "klarna"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumKonbini) = "konbini"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumKrCard) = "kr_card"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumMobilepay) = "mobilepay"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumMultibanco) = "multibanco"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumNaverPay) = "naver_pay"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumNzBankAccount) = "nz_bank_account"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumOxxo) = "oxxo"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumP24) = "p24"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPayByBank) = "pay_by_bank"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPayco) = "payco"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPaynow) = "paynow"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPaypal) = "paypal"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPix) = "pix"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPromptpay) = "promptpay"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumRevolutPay) = "revolut_pay"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSamsungPay) = "samsung_pay"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSatispay) = "satispay"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSepaDebit) = "sepa_debit"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSofort) = "sofort"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSwish) = "swish"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumTwint) = "twint"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumUsBankAccount) = "us_bank_account"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumWechatPay) = "wechat_pay"
  toJSON (PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumZip) = "zip"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentExcludedPaymentMethodTypes'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "acss_debit" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAcssDebit
          | val GHC.Classes.== "affirm" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAffirm
          | val GHC.Classes.== "afterpay_clearpay" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAfterpayClearpay
          | val GHC.Classes.== "alipay" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAlipay
          | val GHC.Classes.== "alma" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAlma
          | val GHC.Classes.== "amazon_pay" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAmazonPay
          | val GHC.Classes.== "au_becs_debit" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumAuBecsDebit
          | val GHC.Classes.== "bacs_debit" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBacsDebit
          | val GHC.Classes.== "bancontact" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBancontact
          | val GHC.Classes.== "billie" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBillie
          | val GHC.Classes.== "blik" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBlik
          | val GHC.Classes.== "boleto" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumBoleto
          | val GHC.Classes.== "card" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumCard
          | val GHC.Classes.== "cashapp" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumCashapp
          | val GHC.Classes.== "crypto" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumCrypto
          | val GHC.Classes.== "customer_balance" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumCustomerBalance
          | val GHC.Classes.== "eps" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumEps
          | val GHC.Classes.== "fpx" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumFpx
          | val GHC.Classes.== "giropay" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumGiropay
          | val GHC.Classes.== "grabpay" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumGrabpay
          | val GHC.Classes.== "ideal" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumIdeal
          | val GHC.Classes.== "kakao_pay" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumKakaoPay
          | val GHC.Classes.== "klarna" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumKlarna
          | val GHC.Classes.== "konbini" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumKonbini
          | val GHC.Classes.== "kr_card" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumKrCard
          | val GHC.Classes.== "mobilepay" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumMobilepay
          | val GHC.Classes.== "multibanco" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumMultibanco
          | val GHC.Classes.== "naver_pay" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumNaverPay
          | val GHC.Classes.== "nz_bank_account" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumNzBankAccount
          | val GHC.Classes.== "oxxo" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumOxxo
          | val GHC.Classes.== "p24" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumP24
          | val GHC.Classes.== "pay_by_bank" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPayByBank
          | val GHC.Classes.== "payco" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPayco
          | val GHC.Classes.== "paynow" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPaynow
          | val GHC.Classes.== "paypal" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPaypal
          | val GHC.Classes.== "pix" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPix
          | val GHC.Classes.== "promptpay" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumPromptpay
          | val GHC.Classes.== "revolut_pay" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumRevolutPay
          | val GHC.Classes.== "samsung_pay" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSamsungPay
          | val GHC.Classes.== "satispay" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSatispay
          | val GHC.Classes.== "sepa_debit" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSepaDebit
          | val GHC.Classes.== "sofort" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSofort
          | val GHC.Classes.== "swish" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumSwish
          | val GHC.Classes.== "twint" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumTwint
          | val GHC.Classes.== "us_bank_account" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumUsBankAccount
          | val GHC.Classes.== "wechat_pay" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumWechatPay
          | val GHC.Classes.== "zip" -> PaymentIntentExcludedPaymentMethodTypes'NonNullableEnumZip
          | GHC.Base.otherwise -> PaymentIntentExcludedPaymentMethodTypes'NonNullableOther val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf@ in the specification.
--
-- The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
data PaymentIntentLastPaymentError'NonNullable = PaymentIntentLastPaymentError'NonNullable
  { -- | advice_code: For card errors resulting from a card issuer decline, a short string indicating [how to proceed with an error](https:\/\/stripe.com\/docs\/declines\#retrying-issuer-declines) if they provide one.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableAdviceCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | charge: For card errors, the ID of the failed charge.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableCharge :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | code: For some errors that could be handled programmatically, a short string indicating the [error code](https:\/\/stripe.com\/docs\/error-codes) reported.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | decline_code: For card errors resulting from a card issuer decline, a short string indicating the [card issuer\'s reason for the decline](https:\/\/stripe.com\/docs\/declines\#issuer-declines) if they provide one.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableDeclineCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | doc_url: A URL to more information about the [error code](https:\/\/stripe.com\/docs\/error-codes) reported.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableDocUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | message: A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
    --
    -- Constraints:
    --
    -- * Maximum length of 40000
    paymentIntentLastPaymentError'NonNullableMessage :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | network_advice_code: For card errors resulting from a card issuer decline, a 2 digit code which indicates the advice given to merchant by the card network on how to proceed with an error.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableNetworkAdviceCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | network_decline_code: For payments declined by the network, an alphanumeric code which indicates the reason the payment failed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableNetworkDeclineCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | param: If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableParam :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | payment_intent: A PaymentIntent guides you through the process of collecting a payment from your customer.
    -- We recommend that you create exactly one PaymentIntent for each order or
    -- customer session in your system. You can reference the PaymentIntent later to
    -- see the history of payment attempts for a particular session.
    --
    -- A PaymentIntent transitions through
    -- [multiple statuses](https:\/\/stripe.com\/docs\/payments\/intents\#intent-statuses)
    -- throughout its lifetime as it interfaces with Stripe.js to perform
    -- authentication flows and ultimately creates at most one successful charge.
    --
    -- Related guide: [Payment Intents API](https:\/\/stripe.com\/docs\/payments\/payment-intents)
    paymentIntentLastPaymentError'NonNullablePaymentIntent :: (GHC.Maybe.Maybe PaymentIntent),
    -- | payment_method: PaymentMethod objects represent your customer\'s payment instruments.
    -- You can use them with [PaymentIntents](https:\/\/stripe.com\/docs\/payments\/payment-intents) to collect payments or save them to
    -- Customer objects to store instrument details for future payments.
    --
    -- Related guides: [Payment Methods](https:\/\/stripe.com\/docs\/payments\/payment-methods) and [More Payment Scenarios](https:\/\/stripe.com\/docs\/payments\/more-payment-scenarios).
    paymentIntentLastPaymentError'NonNullablePaymentMethod :: (GHC.Maybe.Maybe PaymentMethod),
    -- | payment_method_type: If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullablePaymentMethodType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | request_log_url: A URL to the request log entry in your dashboard.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableRequestLogUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | setup_intent: A SetupIntent guides you through the process of setting up and saving a customer\'s payment credentials for future payments.
    -- For example, you can use a SetupIntent to set up and save your customer\'s card without immediately collecting a payment.
    -- Later, you can use [PaymentIntents](https:\/\/stripe.com\/docs\/api\#payment_intents) to drive the payment flow.
    --
    -- Create a SetupIntent when you\'re ready to collect your customer\'s payment credentials.
    -- Don\'t maintain long-lived, unconfirmed SetupIntents because they might not be valid.
    -- The SetupIntent transitions through multiple [statuses](https:\/\/docs.stripe.com\/payments\/intents\#intent-statuses) as it guides
    -- you through the setup process.
    --
    -- Successful SetupIntents result in payment credentials that are optimized for future payments.
    -- For example, cardholders in [certain regions](https:\/\/stripe.com\/guides\/strong-customer-authentication) might need to be run through
    -- [Strong Customer Authentication](https:\/\/docs.stripe.com\/strong-customer-authentication) during payment method collection
    -- to streamline later [off-session payments](https:\/\/docs.stripe.com\/payments\/setup-intents).
    -- If you use the SetupIntent with a [Customer](https:\/\/stripe.com\/docs\/api\#setup_intent_object-customer),
    -- it automatically attaches the resulting payment method to that Customer after successful setup.
    -- We recommend using SetupIntents or [setup_future_usage](https:\/\/stripe.com\/docs\/api\#payment_intent_object-setup_future_usage) on
    -- PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
    --
    -- By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
    --
    -- Related guide: [Setup Intents API](https:\/\/docs.stripe.com\/payments\/setup-intents)
    paymentIntentLastPaymentError'NonNullableSetupIntent :: (GHC.Maybe.Maybe SetupIntent),
    -- | source: The [source object](https:\/\/stripe.com\/docs\/api\/sources\/object) for errors returned on a request involving a source.
    paymentIntentLastPaymentError'NonNullableSource :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'NonNullableSource'),
    -- | type: The type of error returned. One of \`api_error\`, \`card_error\`, \`idempotency_error\`, or \`invalid_request_error\`
    paymentIntentLastPaymentError'NonNullableType :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'NonNullableType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("advice_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableAdviceCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("charge" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableCharge obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("decline_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableDeclineCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("doc_url" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableDocUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("message" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_advice_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableNetworkAdviceCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_decline_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableNetworkDeclineCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("param" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableParam obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullablePaymentIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullablePaymentMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullablePaymentMethodType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_log_url" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableRequestLogUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_intent" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSetupIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("advice_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableAdviceCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("charge" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableCharge obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("decline_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableDeclineCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("doc_url" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableDocUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("message" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_advice_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableNetworkAdviceCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_decline_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableNetworkDeclineCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("param" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableParam obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullablePaymentIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullablePaymentMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullablePaymentMethodType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_log_url" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableRequestLogUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_intent" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSetupIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentLastPaymentError'NonNullable" (\obj -> (((((((((((((((GHC.Base.pure PaymentIntentLastPaymentError'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "advice_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "decline_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "doc_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "network_advice_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "network_decline_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "param")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_method_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_log_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'PaymentIntentLastPaymentError'NonNullable' with all required fields.
mkPaymentIntentLastPaymentError'NonNullable :: PaymentIntentLastPaymentError'NonNullable
mkPaymentIntentLastPaymentError'NonNullable =
  PaymentIntentLastPaymentError'NonNullable
    { paymentIntentLastPaymentError'NonNullableAdviceCode = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableCharge = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableCode = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableDeclineCode = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableDocUrl = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableMessage = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableNetworkAdviceCode = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableNetworkDeclineCode = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableParam = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullablePaymentIntent = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullablePaymentMethod = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullablePaymentMethodType = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableRequestLogUrl = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSetupIntent = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableType = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.source.anyOf@ in the specification.
--
-- The [source object](https:\\\/\\\/stripe.com\\\/docs\\\/api\\\/sources\\\/object) for errors returned on a request involving a source.
data PaymentIntentLastPaymentError'NonNullableSource' = PaymentIntentLastPaymentError'NonNullableSource'
  { -- | account: The account this bank account belongs to. Only applicable on Accounts (not customers or recipients) This property is only available when returned as an [External Account](\/api\/external_account_bank_accounts\/object) where [controller.is_controller](\/api\/accounts\/object\#account_object-controller-is_controller) is \`true\`.
    paymentIntentLastPaymentError'NonNullableSource'Account :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentLastPaymentError'NonNullableSource'Account'NonNullableVariants)),
    -- | account_holder_name: The name of the person or business that owns the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'AccountHolderName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | account_holder_type: The type of entity that holds the account. This can be either \`individual\` or \`company\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'AccountHolderType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | account_type: The bank account type. This can only be \`checking\` or \`savings\` in most countries. In Japan, this can only be \`futsu\` or \`toza\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'AccountType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | ach_credit_transfer
    paymentIntentLastPaymentError'NonNullableSource'AchCreditTransfer :: (GHC.Maybe.Maybe SourceTypeAchCreditTransfer),
    -- | ach_debit
    paymentIntentLastPaymentError'NonNullableSource'AchDebit :: (GHC.Maybe.Maybe SourceTypeAchDebit),
    -- | acss_debit
    paymentIntentLastPaymentError'NonNullableSource'AcssDebit :: (GHC.Maybe.Maybe SourceTypeAcssDebit),
    -- | address_city: City\/District\/Suburb\/Town\/Village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'AddressCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_country: Billing address country, if provided when creating card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'AddressCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line1: Address line 1 (Street address\/PO Box\/Company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'AddressLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line1_check: If \`address_line1\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'AddressLine1Check :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line2: Address line 2 (Apartment\/Suite\/Unit\/Building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'AddressLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_state: State\/County\/Province\/Region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'AddressState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_zip: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'AddressZip :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_zip_check: If \`address_zip\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'AddressZipCheck :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | alipay
    paymentIntentLastPaymentError'NonNullableSource'Alipay :: (GHC.Maybe.Maybe SourceTypeAlipay),
    -- | allow_redisplay: This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
    paymentIntentLastPaymentError'NonNullableSource'AllowRedisplay :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullable)),
    -- | amount: A positive integer in the smallest currency unit (that is, 100 cents for \$1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for \`single_use\` sources.
    paymentIntentLastPaymentError'NonNullableSource'Amount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | au_becs_debit
    paymentIntentLastPaymentError'NonNullableSource'AuBecsDebit :: (GHC.Maybe.Maybe SourceTypeAuBecsDebit),
    -- | available_payout_methods: A set of available payout methods for this bank account. Only values from this set should be passed as the \`method\` when creating a payout.
    paymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullable])),
    -- | bancontact
    paymentIntentLastPaymentError'NonNullableSource'Bancontact :: (GHC.Maybe.Maybe SourceTypeBancontact),
    -- | bank_name: Name of the bank associated with the routing number (e.g., \`WELLS FARGO\`).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'BankName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | brand: Card brand. Can be \`American Express\`, \`Diners Club\`, \`Discover\`, \`Eftpos Australia\`, \`Girocard\`, \`JCB\`, \`MasterCard\`, \`UnionPay\`, \`Visa\`, or \`Unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Brand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | card
    paymentIntentLastPaymentError'NonNullableSource'Card :: (GHC.Maybe.Maybe SourceTypeCard),
    -- | card_present
    paymentIntentLastPaymentError'NonNullableSource'CardPresent :: (GHC.Maybe.Maybe SourceTypeCardPresent),
    -- | client_secret: The client secret of the source. Used for client-side retrieval using a publishable key.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'ClientSecret :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | code_verification:
    paymentIntentLastPaymentError'NonNullableSource'CodeVerification :: (GHC.Maybe.Maybe SourceCodeVerificationFlow),
    -- | country: Two-letter ISO code representing the country the bank account is located in.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    paymentIntentLastPaymentError'NonNullableSource'Created :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/payouts) paid out to the bank account.
    paymentIntentLastPaymentError'NonNullableSource'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | customer: The ID of the customer that the bank account is associated with.
    paymentIntentLastPaymentError'NonNullableSource'Customer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentLastPaymentError'NonNullableSource'Customer'NonNullableVariants)),
    -- | cvc_check: If a CVC was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`. A result of unchecked indicates that CVC was provided but hasn\'t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https:\/\/support.stripe.com\/questions\/check-if-a-card-is-valid-without-a-charge).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'CvcCheck :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | default_for_currency: Whether this bank account is the default external account for its currency.
    paymentIntentLastPaymentError'NonNullableSource'DefaultForCurrency :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Bool)),
    -- | dynamic_last4: (For tokenized numbers only.) The last four digits of the device account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'DynamicLast4 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | eps
    paymentIntentLastPaymentError'NonNullableSource'Eps :: (GHC.Maybe.Maybe SourceTypeEps),
    -- | exp_month: Two-digit number representing the card\'s expiration month.
    paymentIntentLastPaymentError'NonNullableSource'ExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | exp_year: Four-digit number representing the card\'s expiration year.
    paymentIntentLastPaymentError'NonNullableSource'ExpYear :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Fingerprint :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow: The authentication \`flow\` of the source. \`flow\` is one of \`redirect\`, \`receiver\`, \`code_verification\`, \`none\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Flow :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Funding :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | future_requirements: Information about the [upcoming new requirements for the bank account](https:\/\/stripe.com\/docs\/connect\/custom-accounts\/future-requirements), including what information needs to be collected, and by when.
    paymentIntentLastPaymentError'NonNullableSource'FutureRequirements :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullable)),
    -- | giropay
    paymentIntentLastPaymentError'NonNullableSource'Giropay :: (GHC.Maybe.Maybe SourceTypeGiropay),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | ideal
    paymentIntentLastPaymentError'NonNullableSource'Ideal :: (GHC.Maybe.Maybe SourceTypeIdeal),
    -- | iin: Issuer identification number of the card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Iin :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | klarna
    paymentIntentLastPaymentError'NonNullableSource'Klarna :: (GHC.Maybe.Maybe SourceTypeKlarna),
    -- | last4: The last four digits of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Last4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    paymentIntentLastPaymentError'NonNullableSource'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    paymentIntentLastPaymentError'NonNullableSource'Metadata :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Aeson.Types.Internal.Object)),
    -- | multibanco
    paymentIntentLastPaymentError'NonNullableSource'Multibanco :: (GHC.Maybe.Maybe SourceTypeMultibanco),
    -- | name: Cardholder name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Name :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | networks:
    paymentIntentLastPaymentError'NonNullableSource'Networks :: (GHC.Maybe.Maybe TokenCardNetworks),
    -- | object: String representing the object\'s type. Objects of the same type share the same value.
    paymentIntentLastPaymentError'NonNullableSource'Object :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'NonNullableSource'Object'),
    -- | owner: Information about the owner of the payment instrument that may be used or required by particular source types.
    paymentIntentLastPaymentError'NonNullableSource'Owner :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullable)),
    -- | p24
    paymentIntentLastPaymentError'NonNullableSource'P24 :: (GHC.Maybe.Maybe SourceTypeP24),
    -- | receiver:
    paymentIntentLastPaymentError'NonNullableSource'Receiver :: (GHC.Maybe.Maybe SourceReceiverFlow),
    -- | redirect:
    paymentIntentLastPaymentError'NonNullableSource'Redirect :: (GHC.Maybe.Maybe SourceRedirectFlow),
    -- | regulated_status: Status of a card based on the card issuer.
    paymentIntentLastPaymentError'NonNullableSource'RegulatedStatus :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullable)),
    -- | requirements: Information about the requirements for the bank account, including what information needs to be collected.
    paymentIntentLastPaymentError'NonNullableSource'Requirements :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullable)),
    -- | routing_number: The routing transit number for the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'RoutingNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | sepa_debit
    paymentIntentLastPaymentError'NonNullableSource'SepaDebit :: (GHC.Maybe.Maybe SourceTypeSepaDebit),
    -- | sofort
    paymentIntentLastPaymentError'NonNullableSource'Sofort :: (GHC.Maybe.Maybe SourceTypeSofort),
    -- | source_order:
    paymentIntentLastPaymentError'NonNullableSource'SourceOrder :: (GHC.Maybe.Maybe SourceOrder),
    -- | statement_descriptor: Extra information about a source. This will appear on your customer\'s statement every time you charge the source.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'StatementDescriptor :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | status: For bank accounts, possible values are \`new\`, \`validated\`, \`verified\`, \`verification_failed\`, or \`errored\`. A bank account that hasn\'t had any activity or validation performed is \`new\`. If Stripe can determine that the bank account exists, its status will be \`validated\`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be \`verified\`. If the verification failed for any reason, such as microdeposit failure, the status will be \`verification_failed\`. If a payout sent to this bank account fails, we\'ll set the status to \`errored\` and will not continue to send [scheduled payouts](https:\/\/stripe.com\/docs\/payouts\#payout-schedule) until the bank details are updated.
    --
    -- For external accounts, possible values are \`new\`, \`errored\` and \`verification_failed\`. If a payout fails, the status is set to \`errored\` and scheduled payouts are stopped until account details are updated. In the US and India, if we can\'t [verify the owner of the bank account](https:\/\/support.stripe.com\/questions\/bank-account-ownership-verification), we\'ll set the status to \`verification_failed\`. Other validations aren\'t run against external accounts because they\'re only used for payouts. This means the other statuses don\'t apply.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Status :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | three_d_secure
    paymentIntentLastPaymentError'NonNullableSource'ThreeDSecure :: (GHC.Maybe.Maybe SourceTypeThreeDSecure),
    -- | tokenization_method: If the card number is tokenized, this is the method that was used. Can be \`android_pay\` (includes Google Pay), \`apple_pay\`, \`masterpass\`, \`visa_checkout\`, or null.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'TokenizationMethod :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | type: The \`type\` of the source. The \`type\` is a payment method, one of \`ach_credit_transfer\`, \`ach_debit\`, \`alipay\`, \`bancontact\`, \`card\`, \`card_present\`, \`eps\`, \`giropay\`, \`ideal\`, \`multibanco\`, \`klarna\`, \`p24\`, \`sepa_debit\`, \`sofort\`, \`three_d_secure\`, or \`wechat\`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https:\/\/stripe.com\/docs\/sources) used.
    paymentIntentLastPaymentError'NonNullableSource'Type :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'NonNullableSource'Type'),
    -- | usage: Either \`reusable\` or \`single_use\`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Usage :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | wechat
    paymentIntentLastPaymentError'NonNullableSource'Wechat :: (GHC.Maybe.Maybe SourceTypeWechat)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableSource' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_credit_transfer" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AchCreditTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AchDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1_check" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressLine1Check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip_check" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressZipCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Alipay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_redisplay" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AllowRedisplay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AuBecsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_payout_methods" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Bancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'BankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Brand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Card obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_present" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'CardPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'ClientSecret obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code_verification" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'CodeVerification obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Created obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Customer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc_check" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'CvcCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_for_currency" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'DefaultForCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dynamic_last4" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'DynamicLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Eps obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_month" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'ExpMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_year" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'ExpYear obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Fingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Flow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Funding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'FutureRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Giropay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Ideal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("iin" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Iin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Klarna obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Last4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("livemode" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Livemode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Multibanco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("networks" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Networks obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Object obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("owner" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'P24 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receiver" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Receiver obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redirect" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Redirect obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("regulated_status" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'RegulatedStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Requirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'RoutingNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'SepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Sofort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source_order" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'SourceOrder obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'StatementDescriptor obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Status obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("three_d_secure" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'ThreeDSecure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tokenization_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'TokenizationMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Usage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Wechat obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_credit_transfer" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AchCreditTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AchDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1_check" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressLine1Check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip_check" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AddressZipCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Alipay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_redisplay" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AllowRedisplay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AuBecsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_payout_methods" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Bancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'BankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Brand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Card obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_present" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'CardPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'ClientSecret obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code_verification" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'CodeVerification obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Created obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Customer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc_check" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'CvcCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_for_currency" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'DefaultForCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dynamic_last4" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'DynamicLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Eps obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_month" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'ExpMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_year" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'ExpYear obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Fingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Flow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Funding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'FutureRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Giropay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Ideal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("iin" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Iin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Klarna obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Last4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("livemode" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Livemode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Multibanco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("networks" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Networks obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Object obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("owner" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'P24 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receiver" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Receiver obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redirect" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Redirect obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("regulated_status" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'RegulatedStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Requirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'RoutingNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'SepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Sofort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source_order" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'SourceOrder obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'StatementDescriptor obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Status obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("three_d_secure" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'ThreeDSecure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tokenization_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'TokenizationMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Usage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Wechat obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableSource' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentLastPaymentError'NonNullableSource'" (\obj -> (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure PaymentIntentLastPaymentError'NonNullableSource' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acss_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_redisplay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "au_becs_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "code_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "future_requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "iin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "networks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "receiver")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "regulated_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "source_order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tokenization_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wechat"))

-- | Create a new 'PaymentIntentLastPaymentError'NonNullableSource'' with all required fields.
mkPaymentIntentLastPaymentError'NonNullableSource' :: PaymentIntentLastPaymentError'NonNullableSource'
mkPaymentIntentLastPaymentError'NonNullableSource' =
  PaymentIntentLastPaymentError'NonNullableSource'
    { paymentIntentLastPaymentError'NonNullableSource'Account = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AccountHolderName = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AccountHolderType = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AccountType = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AchCreditTransfer = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AchDebit = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AcssDebit = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AddressCity = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AddressCountry = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AddressLine1 = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AddressLine1Check = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AddressLine2 = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AddressState = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AddressZip = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AddressZipCheck = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Alipay = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AllowRedisplay = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Amount = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AuBecsDebit = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Bancontact = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'BankName = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Brand = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Card = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'CardPresent = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'ClientSecret = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'CodeVerification = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Country = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Created = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Currency = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Customer = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'CvcCheck = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'DefaultForCurrency = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'DynamicLast4 = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Eps = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'ExpMonth = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'ExpYear = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Fingerprint = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Flow = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Funding = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'FutureRequirements = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Giropay = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Id = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Ideal = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Iin = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Klarna = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Last4 = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Livemode = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Metadata = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Multibanco = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Name = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Networks = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Object = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'P24 = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Receiver = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Redirect = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'RegulatedStatus = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Requirements = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'RoutingNumber = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'SepaDebit = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Sofort = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'SourceOrder = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'StatementDescriptor = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Status = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'ThreeDSecure = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'TokenizationMethod = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Type = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Usage = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Wechat = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.source.anyOf.properties.account.anyOf@ in the specification.
--
-- The account this bank account belongs to. Only applicable on Accounts (not customers or recipients) This property is only available when returned as an [External Account](\/api\/external_account_bank_accounts\/object) where [controller.is_controller](\/api\/accounts\/object\#account_object-controller-is_controller) is \`true\`.
data PaymentIntentLastPaymentError'NonNullableSource'Account'NonNullableVariants
  = PaymentIntentLastPaymentError'NonNullableSource'Account'NonNullableText Data.Text.Internal.Text
  | PaymentIntentLastPaymentError'NonNullableSource'Account'NonNullableAccount Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableSource'Account'NonNullableVariants where
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Account'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Account'NonNullableAccount a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableSource'Account'NonNullableVariants where
  parseJSON val = case (PaymentIntentLastPaymentError'NonNullableSource'Account'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentIntentLastPaymentError'NonNullableSource'Account'NonNullableAccount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.source.anyOf.properties.allow_redisplay@ in the specification.
--
-- This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
data PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"always"@
    PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableEnumAlways
  | -- | Represents the JSON value @"limited"@
    PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableEnumLimited
  | -- | Represents the JSON value @"unspecified"@
    PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableEnumUnspecified
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullable where
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableOther val) = val
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableEnumAlways) = "always"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableEnumLimited) = "limited"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableEnumUnspecified) = "unspecified"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "always" -> PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableEnumAlways
          | val GHC.Classes.== "limited" -> PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableEnumLimited
          | val GHC.Classes.== "unspecified" -> PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableEnumUnspecified
          | GHC.Base.otherwise -> PaymentIntentLastPaymentError'NonNullableSource'AllowRedisplay'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.source.anyOf.properties.available_payout_methods.items@ in the specification.
data PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"instant"@
    PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullableEnumInstant
  | -- | Represents the JSON value @"standard"@
    PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullableEnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullable where
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullableOther val) = val
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullableEnumInstant) = "instant"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullableEnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "instant" -> PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullableEnumInstant
          | val GHC.Classes.== "standard" -> PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullableEnumStandard
          | GHC.Base.otherwise -> PaymentIntentLastPaymentError'NonNullableSource'AvailablePayoutMethods'NonNullableOther val
      )

-- | Defines the oneOf schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.source.anyOf.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer that the bank account is associated with.
data PaymentIntentLastPaymentError'NonNullableSource'Customer'NonNullableVariants
  = PaymentIntentLastPaymentError'NonNullableSource'Customer'NonNullableText Data.Text.Internal.Text
  | PaymentIntentLastPaymentError'NonNullableSource'Customer'NonNullableCustomer Customer
  | PaymentIntentLastPaymentError'NonNullableSource'Customer'NonNullableDeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableSource'Customer'NonNullableVariants where
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Customer'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Customer'NonNullableCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Customer'NonNullableDeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableSource'Customer'NonNullableVariants where
  parseJSON val = case (PaymentIntentLastPaymentError'NonNullableSource'Customer'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentIntentLastPaymentError'NonNullableSource'Customer'NonNullableCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentIntentLastPaymentError'NonNullableSource'Customer'NonNullableDeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.source.anyOf.properties.future_requirements.anyOf@ in the specification.
--
-- Information about the [upcoming new requirements for the bank account](https:\\\/\\\/stripe.com\\\/docs\\\/connect\\\/custom-accounts\\\/future-requirements), including what information needs to be collected, and by when.
data PaymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullable = PaymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullable
  { -- | currently_due: Fields that need to be collected to keep the external account enabled. If not collected by \`current_deadline\`, these fields appear in \`past_due\` as well, and the account is disabled.
    paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullableCurrentlyDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text])),
    -- | errors: Fields that are \`currently_due\` and need to be collected again because validation or verification failed.
    paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullableErrors :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [AccountRequirementsError])),
    -- | past_due: Fields that weren\'t collected by \`current_deadline\`. These fields need to be collected to enable the external account.
    paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullablePastDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text])),
    -- | pending_verification: Fields that might become required depending on the results of verification or review. It\'s an empty array unless an asynchronous verification is pending. If verification fails, these fields move to \`eventually_due\`, \`currently_due\`, or \`past_due\`. Fields might appear in \`eventually_due\`, \`currently_due\`, or \`past_due\` and in \`pending_verification\` if verification fails but another verification is still pending.
    paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullablePendingVerification :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullablePendingVerification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullablePendingVerification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullable" (\obj -> (((GHC.Base.pure PaymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pending_verification"))

-- | Create a new 'PaymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullable' with all required fields.
mkPaymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullable :: PaymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullable
mkPaymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullable =
  PaymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullable
    { paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullableCurrentlyDue = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullableErrors = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullablePastDue = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'FutureRequirements'NonNullablePendingVerification = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.source.anyOf.properties.object@ in the specification.
--
-- String representing the object\'s type. Objects of the same type share the same value.
data PaymentIntentLastPaymentError'NonNullableSource'Object'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentLastPaymentError'NonNullableSource'Object'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentLastPaymentError'NonNullableSource'Object'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"bank_account"@
    PaymentIntentLastPaymentError'NonNullableSource'Object'EnumBankAccount
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableSource'Object' where
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Object'Other val) = val
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Object'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Object'EnumBankAccount) = "bank_account"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableSource'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "bank_account" -> PaymentIntentLastPaymentError'NonNullableSource'Object'EnumBankAccount
          | GHC.Base.otherwise -> PaymentIntentLastPaymentError'NonNullableSource'Object'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.source.anyOf.properties.owner.anyOf@ in the specification.
--
-- Information about the owner of the payment instrument that may be used or required by particular source types.
data PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullable = PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullable
  { -- | address: Owner\'s address.
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullable)),
    -- | email: Owner\'s email address.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableEmail :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: Owner\'s full name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | phone: Owner\'s phone number (including extension).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullablePhone :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | verified_address: Verified owner\'s address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable)),
    -- | verified_email: Verified owner\'s email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedEmail :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | verified_name: Verified owner\'s full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | verified_phone: Verified owner\'s phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedPhone :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullablePhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_address" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_email" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_name" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_phone" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedPhone obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullablePhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_address" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_email" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_name" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_phone" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedPhone obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullable" (\obj -> (((((((GHC.Base.pure PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verified_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verified_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verified_phone"))

-- | Create a new 'PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullable' with all required fields.
mkPaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullable :: PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullable
mkPaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullable =
  PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullable
    { paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableEmail = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableName = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullablePhone = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedEmail = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedName = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedPhone = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.source.anyOf.properties.owner.anyOf.properties.address.anyOf@ in the specification.
--
-- Owner\\\'s address.
data PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullable = PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullable
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullablePostalCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableState obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableState obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullable" (\obj -> (((((GHC.Base.pure PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullable' with all required fields.
mkPaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullable :: PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullable
mkPaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullable =
  PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullable
    { paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableCity = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableCountry = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine1 = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine2 = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullablePostalCode = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableAddress'NonNullableState = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.source.anyOf.properties.owner.anyOf.properties.verified_address.anyOf@ in the specification.
--
-- Verified owner\\\'s address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
data PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable = PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullablePostalCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableState obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableState obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable" (\obj -> (((((GHC.Base.pure PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable' with all required fields.
mkPaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable :: PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable
mkPaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable =
  PaymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable
    { paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCity = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCountry = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine1 = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine2 = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullablePostalCode = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableState = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.source.anyOf.properties.regulated_status@ in the specification.
--
-- Status of a card based on the card issuer.
data PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"regulated"@
    PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullableEnumRegulated
  | -- | Represents the JSON value @"unregulated"@
    PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullableEnumUnregulated
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullable where
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullableOther val) = val
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullableEnumRegulated) = "regulated"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullableEnumUnregulated) = "unregulated"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "regulated" -> PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullableEnumRegulated
          | val GHC.Classes.== "unregulated" -> PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullableEnumUnregulated
          | GHC.Base.otherwise -> PaymentIntentLastPaymentError'NonNullableSource'RegulatedStatus'NonNullableOther val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.source.anyOf.properties.requirements.anyOf@ in the specification.
--
-- Information about the requirements for the bank account, including what information needs to be collected.
data PaymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullable = PaymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullable
  { -- | currently_due: Fields that need to be collected to keep the external account enabled. If not collected by \`current_deadline\`, these fields appear in \`past_due\` as well, and the account is disabled.
    paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullableCurrentlyDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text])),
    -- | errors: Fields that are \`currently_due\` and need to be collected again because validation or verification failed.
    paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullableErrors :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [AccountRequirementsError])),
    -- | past_due: Fields that weren\'t collected by \`current_deadline\`. These fields need to be collected to enable the external account.
    paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullablePastDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text])),
    -- | pending_verification: Fields that might become required depending on the results of verification or review. It\'s an empty array unless an asynchronous verification is pending. If verification fails, these fields move to \`eventually_due\`, \`currently_due\`, or \`past_due\`. Fields might appear in \`eventually_due\`, \`currently_due\`, or \`past_due\` and in \`pending_verification\` if verification fails but another verification is still pending.
    paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullablePendingVerification :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullablePendingVerification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullablePendingVerification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullable" (\obj -> (((GHC.Base.pure PaymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pending_verification"))

-- | Create a new 'PaymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullable' with all required fields.
mkPaymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullable :: PaymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullable
mkPaymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullable =
  PaymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullable
    { paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullableCurrentlyDue = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullableErrors = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullablePastDue = GHC.Maybe.Nothing,
      paymentIntentLastPaymentError'NonNullableSource'Requirements'NonNullablePendingVerification = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.source.anyOf.properties.type@ in the specification.
--
-- The \`type\` of the source. The \`type\` is a payment method, one of \`ach_credit_transfer\`, \`ach_debit\`, \`alipay\`, \`bancontact\`, \`card\`, \`card_present\`, \`eps\`, \`giropay\`, \`ideal\`, \`multibanco\`, \`klarna\`, \`p24\`, \`sepa_debit\`, \`sofort\`, \`three_d_secure\`, or \`wechat\`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https:\/\/stripe.com\/docs\/sources) used.
data PaymentIntentLastPaymentError'NonNullableSource'Type'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentLastPaymentError'NonNullableSource'Type'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentLastPaymentError'NonNullableSource'Type'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"ach_credit_transfer"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAchCreditTransfer
  | -- | Represents the JSON value @"ach_debit"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAchDebit
  | -- | Represents the JSON value @"acss_debit"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAcssDebit
  | -- | Represents the JSON value @"alipay"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAlipay
  | -- | Represents the JSON value @"au_becs_debit"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAuBecsDebit
  | -- | Represents the JSON value @"bancontact"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumBancontact
  | -- | Represents the JSON value @"card"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumCard
  | -- | Represents the JSON value @"card_present"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumCardPresent
  | -- | Represents the JSON value @"eps"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumEps
  | -- | Represents the JSON value @"giropay"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumGiropay
  | -- | Represents the JSON value @"ideal"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumIdeal
  | -- | Represents the JSON value @"klarna"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumKlarna
  | -- | Represents the JSON value @"multibanco"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumMultibanco
  | -- | Represents the JSON value @"p24"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumP24
  | -- | Represents the JSON value @"sepa_debit"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumSepaDebit
  | -- | Represents the JSON value @"sofort"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumSofort
  | -- | Represents the JSON value @"three_d_secure"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumThreeDSecure
  | -- | Represents the JSON value @"wechat"@
    PaymentIntentLastPaymentError'NonNullableSource'Type'EnumWechat
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableSource'Type' where
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'Other val) = val
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAchCreditTransfer) = "ach_credit_transfer"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAchDebit) = "ach_debit"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAcssDebit) = "acss_debit"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAlipay) = "alipay"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAuBecsDebit) = "au_becs_debit"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumBancontact) = "bancontact"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumCard) = "card"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumCardPresent) = "card_present"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumEps) = "eps"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumGiropay) = "giropay"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumIdeal) = "ideal"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumKlarna) = "klarna"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumMultibanco) = "multibanco"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumP24) = "p24"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumSepaDebit) = "sepa_debit"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumSofort) = "sofort"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumThreeDSecure) = "three_d_secure"
  toJSON (PaymentIntentLastPaymentError'NonNullableSource'Type'EnumWechat) = "wechat"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableSource'Type' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "ach_credit_transfer" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAchCreditTransfer
          | val GHC.Classes.== "ach_debit" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAchDebit
          | val GHC.Classes.== "acss_debit" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAcssDebit
          | val GHC.Classes.== "alipay" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAlipay
          | val GHC.Classes.== "au_becs_debit" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumAuBecsDebit
          | val GHC.Classes.== "bancontact" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumBancontact
          | val GHC.Classes.== "card" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumCard
          | val GHC.Classes.== "card_present" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumCardPresent
          | val GHC.Classes.== "eps" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumEps
          | val GHC.Classes.== "giropay" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumGiropay
          | val GHC.Classes.== "ideal" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumIdeal
          | val GHC.Classes.== "klarna" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumKlarna
          | val GHC.Classes.== "multibanco" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumMultibanco
          | val GHC.Classes.== "p24" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumP24
          | val GHC.Classes.== "sepa_debit" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumSepaDebit
          | val GHC.Classes.== "sofort" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumSofort
          | val GHC.Classes.== "three_d_secure" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumThreeDSecure
          | val GHC.Classes.== "wechat" -> PaymentIntentLastPaymentError'NonNullableSource'Type'EnumWechat
          | GHC.Base.otherwise -> PaymentIntentLastPaymentError'NonNullableSource'Type'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.last_payment_error.anyOf.properties.type@ in the specification.
--
-- The type of error returned. One of \`api_error\`, \`card_error\`, \`idempotency_error\`, or \`invalid_request_error\`
data PaymentIntentLastPaymentError'NonNullableType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentLastPaymentError'NonNullableType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentLastPaymentError'NonNullableType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"api_error"@
    PaymentIntentLastPaymentError'NonNullableType'EnumApiError
  | -- | Represents the JSON value @"card_error"@
    PaymentIntentLastPaymentError'NonNullableType'EnumCardError
  | -- | Represents the JSON value @"idempotency_error"@
    PaymentIntentLastPaymentError'NonNullableType'EnumIdempotencyError
  | -- | Represents the JSON value @"invalid_request_error"@
    PaymentIntentLastPaymentError'NonNullableType'EnumInvalidRequestError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLastPaymentError'NonNullableType' where
  toJSON (PaymentIntentLastPaymentError'NonNullableType'Other val) = val
  toJSON (PaymentIntentLastPaymentError'NonNullableType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentLastPaymentError'NonNullableType'EnumApiError) = "api_error"
  toJSON (PaymentIntentLastPaymentError'NonNullableType'EnumCardError) = "card_error"
  toJSON (PaymentIntentLastPaymentError'NonNullableType'EnumIdempotencyError) = "idempotency_error"
  toJSON (PaymentIntentLastPaymentError'NonNullableType'EnumInvalidRequestError) = "invalid_request_error"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'NonNullableType' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "api_error" -> PaymentIntentLastPaymentError'NonNullableType'EnumApiError
          | val GHC.Classes.== "card_error" -> PaymentIntentLastPaymentError'NonNullableType'EnumCardError
          | val GHC.Classes.== "idempotency_error" -> PaymentIntentLastPaymentError'NonNullableType'EnumIdempotencyError
          | val GHC.Classes.== "invalid_request_error" -> PaymentIntentLastPaymentError'NonNullableType'EnumInvalidRequestError
          | GHC.Base.otherwise -> PaymentIntentLastPaymentError'NonNullableType'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.payment_intent.properties.latest_charge.anyOf@ in the specification.
--
-- ID of the latest [Charge object](https:\/\/stripe.com\/docs\/api\/charges) created by this PaymentIntent. This property is \`null\` until PaymentIntent confirmation is attempted.
data PaymentIntentLatestCharge'NonNullableVariants
  = PaymentIntentLatestCharge'NonNullableText Data.Text.Internal.Text
  | PaymentIntentLatestCharge'NonNullableCharge Charge
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentLatestCharge'NonNullableVariants where
  toJSON (PaymentIntentLatestCharge'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentIntentLatestCharge'NonNullableCharge a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLatestCharge'NonNullableVariants where
  parseJSON val = case (PaymentIntentLatestCharge'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentIntentLatestCharge'NonNullableCharge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.payment_intent.properties.next_action.anyOf@ in the specification.
data PaymentIntentNextAction'NonNullable = PaymentIntentNextAction'NonNullable
  { -- | alipay_handle_redirect:
    paymentIntentNextAction'NonNullableAlipayHandleRedirect :: (GHC.Maybe.Maybe PaymentIntentNextActionAlipayHandleRedirect),
    -- | boleto_display_details:
    paymentIntentNextAction'NonNullableBoletoDisplayDetails :: (GHC.Maybe.Maybe PaymentIntentNextActionBoleto),
    -- | card_await_notification:
    paymentIntentNextAction'NonNullableCardAwaitNotification :: (GHC.Maybe.Maybe PaymentIntentNextActionCardAwaitNotification),
    -- | cashapp_handle_redirect_or_display_qr_code:
    paymentIntentNextAction'NonNullableCashappHandleRedirectOrDisplayQrCode :: (GHC.Maybe.Maybe PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode),
    -- | display_bank_transfer_instructions:
    paymentIntentNextAction'NonNullableDisplayBankTransferInstructions :: (GHC.Maybe.Maybe PaymentIntentNextActionDisplayBankTransferInstructions),
    -- | konbini_display_details:
    paymentIntentNextAction'NonNullableKonbiniDisplayDetails :: (GHC.Maybe.Maybe PaymentIntentNextActionKonbini),
    -- | multibanco_display_details:
    paymentIntentNextAction'NonNullableMultibancoDisplayDetails :: (GHC.Maybe.Maybe PaymentIntentNextActionDisplayMultibancoDetails),
    -- | oxxo_display_details:
    paymentIntentNextAction'NonNullableOxxoDisplayDetails :: (GHC.Maybe.Maybe PaymentIntentNextActionDisplayOxxoDetails),
    -- | paynow_display_qr_code:
    paymentIntentNextAction'NonNullablePaynowDisplayQrCode :: (GHC.Maybe.Maybe PaymentIntentNextActionPaynowDisplayQrCode),
    -- | pix_display_qr_code:
    paymentIntentNextAction'NonNullablePixDisplayQrCode :: (GHC.Maybe.Maybe PaymentIntentNextActionPixDisplayQrCode),
    -- | promptpay_display_qr_code:
    paymentIntentNextAction'NonNullablePromptpayDisplayQrCode :: (GHC.Maybe.Maybe PaymentIntentNextActionPromptpayDisplayQrCode),
    -- | redirect_to_url:
    paymentIntentNextAction'NonNullableRedirectToUrl :: (GHC.Maybe.Maybe PaymentIntentNextActionRedirectToUrl),
    -- | swish_handle_redirect_or_display_qr_code:
    paymentIntentNextAction'NonNullableSwishHandleRedirectOrDisplayQrCode :: (GHC.Maybe.Maybe PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode),
    -- | type: Type of the next action to perform. Refer to the other child attributes under \`next_action\` for available values. Examples include: \`redirect_to_url\`, \`use_stripe_sdk\`, \`alipay_handle_redirect\`, \`oxxo_display_details\`, or \`verify_with_microdeposits\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentNextAction'NonNullableType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | use_stripe_sdk: When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
    paymentIntentNextAction'NonNullableUseStripeSdk :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | verify_with_microdeposits:
    paymentIntentNextAction'NonNullableVerifyWithMicrodeposits :: (GHC.Maybe.Maybe PaymentIntentNextActionVerifyWithMicrodeposits),
    -- | wechat_pay_display_qr_code:
    paymentIntentNextAction'NonNullableWechatPayDisplayQrCode :: (GHC.Maybe.Maybe PaymentIntentNextActionWechatPayDisplayQrCode),
    -- | wechat_pay_redirect_to_android_app:
    paymentIntentNextAction'NonNullableWechatPayRedirectToAndroidApp :: (GHC.Maybe.Maybe PaymentIntentNextActionWechatPayRedirectToAndroidApp),
    -- | wechat_pay_redirect_to_ios_app:
    paymentIntentNextAction'NonNullableWechatPayRedirectToIosApp :: (GHC.Maybe.Maybe PaymentIntentNextActionWechatPayRedirectToIosApp)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentNextAction'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay_handle_redirect" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableAlipayHandleRedirect obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("boleto_display_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableBoletoDisplayDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_await_notification" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableCardAwaitNotification obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashapp_handle_redirect_or_display_qr_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableCashappHandleRedirectOrDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_bank_transfer_instructions" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableDisplayBankTransferInstructions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("konbini_display_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableKonbiniDisplayDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco_display_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableMultibancoDisplayDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("oxxo_display_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableOxxoDisplayDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paynow_display_qr_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullablePaynowDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pix_display_qr_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullablePixDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("promptpay_display_qr_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullablePromptpayDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redirect_to_url" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableRedirectToUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("swish_handle_redirect_or_display_qr_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableSwishHandleRedirectOrDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("use_stripe_sdk" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableUseStripeSdk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_with_microdeposits" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableVerifyWithMicrodeposits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat_pay_display_qr_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableWechatPayDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat_pay_redirect_to_android_app" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableWechatPayRedirectToAndroidApp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat_pay_redirect_to_ios_app" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableWechatPayRedirectToIosApp obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay_handle_redirect" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableAlipayHandleRedirect obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("boleto_display_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableBoletoDisplayDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_await_notification" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableCardAwaitNotification obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashapp_handle_redirect_or_display_qr_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableCashappHandleRedirectOrDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_bank_transfer_instructions" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableDisplayBankTransferInstructions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("konbini_display_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableKonbiniDisplayDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco_display_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableMultibancoDisplayDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("oxxo_display_details" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableOxxoDisplayDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paynow_display_qr_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullablePaynowDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pix_display_qr_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullablePixDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("promptpay_display_qr_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullablePromptpayDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redirect_to_url" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableRedirectToUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("swish_handle_redirect_or_display_qr_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableSwishHandleRedirectOrDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("use_stripe_sdk" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableUseStripeSdk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_with_microdeposits" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableVerifyWithMicrodeposits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat_pay_display_qr_code" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableWechatPayDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat_pay_redirect_to_android_app" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableWechatPayRedirectToAndroidApp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat_pay_redirect_to_ios_app" Data.Aeson.Types.ToJSON..=)) (paymentIntentNextAction'NonNullableWechatPayRedirectToIosApp obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentNextAction'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentNextAction'NonNullable" (\obj -> ((((((((((((((((((GHC.Base.pure PaymentIntentNextAction'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alipay_handle_redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "boleto_display_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_await_notification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cashapp_handle_redirect_or_display_qr_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "display_bank_transfer_instructions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "konbini_display_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "multibanco_display_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "oxxo_display_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "paynow_display_qr_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pix_display_qr_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "promptpay_display_qr_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "redirect_to_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "swish_handle_redirect_or_display_qr_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "use_stripe_sdk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verify_with_microdeposits")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wechat_pay_display_qr_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wechat_pay_redirect_to_android_app")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wechat_pay_redirect_to_ios_app"))

-- | Create a new 'PaymentIntentNextAction'NonNullable' with all required fields.
mkPaymentIntentNextAction'NonNullable :: PaymentIntentNextAction'NonNullable
mkPaymentIntentNextAction'NonNullable =
  PaymentIntentNextAction'NonNullable
    { paymentIntentNextAction'NonNullableAlipayHandleRedirect = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableBoletoDisplayDetails = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableCardAwaitNotification = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableCashappHandleRedirectOrDisplayQrCode = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableDisplayBankTransferInstructions = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableKonbiniDisplayDetails = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableMultibancoDisplayDetails = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableOxxoDisplayDetails = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullablePaynowDisplayQrCode = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullablePixDisplayQrCode = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullablePromptpayDisplayQrCode = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableRedirectToUrl = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableSwishHandleRedirectOrDisplayQrCode = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableType = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableUseStripeSdk = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableVerifyWithMicrodeposits = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableWechatPayDisplayQrCode = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableWechatPayRedirectToAndroidApp = GHC.Maybe.Nothing,
      paymentIntentNextAction'NonNullableWechatPayRedirectToIosApp = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.payment_intent.properties.on_behalf_of.anyOf@ in the specification.
--
-- The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https:\/\/stripe.com\/docs\/payments\/connected-accounts) for details.
data PaymentIntentOnBehalfOf'NonNullableVariants
  = PaymentIntentOnBehalfOf'NonNullableText Data.Text.Internal.Text
  | PaymentIntentOnBehalfOf'NonNullableAccount Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentOnBehalfOf'NonNullableVariants where
  toJSON (PaymentIntentOnBehalfOf'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentIntentOnBehalfOf'NonNullableAccount a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentOnBehalfOf'NonNullableVariants where
  parseJSON val = case (PaymentIntentOnBehalfOf'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentIntentOnBehalfOf'NonNullableAccount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.payment_intent.properties.payment_method.anyOf@ in the specification.
--
-- ID of the payment method used in this PaymentIntent.
data PaymentIntentPaymentMethod'NonNullableVariants
  = PaymentIntentPaymentMethod'NonNullableText Data.Text.Internal.Text
  | PaymentIntentPaymentMethod'NonNullablePaymentMethod PaymentMethod
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethod'NonNullableVariants where
  toJSON (PaymentIntentPaymentMethod'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentIntentPaymentMethod'NonNullablePaymentMethod a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethod'NonNullableVariants where
  parseJSON val = case (PaymentIntentPaymentMethod'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentIntentPaymentMethod'NonNullablePaymentMethod Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_configuration_details.anyOf@ in the specification.
--
-- Information about the [payment method configuration](https:\\\/\\\/stripe.com\\\/docs\\\/api\\\/payment_method_configurations) used for this PaymentIntent.
data PaymentIntentPaymentMethodConfigurationDetails'NonNullable = PaymentIntentPaymentMethodConfigurationDetails'NonNullable
  { -- | id: ID of the payment method configuration used.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodConfigurationDetails'NonNullableId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | parent: ID of the parent payment method configuration used.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodConfigurationDetails'NonNullableParent :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodConfigurationDetails'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodConfigurationDetails'NonNullableId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodConfigurationDetails'NonNullableParent obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodConfigurationDetails'NonNullableId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodConfigurationDetails'NonNullableParent obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodConfigurationDetails'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodConfigurationDetails'NonNullable" (\obj -> (GHC.Base.pure PaymentIntentPaymentMethodConfigurationDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "parent"))

-- | Create a new 'PaymentIntentPaymentMethodConfigurationDetails'NonNullable' with all required fields.
mkPaymentIntentPaymentMethodConfigurationDetails'NonNullable :: PaymentIntentPaymentMethodConfigurationDetails'NonNullable
mkPaymentIntentPaymentMethodConfigurationDetails'NonNullable =
  PaymentIntentPaymentMethodConfigurationDetails'NonNullable
    { paymentIntentPaymentMethodConfigurationDetails'NonNullableId = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodConfigurationDetails'NonNullableParent = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf@ in the specification.
--
-- Payment-method-specific configuration for this PaymentIntent.
data PaymentIntentPaymentMethodOptions'NonNullable = PaymentIntentPaymentMethodOptions'NonNullable
  { -- | acss_debit
    paymentIntentPaymentMethodOptions'NonNullableAcssDebit :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'),
    -- | affirm
    paymentIntentPaymentMethodOptions'NonNullableAffirm :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAffirm'),
    -- | afterpay_clearpay
    paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'),
    -- | alipay
    paymentIntentPaymentMethodOptions'NonNullableAlipay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAlipay'),
    -- | alma
    paymentIntentPaymentMethodOptions'NonNullableAlma :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAlma'),
    -- | amazon_pay
    paymentIntentPaymentMethodOptions'NonNullableAmazonPay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'),
    -- | au_becs_debit
    paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'),
    -- | bacs_debit
    paymentIntentPaymentMethodOptions'NonNullableBacsDebit :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'),
    -- | bancontact
    paymentIntentPaymentMethodOptions'NonNullableBancontact :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBancontact'),
    -- | billie
    paymentIntentPaymentMethodOptions'NonNullableBillie :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBillie'),
    -- | blik
    paymentIntentPaymentMethodOptions'NonNullableBlik :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBlik'),
    -- | boleto
    paymentIntentPaymentMethodOptions'NonNullableBoleto :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBoleto'),
    -- | card
    paymentIntentPaymentMethodOptions'NonNullableCard :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCard'),
    -- | card_present
    paymentIntentPaymentMethodOptions'NonNullableCardPresent :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCardPresent'),
    -- | cashapp
    paymentIntentPaymentMethodOptions'NonNullableCashapp :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCashapp'),
    -- | crypto
    paymentIntentPaymentMethodOptions'NonNullableCrypto :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCrypto'),
    -- | customer_balance
    paymentIntentPaymentMethodOptions'NonNullableCustomerBalance :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'),
    -- | eps
    paymentIntentPaymentMethodOptions'NonNullableEps :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableEps'),
    -- | fpx
    paymentIntentPaymentMethodOptions'NonNullableFpx :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableFpx'),
    -- | giropay
    paymentIntentPaymentMethodOptions'NonNullableGiropay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableGiropay'),
    -- | grabpay
    paymentIntentPaymentMethodOptions'NonNullableGrabpay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableGrabpay'),
    -- | ideal
    paymentIntentPaymentMethodOptions'NonNullableIdeal :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableIdeal'),
    -- | interac_present
    paymentIntentPaymentMethodOptions'NonNullableInteracPresent :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'),
    -- | kakao_pay
    paymentIntentPaymentMethodOptions'NonNullableKakaoPay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'),
    -- | klarna
    paymentIntentPaymentMethodOptions'NonNullableKlarna :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKlarna'),
    -- | konbini
    paymentIntentPaymentMethodOptions'NonNullableKonbini :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKonbini'),
    -- | kr_card
    paymentIntentPaymentMethodOptions'NonNullableKrCard :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKrCard'),
    -- | link
    paymentIntentPaymentMethodOptions'NonNullableLink :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableLink'),
    -- | mobilepay
    paymentIntentPaymentMethodOptions'NonNullableMobilepay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableMobilepay'),
    -- | multibanco
    paymentIntentPaymentMethodOptions'NonNullableMultibanco :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableMultibanco'),
    -- | naver_pay
    paymentIntentPaymentMethodOptions'NonNullableNaverPay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableNaverPay'),
    -- | nz_bank_account
    paymentIntentPaymentMethodOptions'NonNullableNzBankAccount :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'),
    -- | oxxo
    paymentIntentPaymentMethodOptions'NonNullableOxxo :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableOxxo'),
    -- | p24
    paymentIntentPaymentMethodOptions'NonNullableP24 :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableP24'),
    -- | pay_by_bank
    paymentIntentPaymentMethodOptions'NonNullablePayByBank :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePayByBank'),
    -- | payco
    paymentIntentPaymentMethodOptions'NonNullablePayco :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePayco'),
    -- | paynow
    paymentIntentPaymentMethodOptions'NonNullablePaynow :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePaynow'),
    -- | paypal
    paymentIntentPaymentMethodOptions'NonNullablePaypal :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePaypal'),
    -- | pix
    paymentIntentPaymentMethodOptions'NonNullablePix :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePix'),
    -- | promptpay
    paymentIntentPaymentMethodOptions'NonNullablePromptpay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePromptpay'),
    -- | revolut_pay
    paymentIntentPaymentMethodOptions'NonNullableRevolutPay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'),
    -- | samsung_pay
    paymentIntentPaymentMethodOptions'NonNullableSamsungPay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'),
    -- | satispay
    paymentIntentPaymentMethodOptions'NonNullableSatispay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSatispay'),
    -- | sepa_debit
    paymentIntentPaymentMethodOptions'NonNullableSepaDebit :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'),
    -- | sofort
    paymentIntentPaymentMethodOptions'NonNullableSofort :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSofort'),
    -- | swish
    paymentIntentPaymentMethodOptions'NonNullableSwish :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSwish'),
    -- | twint
    paymentIntentPaymentMethodOptions'NonNullableTwint :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableTwint'),
    -- | us_bank_account
    paymentIntentPaymentMethodOptions'NonNullableUsBankAccount :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'),
    -- | wechat_pay
    paymentIntentPaymentMethodOptions'NonNullableWechatPay :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableWechatPay'),
    -- | zip
    paymentIntentPaymentMethodOptions'NonNullableZip :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableZip')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("affirm" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("afterpay_clearpay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alma" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amazon_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bacs_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billie" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("blik" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("boleto" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_present" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashapp" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("crypto" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_balance" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fpx" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("grabpay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interac_present" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kakao_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("konbini" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kr_card" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("link" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mobilepay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("naver_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nz_bank_account" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("oxxo" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pay_by_bank" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payco" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paynow" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paypal" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pix" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("promptpay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revolut_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("samsung_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("satispay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("swish" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("twint" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zip" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("affirm" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("afterpay_clearpay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alma" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amazon_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bacs_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billie" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("blik" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("boleto" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_present" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashapp" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("crypto" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_balance" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fpx" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("grabpay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interac_present" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kakao_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("konbini" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kr_card" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("link" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mobilepay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("naver_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nz_bank_account" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("oxxo" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pay_by_bank" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payco" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paynow" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paypal" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pix" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("promptpay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revolut_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("samsung_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("satispay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("swish" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("twint" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat_pay" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zip" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullable" (\obj -> (((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acss_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "affirm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "afterpay_clearpay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alma")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amazon_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "au_becs_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bacs_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "billie")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "blik")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "boleto")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cashapp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "crypto")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fpx")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "grabpay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interac_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "kakao_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "konbini")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "kr_card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "link")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mobilepay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "naver_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "nz_bank_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "oxxo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pay_by_bank")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "paynow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "paypal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "promptpay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "revolut_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "samsung_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "satispay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "swish")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "twint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "us_bank_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wechat_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "zip"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullable' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullable :: PaymentIntentPaymentMethodOptions'NonNullable
mkPaymentIntentPaymentMethodOptions'NonNullable =
  PaymentIntentPaymentMethodOptions'NonNullable
    { paymentIntentPaymentMethodOptions'NonNullableAcssDebit = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAffirm = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlipay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlma = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAmazonPay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBacsDebit = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBancontact = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBillie = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBlik = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBoleto = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCardPresent = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCashapp = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCrypto = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCustomerBalance = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableEps = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableFpx = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGiropay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGrabpay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableIdeal = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableInteracPresent = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKakaoPay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKlarna = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKonbini = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKrCard = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableLink = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMobilepay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMultibanco = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNaverPay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNzBankAccount = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableOxxo = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableP24 = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayByBank = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayco = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaynow = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaypal = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePix = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePromptpay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableRevolutPay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSamsungPay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSatispay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSepaDebit = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSofort = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSwish = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableTwint = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableUsBankAccount = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableWechatPay = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableZip = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.acss_debit.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableAcssDebit' = PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableAcssDebit'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | mandate_options:
    paymentIntentPaymentMethodOptions'NonNullableAcssDebit'MandateOptions :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableAcssDebit'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableAcssDebit'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableAcssDebit'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'),
    -- | target_date: Controls when Stripe will attempt to debit the funds from the customer\'s account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullableAcssDebit'TargetDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAcssDebit' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAcssDebit' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableAcssDebit' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableAcssDebit' :: PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'
mkPaymentIntentPaymentMethodOptions'NonNullableAcssDebit' =
  PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'
    { paymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAcssDebit'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAcssDebit'MandateOptions = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAcssDebit'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAcssDebit'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAcssDebit'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAcssDebit'TargetDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.acss_debit.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.acss_debit.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.acss_debit.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.affirm.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableAffirm' = PaymentIntentPaymentMethodOptions'NonNullableAffirm'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableAffirm'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | preferred_locale: Preferred language of the Affirm authorization page that the customer is redirected to.
    --
    -- Constraints:
    --
    -- * Maximum length of 30
    paymentIntentPaymentMethodOptions'NonNullableAffirm'PreferredLocale :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableAffirm'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableAffirm'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableAffirm'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAffirm' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'PreferredLocale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'PreferredLocale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAffirm' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableAffirm'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableAffirm' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_locale")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableAffirm'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableAffirm' :: PaymentIntentPaymentMethodOptions'NonNullableAffirm'
mkPaymentIntentPaymentMethodOptions'NonNullableAffirm' =
  PaymentIntentPaymentMethodOptions'NonNullableAffirm'
    { paymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAffirm'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAffirm'PreferredLocale = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAffirm'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAffirm'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAffirm'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.affirm.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAffirm'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.affirm.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAffirm'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.affirm.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAffirm'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.afterpay_clearpay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay' = PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | reference: An internal identifier or reference that this payment corresponds to. You must limit the identifier to 128 characters, and it can only contain letters, numbers, underscores, backslashes, and dashes.
    -- This field differs from the statement descriptor and item name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'Reference :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'Reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'Reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay' :: PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'
mkPaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay' =
  PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'
    { paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'Reference = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.afterpay_clearpay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.afterpay_clearpay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.afterpay_clearpay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAfterpayClearpay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.alipay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableAlipay' = PaymentIntentPaymentMethodOptions'NonNullableAlipay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableAlipay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableAlipay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableAlipay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableAlipay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAlipay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAlipay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableAlipay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableAlipay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableAlipay'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableAlipay' :: PaymentIntentPaymentMethodOptions'NonNullableAlipay'
mkPaymentIntentPaymentMethodOptions'NonNullableAlipay' =
  PaymentIntentPaymentMethodOptions'NonNullableAlipay'
    { paymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlipay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlipay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlipay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlipay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.alipay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAlipay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.alipay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAlipay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.alipay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAlipay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.alma.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableAlma' = PaymentIntentPaymentMethodOptions'NonNullableAlma'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableAlma'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableAlma'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableAlma'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableAlma'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAlma' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAlma' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableAlma'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableAlma' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableAlma'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableAlma' :: PaymentIntentPaymentMethodOptions'NonNullableAlma'
mkPaymentIntentPaymentMethodOptions'NonNullableAlma' =
  PaymentIntentPaymentMethodOptions'NonNullableAlma'
    { paymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlma'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlma'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlma'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlma'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.alma.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAlma'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.alma.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAlma'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.alma.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAlma'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.amazon_pay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableAmazonPay' = PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableAmazonPay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableAmazonPay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableAmazonPay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableAmazonPay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAmazonPay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAmazonPay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableAmazonPay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableAmazonPay' :: PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'
mkPaymentIntentPaymentMethodOptions'NonNullableAmazonPay' =
  PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'
    { paymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAmazonPay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAmazonPay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAmazonPay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAmazonPay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.amazon_pay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.amazon_pay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.amazon_pay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAmazonPay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.au_becs_debit.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit' = PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'),
    -- | target_date: Controls when Stripe will attempt to debit the funds from the customer\'s account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'TargetDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit' :: PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'
mkPaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit' =
  PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'
    { paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'TargetDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.au_becs_debit.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.au_becs_debit.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.au_becs_debit.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableAuBecsDebit'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.bacs_debit.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableBacsDebit' = PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableBacsDebit'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | mandate_options:
    paymentIntentPaymentMethodOptions'NonNullableBacsDebit'MandateOptions :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMandateOptionsBacsDebit),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableBacsDebit'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableBacsDebit'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableBacsDebit'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'),
    -- | target_date: Controls when Stripe will attempt to debit the funds from the customer\'s account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullableBacsDebit'TargetDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBacsDebit' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBacsDebit' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableBacsDebit' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableBacsDebit' :: PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'
mkPaymentIntentPaymentMethodOptions'NonNullableBacsDebit' =
  PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'
    { paymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBacsDebit'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBacsDebit'MandateOptions = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBacsDebit'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBacsDebit'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBacsDebit'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBacsDebit'TargetDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.bacs_debit.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.bacs_debit.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.bacs_debit.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBacsDebit'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.bancontact.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableBancontact' = PaymentIntentPaymentMethodOptions'NonNullableBancontact'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableBancontact'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | preferred_language: Preferred language of the Bancontact authorization page that the customer is redirected to.
    paymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableBancontact'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableBancontact'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableBancontact'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBancontact' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_language" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_language" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBancontact' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableBancontact'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableBancontact' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_language")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableBancontact'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableBancontact' :: PaymentIntentPaymentMethodOptions'NonNullableBancontact'
mkPaymentIntentPaymentMethodOptions'NonNullableBancontact' =
  PaymentIntentPaymentMethodOptions'NonNullableBancontact'
    { paymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBancontact'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBancontact'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBancontact'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBancontact'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.bancontact.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.bancontact.anyOf.properties.preferred_language@ in the specification.
--
-- Preferred language of the Bancontact authorization page that the customer is redirected to.
data PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"de"@
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'EnumDe
  | -- | Represents the JSON value @"en"@
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'EnumEn
  | -- | Represents the JSON value @"fr"@
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'EnumFr
  | -- | Represents the JSON value @"nl"@
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'EnumNl
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'EnumDe) = "de"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'EnumEn) = "en"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'EnumFr) = "fr"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'EnumNl) = "nl"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "de" -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'EnumDe
          | val GHC.Classes.== "en" -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'EnumEn
          | val GHC.Classes.== "fr" -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'EnumFr
          | val GHC.Classes.== "nl" -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'EnumNl
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'PreferredLanguage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.bancontact.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.bancontact.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBancontact'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.billie.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableBillie' = PaymentIntentPaymentMethodOptions'NonNullableBillie'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableBillie'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableBillie'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableBillie'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableBillie'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBillie' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBillie' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableBillie'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableBillie' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableBillie'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableBillie' :: PaymentIntentPaymentMethodOptions'NonNullableBillie'
mkPaymentIntentPaymentMethodOptions'NonNullableBillie' =
  PaymentIntentPaymentMethodOptions'NonNullableBillie'
    { paymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBillie'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBillie'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBillie'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBillie'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.billie.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBillie'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.billie.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBillie'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.billie.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBillie'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.blik.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableBlik' = PaymentIntentPaymentMethodOptions'NonNullableBlik'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableBlik'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableBlik'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableBlik'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableBlik'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBlik' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBlik' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableBlik'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableBlik' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableBlik'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableBlik' :: PaymentIntentPaymentMethodOptions'NonNullableBlik'
mkPaymentIntentPaymentMethodOptions'NonNullableBlik' =
  PaymentIntentPaymentMethodOptions'NonNullableBlik'
    { paymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBlik'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBlik'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBlik'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBlik'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.blik.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBlik'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.blik.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBlik'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.blik.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBlik'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.boleto.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableBoleto' = PaymentIntentPaymentMethodOptions'NonNullableBoleto'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod'),
    -- | expires_after_days: The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America\/Sao_Paulo time.
    paymentIntentPaymentMethodOptions'NonNullableBoleto'ExpiresAfterDays :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableBoleto'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableBoleto'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableBoleto'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableBoleto'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBoleto' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_days" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'ExpiresAfterDays obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_days" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'ExpiresAfterDays obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBoleto' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableBoleto'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableBoleto' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_after_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableBoleto'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableBoleto' :: PaymentIntentPaymentMethodOptions'NonNullableBoleto'
mkPaymentIntentPaymentMethodOptions'NonNullableBoleto' =
  PaymentIntentPaymentMethodOptions'NonNullableBoleto'
    { paymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBoleto'ExpiresAfterDays = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBoleto'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBoleto'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBoleto'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBoleto'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.boleto.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBoleto'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.boleto.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBoleto'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.boleto.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableBoleto'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableCard' = PaymentIntentPaymentMethodOptions'NonNullableCard'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod'),
    -- | installments: Installment details for this payment.
    --
    -- For more information, see the [installments integration guide](https:\/\/stripe.com\/docs\/payments\/installments).
    paymentIntentPaymentMethodOptions'NonNullableCard'Installments :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullable)),
    -- | mandate_options: Configuration options for setting up an eMandate for cards issued in India.
    paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullable)),
    -- | network: Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
    paymentIntentPaymentMethodOptions'NonNullableCard'Network :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullable)),
    -- | request_extended_authorization: Request ability to [capture beyond the standard authorization validity window](https:\/\/stripe.com\/docs\/payments\/extended-authorization) for this PaymentIntent.
    paymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization'),
    -- | request_incremental_authorization: Request ability to [increment the authorization](https:\/\/stripe.com\/docs\/payments\/incremental-authorization) for this PaymentIntent.
    paymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization'),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | request_multicapture: Request ability to make [multiple captures](https:\/\/stripe.com\/docs\/payments\/multicapture) for this PaymentIntent.
    paymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture'),
    -- | request_overcapture: Request ability to [overcapture](https:\/\/stripe.com\/docs\/payments\/overcapture) for this PaymentIntent.
    paymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture'),
    -- | request_three_d_secure: We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https:\/\/stripe.com\/docs\/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to \`automatic\`. Read our guide on [manually requesting 3D Secure](https:\/\/stripe.com\/docs\/payments\/3d-secure\/authentication-flow\#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    paymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullable)),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableCard'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableCard'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'),
    -- | statement_descriptor_suffix_kana: Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullableCard'StatementDescriptorSuffixKana :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | statement_descriptor_suffix_kanji: Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullableCard'StatementDescriptorSuffixKanji :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Network obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_extended_authorization" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_multicapture" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_overcapture" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_three_d_secure" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kana" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'StatementDescriptorSuffixKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kanji" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'StatementDescriptorSuffixKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Network obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_extended_authorization" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_multicapture" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_overcapture" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_three_d_secure" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kana" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'StatementDescriptorSuffixKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kanji" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'StatementDescriptorSuffixKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableCard'" (\obj -> (((((((((((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableCard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_extended_authorization")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_multicapture")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_overcapture")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor_suffix_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor_suffix_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableCard'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableCard' :: PaymentIntentPaymentMethodOptions'NonNullableCard'
mkPaymentIntentPaymentMethodOptions'NonNullableCard' =
  PaymentIntentPaymentMethodOptions'NonNullableCard'
    { paymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'Network = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'StatementDescriptorSuffixKana = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'StatementDescriptorSuffixKanji = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'CaptureMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.installments.anyOf@ in the specification.
--
-- Installment details for this payment.
--
-- For more information, see the [installments integration guide](https:\\\/\\\/stripe.com\\\/docs\\\/payments\\\/installments).
data PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullable = PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullable
  { -- | available_plans: Installment plans that may be selected for this PaymentIntent.
    paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullableAvailablePlans :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [PaymentMethodDetailsCardInstallmentsPlan])),
    -- | enabled: Whether Installments are enabled for this PaymentIntent.
    paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullableEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | plan: Installment plan selected for this PaymentIntent.
    paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_plans" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullableAvailablePlans obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullableEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("plan" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_plans" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullableAvailablePlans obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullableEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("plan" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullable" (\obj -> ((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "available_plans")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "plan"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullable' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullable :: PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullable
mkPaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullable =
  PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullable
    { paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullableAvailablePlans = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullableEnabled = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.installments.anyOf.properties.plan.anyOf@ in the specification.
--
-- Installment plan selected for this PaymentIntent.
data PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullable = PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullable
  { -- | count: For \`fixed_count\` installment plans, this is the number of installment payments your customer will make to their credit card.
    paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableCount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | interval: For \`fixed_count\` installment plans, this is the interval between installment payments your customer will make to their credit card.
    -- One of \`month\`.
    paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval'NonNullable)),
    -- | type: Type of installment plan, one of \`fixed_count\`, \`bonus\`, or \`revolving\`.
    paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("count" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("count" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullable" (\obj -> ((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullable' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullable :: PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullable
mkPaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullable =
  PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullable
    { paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableCount = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.installments.anyOf.properties.plan.anyOf.properties.interval@ in the specification.
--
-- For \`fixed_count\` installment plans, this is the interval between installment payments your customer will make to their credit card.
-- One of \`month\`.
data PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"month"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableEnumMonth
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableEnumMonth) = "month"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "month" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableEnumMonth
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableInterval'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.installments.anyOf.properties.plan.anyOf.properties.type@ in the specification.
--
-- Type of installment plan, one of \`fixed_count\`, \`bonus\`, or \`revolving\`.
data PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"bonus"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'EnumBonus
  | -- | Represents the JSON value @"fixed_count"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'EnumFixedCount
  | -- | Represents the JSON value @"revolving"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'EnumRevolving
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'EnumBonus) = "bonus"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'EnumFixedCount) = "fixed_count"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'EnumRevolving) = "revolving"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "bonus" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'EnumBonus
          | val GHC.Classes.== "fixed_count" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'EnumFixedCount
          | val GHC.Classes.== "revolving" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'EnumRevolving
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'Installments'NonNullablePlan'NonNullableType'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.mandate_options.anyOf@ in the specification.
--
-- Configuration options for setting up an eMandate for cards issued in India.
data PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullable = PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullable
  { -- | amount: Amount to be charged for future payments.
    paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_type: One of \`fixed\` or \`maximum\`. If \`fixed\`, the \`amount\` param refers to the exact amount to be charged in future payments. If \`maximum\`, the amount charged can be up to the value passed for the \`amount\` param.
    paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType'),
    -- | description: A description of the mandate or subscription that is meant to be displayed to the customer.
    --
    -- Constraints:
    --
    -- * Maximum length of 200
    paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | end_date: End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
    paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableEndDate :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | interval: Specifies payment frequency. One of \`day\`, \`week\`, \`month\`, \`year\`, or \`sporadic\`.
    paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'),
    -- | interval_count: The number of intervals between payments. For example, \`interval=month\` and \`interval_count=3\` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when \`interval=sporadic\`.
    paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableIntervalCount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | reference: Unique identifier for the mandate or subscription.
    --
    -- Constraints:
    --
    -- * Maximum length of 80
    paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableReference :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | start_date: Start date of the mandate or subscription. Start date should not be lesser than yesterday.
    paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableStartDate :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | supported_types: Specifies the type of mandates supported. Possible values are \`india\`.
    paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable [PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes'NonNullable]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("end_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableEndDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_count" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableIntervalCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableReference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("start_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableStartDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("supported_types" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("end_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableEndDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_count" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableIntervalCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableReference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("start_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableStartDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("supported_types" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullable" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "end_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interval_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "start_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "supported_types"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullable' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullable :: PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullable
mkPaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullable =
  PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullable
    { paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmount = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableDescription = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableEndDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableIntervalCount = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableReference = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableStartDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.mandate_options.anyOf.properties.amount_type@ in the specification.
--
-- One of \`fixed\` or \`maximum\`. If \`fixed\`, the \`amount\` param refers to the exact amount to be charged in future payments. If \`maximum\`, the amount charged can be up to the value passed for the \`amount\` param.
data PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"fixed"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType'EnumFixed
  | -- | Represents the JSON value @"maximum"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType'EnumMaximum
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType'EnumFixed) = "fixed"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType'EnumMaximum) = "maximum"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "fixed" -> PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType'EnumFixed
          | val GHC.Classes.== "maximum" -> PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType'EnumMaximum
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableAmountType'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.mandate_options.anyOf.properties.interval@ in the specification.
--
-- Specifies payment frequency. One of \`day\`, \`week\`, \`month\`, \`year\`, or \`sporadic\`.
data PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"day"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumDay
  | -- | Represents the JSON value @"month"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumMonth
  | -- | Represents the JSON value @"sporadic"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumSporadic
  | -- | Represents the JSON value @"week"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumWeek
  | -- | Represents the JSON value @"year"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumYear
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumDay) = "day"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumMonth) = "month"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumSporadic) = "sporadic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumWeek) = "week"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumYear) = "year"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "day" -> PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumDay
          | val GHC.Classes.== "month" -> PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumMonth
          | val GHC.Classes.== "sporadic" -> PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumSporadic
          | val GHC.Classes.== "week" -> PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumWeek
          | val GHC.Classes.== "year" -> PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'EnumYear
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableInterval'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.mandate_options.anyOf.properties.supported_types.items@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"india"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes'NonNullableEnumIndia
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes'NonNullableEnumIndia) = "india"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "india" -> PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes'NonNullableEnumIndia
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'MandateOptions'NonNullableSupportedTypes'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.network@ in the specification.
--
-- Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
data PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"amex"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumAmex
  | -- | Represents the JSON value @"cartes_bancaires"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumCartesBancaires
  | -- | Represents the JSON value @"diners"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumDiners
  | -- | Represents the JSON value @"discover"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumDiscover
  | -- | Represents the JSON value @"eftpos_au"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumEftposAu
  | -- | Represents the JSON value @"girocard"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumGirocard
  | -- | Represents the JSON value @"interac"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumInterac
  | -- | Represents the JSON value @"jcb"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumJcb
  | -- | Represents the JSON value @"link"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumLink
  | -- | Represents the JSON value @"mastercard"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumMastercard
  | -- | Represents the JSON value @"unionpay"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumUnionpay
  | -- | Represents the JSON value @"unknown"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumUnknown
  | -- | Represents the JSON value @"visa"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumVisa
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumAmex) = "amex"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumCartesBancaires) = "cartes_bancaires"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumDiners) = "diners"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumDiscover) = "discover"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumEftposAu) = "eftpos_au"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumGirocard) = "girocard"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumInterac) = "interac"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumJcb) = "jcb"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumLink) = "link"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumMastercard) = "mastercard"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumUnionpay) = "unionpay"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumUnknown) = "unknown"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumVisa) = "visa"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "amex" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumAmex
          | val GHC.Classes.== "cartes_bancaires" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumCartesBancaires
          | val GHC.Classes.== "diners" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumDiners
          | val GHC.Classes.== "discover" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumDiscover
          | val GHC.Classes.== "eftpos_au" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumEftposAu
          | val GHC.Classes.== "girocard" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumGirocard
          | val GHC.Classes.== "interac" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumInterac
          | val GHC.Classes.== "jcb" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumJcb
          | val GHC.Classes.== "link" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumLink
          | val GHC.Classes.== "mastercard" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumMastercard
          | val GHC.Classes.== "unionpay" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumUnionpay
          | val GHC.Classes.== "unknown" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumUnknown
          | val GHC.Classes.== "visa" -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableEnumVisa
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'Network'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.request_extended_authorization@ in the specification.
--
-- Request ability to [capture beyond the standard authorization validity window](https:\/\/stripe.com\/docs\/payments\/extended-authorization) for this PaymentIntent.
data PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"if_available"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization'EnumIfAvailable
  | -- | Represents the JSON value @"never"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization'EnumIfAvailable) = "if_available"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "if_available" -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization'EnumIfAvailable
          | val GHC.Classes.== "never" -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization'EnumNever
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestExtendedAuthorization'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.request_incremental_authorization@ in the specification.
--
-- Request ability to [increment the authorization](https:\/\/stripe.com\/docs\/payments\/incremental-authorization) for this PaymentIntent.
data PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"if_available"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization'EnumIfAvailable
  | -- | Represents the JSON value @"never"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization'EnumIfAvailable) = "if_available"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "if_available" -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization'EnumIfAvailable
          | val GHC.Classes.== "never" -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization'EnumNever
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestIncrementalAuthorization'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.request_multicapture@ in the specification.
--
-- Request ability to make [multiple captures](https:\/\/stripe.com\/docs\/payments\/multicapture) for this PaymentIntent.
data PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"if_available"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture'EnumIfAvailable
  | -- | Represents the JSON value @"never"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture'EnumIfAvailable) = "if_available"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "if_available" -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture'EnumIfAvailable
          | val GHC.Classes.== "never" -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture'EnumNever
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestMulticapture'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.request_overcapture@ in the specification.
--
-- Request ability to [overcapture](https:\/\/stripe.com\/docs\/payments\/overcapture) for this PaymentIntent.
data PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"if_available"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture'EnumIfAvailable
  | -- | Represents the JSON value @"never"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture'EnumIfAvailable) = "if_available"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "if_available" -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture'EnumIfAvailable
          | val GHC.Classes.== "never" -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture'EnumNever
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestOvercapture'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.request_three_d_secure@ in the specification.
--
-- We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https:\/\/stripe.com\/docs\/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to \`automatic\`. Read our guide on [manually requesting 3D Secure](https:\/\/stripe.com\/docs\/payments\/3d-secure\/authentication-flow\#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
data PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"any"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableEnumAny
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableEnumAutomatic
  | -- | Represents the JSON value @"challenge"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableEnumChallenge
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableEnumAny) = "any"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableEnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableEnumChallenge) = "challenge"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "any" -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableEnumAny
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableEnumAutomatic
          | val GHC.Classes.== "challenge" -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableEnumChallenge
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'RequestThreeDSecure'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCard'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card_present.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableCardPresent' = PaymentIntentPaymentMethodOptions'NonNullableCardPresent'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableCardPresent'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_extended_authorization: Request ability to capture this payment beyond the standard [authorization validity window](https:\/\/stripe.com\/docs\/terminal\/features\/extended-authorizations\#authorization-validity)
    paymentIntentPaymentMethodOptions'NonNullableCardPresent'RequestExtendedAuthorization :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Bool)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableCardPresent'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Bool)),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableCardPresent'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableCardPresent'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCardPresent' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_extended_authorization" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'RequestExtendedAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_extended_authorization" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'RequestExtendedAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCardPresent' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableCardPresent'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableCardPresent' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_extended_authorization")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableCardPresent'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableCardPresent' :: PaymentIntentPaymentMethodOptions'NonNullableCardPresent'
mkPaymentIntentPaymentMethodOptions'NonNullableCardPresent' =
  PaymentIntentPaymentMethodOptions'NonNullableCardPresent'
    { paymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCardPresent'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCardPresent'RequestExtendedAuthorization = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCardPresent'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCardPresent'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCardPresent'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card_present.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCardPresent'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card_present.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCardPresent'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.card_present.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCardPresent'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.cashapp.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableCashapp' = PaymentIntentPaymentMethodOptions'NonNullableCashapp'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableCashapp'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableCashapp'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableCashapp'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableCashapp'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCashapp' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCashapp' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableCashapp'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableCashapp' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableCashapp'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableCashapp' :: PaymentIntentPaymentMethodOptions'NonNullableCashapp'
mkPaymentIntentPaymentMethodOptions'NonNullableCashapp' =
  PaymentIntentPaymentMethodOptions'NonNullableCashapp'
    { paymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCashapp'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCashapp'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCashapp'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCashapp'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.cashapp.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCashapp'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.cashapp.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCashapp'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.cashapp.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCashapp'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.crypto.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableCrypto' = PaymentIntentPaymentMethodOptions'NonNullableCrypto'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableCrypto'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableCrypto'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableCrypto'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableCrypto'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCrypto' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCrypto' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableCrypto'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableCrypto' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableCrypto'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableCrypto' :: PaymentIntentPaymentMethodOptions'NonNullableCrypto'
mkPaymentIntentPaymentMethodOptions'NonNullableCrypto' =
  PaymentIntentPaymentMethodOptions'NonNullableCrypto'
    { paymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCrypto'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCrypto'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCrypto'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCrypto'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.crypto.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCrypto'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.crypto.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCrypto'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.crypto.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCrypto'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.customer_balance.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance' = PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'
  { -- | bank_transfer:
    paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'BankTransfer :: (GHC.Maybe.Maybe PaymentMethodOptionsCustomerBalanceBankTransfer),
    -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod'),
    -- | funding_type: The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: \`bank_transfer\`.
    paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType'NonNullable)),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_transfer" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'BankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_transfer" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'BankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding_type" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "funding_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableCustomerBalance' :: PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'
mkPaymentIntentPaymentMethodOptions'NonNullableCustomerBalance' =
  PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'
    { paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'BankTransfer = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.customer_balance.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.customer_balance.anyOf.properties.funding_type@ in the specification.
--
-- The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: \`bank_transfer\`.
data PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"bank_transfer"@
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType'NonNullableEnumBankTransfer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType'NonNullableEnumBankTransfer) = "bank_transfer"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "bank_transfer" -> PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType'NonNullableEnumBankTransfer
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'FundingType'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.customer_balance.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.customer_balance.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableCustomerBalance'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.eps.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableEps' = PaymentIntentPaymentMethodOptions'NonNullableEps'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableEps'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableEps'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableEps'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableEps'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableEps' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableEps' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableEps'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableEps' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableEps'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableEps' :: PaymentIntentPaymentMethodOptions'NonNullableEps'
mkPaymentIntentPaymentMethodOptions'NonNullableEps' =
  PaymentIntentPaymentMethodOptions'NonNullableEps'
    { paymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableEps'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableEps'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableEps'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableEps'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.eps.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableEps'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.eps.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableEps'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.eps.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableEps'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.fpx.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableFpx' = PaymentIntentPaymentMethodOptions'NonNullableFpx'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableFpx'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableFpx'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableFpx'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableFpx'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableFpx' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableFpx' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableFpx'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableFpx' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableFpx'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableFpx' :: PaymentIntentPaymentMethodOptions'NonNullableFpx'
mkPaymentIntentPaymentMethodOptions'NonNullableFpx' =
  PaymentIntentPaymentMethodOptions'NonNullableFpx'
    { paymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableFpx'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableFpx'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableFpx'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableFpx'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.fpx.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableFpx'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.fpx.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableFpx'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.fpx.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableFpx'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.giropay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableGiropay' = PaymentIntentPaymentMethodOptions'NonNullableGiropay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableGiropay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableGiropay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableGiropay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableGiropay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableGiropay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableGiropay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableGiropay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableGiropay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableGiropay'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableGiropay' :: PaymentIntentPaymentMethodOptions'NonNullableGiropay'
mkPaymentIntentPaymentMethodOptions'NonNullableGiropay' =
  PaymentIntentPaymentMethodOptions'NonNullableGiropay'
    { paymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGiropay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGiropay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGiropay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGiropay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.giropay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableGiropay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.giropay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableGiropay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.giropay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableGiropay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.grabpay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableGrabpay' = PaymentIntentPaymentMethodOptions'NonNullableGrabpay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableGrabpay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableGrabpay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableGrabpay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableGrabpay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableGrabpay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableGrabpay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableGrabpay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableGrabpay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableGrabpay'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableGrabpay' :: PaymentIntentPaymentMethodOptions'NonNullableGrabpay'
mkPaymentIntentPaymentMethodOptions'NonNullableGrabpay' =
  PaymentIntentPaymentMethodOptions'NonNullableGrabpay'
    { paymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGrabpay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGrabpay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGrabpay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGrabpay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.grabpay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableGrabpay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.grabpay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableGrabpay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.grabpay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableGrabpay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.ideal.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableIdeal' = PaymentIntentPaymentMethodOptions'NonNullableIdeal'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableIdeal'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableIdeal'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableIdeal'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableIdeal'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableIdeal' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableIdeal' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableIdeal'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableIdeal' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableIdeal'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableIdeal' :: PaymentIntentPaymentMethodOptions'NonNullableIdeal'
mkPaymentIntentPaymentMethodOptions'NonNullableIdeal' =
  PaymentIntentPaymentMethodOptions'NonNullableIdeal'
    { paymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableIdeal'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableIdeal'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableIdeal'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableIdeal'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.ideal.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableIdeal'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.ideal.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableIdeal'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.ideal.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableIdeal'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.interac_present.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableInteracPresent' = PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableInteracPresent'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableInteracPresent'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableInteracPresent'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableInteracPresent'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableInteracPresent' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableInteracPresent' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableInteracPresent' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableInteracPresent' :: PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'
mkPaymentIntentPaymentMethodOptions'NonNullableInteracPresent' =
  PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'
    { paymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableInteracPresent'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableInteracPresent'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableInteracPresent'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableInteracPresent'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.interac_present.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.interac_present.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.interac_present.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableInteracPresent'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.kakao_pay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableKakaoPay' = PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableKakaoPay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableKakaoPay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableKakaoPay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableKakaoPay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKakaoPay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKakaoPay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableKakaoPay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableKakaoPay' :: PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'
mkPaymentIntentPaymentMethodOptions'NonNullableKakaoPay' =
  PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'
    { paymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKakaoPay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKakaoPay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKakaoPay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKakaoPay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.kakao_pay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.kakao_pay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.kakao_pay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableKakaoPay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.klarna.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableKlarna' = PaymentIntentPaymentMethodOptions'NonNullableKlarna'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableKlarna'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | preferred_locale: Preferred locale of the Klarna checkout page that the customer is redirected to.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullableKlarna'PreferredLocale :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableKlarna'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableKlarna'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableKlarna'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKlarna' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'PreferredLocale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'PreferredLocale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKlarna' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableKlarna'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableKlarna' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_locale")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableKlarna'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableKlarna' :: PaymentIntentPaymentMethodOptions'NonNullableKlarna'
mkPaymentIntentPaymentMethodOptions'NonNullableKlarna' =
  PaymentIntentPaymentMethodOptions'NonNullableKlarna'
    { paymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKlarna'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKlarna'PreferredLocale = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKlarna'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKlarna'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKlarna'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.klarna.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableKlarna'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.klarna.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableKlarna'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.klarna.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableKlarna'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.konbini.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableKonbini' = PaymentIntentPaymentMethodOptions'NonNullableKonbini'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod'),
    -- | confirmation_number: An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullableKonbini'ConfirmationNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | expires_after_days: The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and \`expires_after_days\` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
    paymentIntentPaymentMethodOptions'NonNullableKonbini'ExpiresAfterDays :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | expires_at: The timestamp at which the Konbini payment instructions will expire. Only one of \`expires_after_days\` or \`expires_at\` may be set.
    paymentIntentPaymentMethodOptions'NonNullableKonbini'ExpiresAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableKonbini'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | product_description: A product descriptor of up to 22 characters, which will appear to customers at the convenience store.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullableKonbini'ProductDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableKonbini'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableKonbini'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableKonbini'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKonbini' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirmation_number" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'ConfirmationNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_days" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'ExpiresAfterDays obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'ExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_description" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'ProductDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirmation_number" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'ConfirmationNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_days" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'ExpiresAfterDays obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'ExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_description" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'ProductDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKonbini' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableKonbini'" (\obj -> ((((((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableKonbini' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "confirmation_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_after_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "product_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableKonbini'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableKonbini' :: PaymentIntentPaymentMethodOptions'NonNullableKonbini'
mkPaymentIntentPaymentMethodOptions'NonNullableKonbini' =
  PaymentIntentPaymentMethodOptions'NonNullableKonbini'
    { paymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKonbini'ConfirmationNumber = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKonbini'ExpiresAfterDays = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKonbini'ExpiresAt = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKonbini'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKonbini'ProductDescription = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKonbini'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKonbini'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKonbini'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.konbini.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableKonbini'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.konbini.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableKonbini'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.konbini.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableKonbini'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.kr_card.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableKrCard' = PaymentIntentPaymentMethodOptions'NonNullableKrCard'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableKrCard'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableKrCard'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableKrCard'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableKrCard'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKrCard' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKrCard' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableKrCard'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableKrCard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableKrCard'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableKrCard' :: PaymentIntentPaymentMethodOptions'NonNullableKrCard'
mkPaymentIntentPaymentMethodOptions'NonNullableKrCard' =
  PaymentIntentPaymentMethodOptions'NonNullableKrCard'
    { paymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKrCard'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKrCard'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKrCard'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKrCard'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.kr_card.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableKrCard'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.kr_card.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableKrCard'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.kr_card.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableKrCard'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.link.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableLink' = PaymentIntentPaymentMethodOptions'NonNullableLink'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableLink'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableLink'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableLink'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableLink'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableLink' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableLink' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableLink'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableLink' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableLink'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableLink' :: PaymentIntentPaymentMethodOptions'NonNullableLink'
mkPaymentIntentPaymentMethodOptions'NonNullableLink' =
  PaymentIntentPaymentMethodOptions'NonNullableLink'
    { paymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableLink'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableLink'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableLink'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableLink'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.link.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableLink'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.link.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableLink'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.link.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.mobilepay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableMobilepay' = PaymentIntentPaymentMethodOptions'NonNullableMobilepay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableMobilepay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableMobilepay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableMobilepay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableMobilepay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableMobilepay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableMobilepay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableMobilepay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableMobilepay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableMobilepay'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableMobilepay' :: PaymentIntentPaymentMethodOptions'NonNullableMobilepay'
mkPaymentIntentPaymentMethodOptions'NonNullableMobilepay' =
  PaymentIntentPaymentMethodOptions'NonNullableMobilepay'
    { paymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMobilepay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMobilepay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMobilepay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMobilepay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.mobilepay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableMobilepay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.mobilepay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableMobilepay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.mobilepay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableMobilepay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.multibanco.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableMultibanco' = PaymentIntentPaymentMethodOptions'NonNullableMultibanco'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableMultibanco'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableMultibanco'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableMultibanco'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableMultibanco'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableMultibanco' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableMultibanco' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableMultibanco'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableMultibanco' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableMultibanco'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableMultibanco' :: PaymentIntentPaymentMethodOptions'NonNullableMultibanco'
mkPaymentIntentPaymentMethodOptions'NonNullableMultibanco' =
  PaymentIntentPaymentMethodOptions'NonNullableMultibanco'
    { paymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMultibanco'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMultibanco'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMultibanco'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMultibanco'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.multibanco.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableMultibanco'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.multibanco.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableMultibanco'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.multibanco.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableMultibanco'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.naver_pay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableNaverPay' = PaymentIntentPaymentMethodOptions'NonNullableNaverPay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableNaverPay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableNaverPay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableNaverPay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableNaverPay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableNaverPay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableNaverPay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableNaverPay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableNaverPay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableNaverPay'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableNaverPay' :: PaymentIntentPaymentMethodOptions'NonNullableNaverPay'
mkPaymentIntentPaymentMethodOptions'NonNullableNaverPay' =
  PaymentIntentPaymentMethodOptions'NonNullableNaverPay'
    { paymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNaverPay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNaverPay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNaverPay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNaverPay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.naver_pay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableNaverPay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.naver_pay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableNaverPay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.naver_pay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableNaverPay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.nz_bank_account.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount' = PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'),
    -- | target_date: Controls when Stripe will attempt to debit the funds from the customer\'s account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'TargetDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableNzBankAccount' :: PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'
mkPaymentIntentPaymentMethodOptions'NonNullableNzBankAccount' =
  PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'
    { paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'TargetDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.nz_bank_account.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.nz_bank_account.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.nz_bank_account.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableNzBankAccount'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.oxxo.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableOxxo' = PaymentIntentPaymentMethodOptions'NonNullableOxxo'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod'),
    -- | expires_after_days: The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America\/Mexico_City time.
    paymentIntentPaymentMethodOptions'NonNullableOxxo'ExpiresAfterDays :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableOxxo'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableOxxo'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableOxxo'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableOxxo'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableOxxo' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_days" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'ExpiresAfterDays obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_days" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'ExpiresAfterDays obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableOxxo' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableOxxo'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableOxxo' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_after_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableOxxo'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableOxxo' :: PaymentIntentPaymentMethodOptions'NonNullableOxxo'
mkPaymentIntentPaymentMethodOptions'NonNullableOxxo' =
  PaymentIntentPaymentMethodOptions'NonNullableOxxo'
    { paymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableOxxo'ExpiresAfterDays = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableOxxo'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableOxxo'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableOxxo'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableOxxo'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.oxxo.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableOxxo'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.oxxo.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableOxxo'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.oxxo.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableOxxo'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.p24.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableP24' = PaymentIntentPaymentMethodOptions'NonNullableP24'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableP24'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableP24'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableP24'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableP24'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableP24' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableP24' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableP24'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableP24' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableP24'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableP24' :: PaymentIntentPaymentMethodOptions'NonNullableP24'
mkPaymentIntentPaymentMethodOptions'NonNullableP24' =
  PaymentIntentPaymentMethodOptions'NonNullableP24'
    { paymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableP24'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableP24'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableP24'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableP24'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.p24.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableP24'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.p24.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableP24'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.p24.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableP24'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.pay_by_bank.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullablePayByBank' = PaymentIntentPaymentMethodOptions'NonNullablePayByBank'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullablePayByBank'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullablePayByBank'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullablePayByBank'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullablePayByBank'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePayByBank' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePayByBank' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullablePayByBank'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullablePayByBank' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullablePayByBank'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullablePayByBank' :: PaymentIntentPaymentMethodOptions'NonNullablePayByBank'
mkPaymentIntentPaymentMethodOptions'NonNullablePayByBank' =
  PaymentIntentPaymentMethodOptions'NonNullablePayByBank'
    { paymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayByBank'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayByBank'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayByBank'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayByBank'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.pay_by_bank.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePayByBank'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.pay_by_bank.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePayByBank'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.pay_by_bank.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePayByBank'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.payco.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullablePayco' = PaymentIntentPaymentMethodOptions'NonNullablePayco'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullablePayco'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullablePayco'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullablePayco'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullablePayco'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePayco' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePayco' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullablePayco'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullablePayco' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullablePayco'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullablePayco' :: PaymentIntentPaymentMethodOptions'NonNullablePayco'
mkPaymentIntentPaymentMethodOptions'NonNullablePayco' =
  PaymentIntentPaymentMethodOptions'NonNullablePayco'
    { paymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayco'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayco'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayco'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayco'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.payco.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePayco'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.payco.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePayco'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.payco.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePayco'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.paynow.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullablePaynow' = PaymentIntentPaymentMethodOptions'NonNullablePaynow'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullablePaynow'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullablePaynow'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullablePaynow'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullablePaynow'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePaynow' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePaynow' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullablePaynow'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullablePaynow' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullablePaynow'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullablePaynow' :: PaymentIntentPaymentMethodOptions'NonNullablePaynow'
mkPaymentIntentPaymentMethodOptions'NonNullablePaynow' =
  PaymentIntentPaymentMethodOptions'NonNullablePaynow'
    { paymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaynow'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaynow'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaynow'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaynow'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.paynow.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePaynow'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.paynow.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePaynow'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.paynow.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePaynow'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.paypal.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullablePaypal' = PaymentIntentPaymentMethodOptions'NonNullablePaypal'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullablePaypal'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | preferred_locale: Preferred locale of the PayPal checkout page that the customer is redirected to.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullablePaypal'PreferredLocale :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | reference: A reference of the PayPal transaction visible to customer which is mapped to PayPal\'s invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullablePaypal'Reference :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullablePaypal'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullablePaypal'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullablePaypal'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePaypal' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'PreferredLocale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'Reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_locale" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'PreferredLocale obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'Reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePaypal' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullablePaypal'" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullablePaypal' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_locale")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullablePaypal'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullablePaypal' :: PaymentIntentPaymentMethodOptions'NonNullablePaypal'
mkPaymentIntentPaymentMethodOptions'NonNullablePaypal' =
  PaymentIntentPaymentMethodOptions'NonNullablePaypal'
    { paymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaypal'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaypal'PreferredLocale = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaypal'Reference = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaypal'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaypal'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaypal'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.paypal.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePaypal'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.paypal.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePaypal'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.paypal.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.pix.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullablePix' = PaymentIntentPaymentMethodOptions'NonNullablePix'
  { -- | amount_includes_iof: Determines if the amount includes the IOF tax.
    paymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof'),
    -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod'),
    -- | expires_after_seconds: The number of seconds (between 10 and 1209600) after which Pix payment will expire.
    paymentIntentPaymentMethodOptions'NonNullablePix'ExpiresAfterSeconds :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | expires_at: The timestamp at which the Pix expires.
    paymentIntentPaymentMethodOptions'NonNullablePix'ExpiresAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullablePix'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullablePix'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullablePix'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullablePix'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePix' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_includes_iof" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_seconds" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'ExpiresAfterSeconds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'ExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_includes_iof" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_after_seconds" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'ExpiresAfterSeconds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'ExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePix' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullablePix'" (\obj -> (((((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullablePix' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_includes_iof")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_after_seconds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullablePix'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullablePix' :: PaymentIntentPaymentMethodOptions'NonNullablePix'
mkPaymentIntentPaymentMethodOptions'NonNullablePix' =
  PaymentIntentPaymentMethodOptions'NonNullablePix'
    { paymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePix'ExpiresAfterSeconds = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePix'ExpiresAt = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePix'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePix'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePix'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePix'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.pix.anyOf.properties.amount_includes_iof@ in the specification.
--
-- Determines if the amount includes the IOF tax.
data PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"always"@
    PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof'EnumAlways
  | -- | Represents the JSON value @"never"@
    PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof'EnumAlways) = "always"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "always" -> PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof'EnumAlways
          | val GHC.Classes.== "never" -> PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof'EnumNever
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePix'AmountIncludesIof'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.pix.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePix'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.pix.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePix'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.pix.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePix'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.promptpay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullablePromptpay' = PaymentIntentPaymentMethodOptions'NonNullablePromptpay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullablePromptpay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullablePromptpay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullablePromptpay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullablePromptpay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePromptpay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePromptpay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullablePromptpay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullablePromptpay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullablePromptpay'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullablePromptpay' :: PaymentIntentPaymentMethodOptions'NonNullablePromptpay'
mkPaymentIntentPaymentMethodOptions'NonNullablePromptpay' =
  PaymentIntentPaymentMethodOptions'NonNullablePromptpay'
    { paymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePromptpay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePromptpay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePromptpay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePromptpay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.promptpay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePromptpay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.promptpay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePromptpay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.promptpay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullablePromptpay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.revolut_pay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableRevolutPay' = PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableRevolutPay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableRevolutPay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableRevolutPay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableRevolutPay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableRevolutPay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableRevolutPay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableRevolutPay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableRevolutPay' :: PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'
mkPaymentIntentPaymentMethodOptions'NonNullableRevolutPay' =
  PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'
    { paymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableRevolutPay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableRevolutPay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableRevolutPay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableRevolutPay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.revolut_pay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.revolut_pay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.revolut_pay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableRevolutPay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.samsung_pay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableSamsungPay' = PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableSamsungPay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableSamsungPay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableSamsungPay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableSamsungPay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSamsungPay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSamsungPay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableSamsungPay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableSamsungPay' :: PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'
mkPaymentIntentPaymentMethodOptions'NonNullableSamsungPay' =
  PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'
    { paymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSamsungPay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSamsungPay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSamsungPay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSamsungPay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.samsung_pay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.samsung_pay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.samsung_pay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSamsungPay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.satispay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableSatispay' = PaymentIntentPaymentMethodOptions'NonNullableSatispay'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableSatispay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableSatispay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableSatispay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableSatispay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSatispay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSatispay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableSatispay'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableSatispay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableSatispay'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableSatispay' :: PaymentIntentPaymentMethodOptions'NonNullableSatispay'
mkPaymentIntentPaymentMethodOptions'NonNullableSatispay' =
  PaymentIntentPaymentMethodOptions'NonNullableSatispay'
    { paymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSatispay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSatispay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSatispay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSatispay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.satispay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod'EnumManual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod'EnumManual) = "manual"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod'EnumManual
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSatispay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.satispay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSatispay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.satispay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSatispay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.sepa_debit.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableSepaDebit' = PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableSepaDebit'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | mandate_options:
    paymentIntentPaymentMethodOptions'NonNullableSepaDebit'MandateOptions :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableSepaDebit'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableSepaDebit'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableSepaDebit'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'),
    -- | target_date: Controls when Stripe will attempt to debit the funds from the customer\'s account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullableSepaDebit'TargetDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSepaDebit' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSepaDebit' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableSepaDebit' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableSepaDebit' :: PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'
mkPaymentIntentPaymentMethodOptions'NonNullableSepaDebit' =
  PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'
    { paymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSepaDebit'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSepaDebit'MandateOptions = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSepaDebit'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSepaDebit'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSepaDebit'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSepaDebit'TargetDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.sepa_debit.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.sepa_debit.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.sepa_debit.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.sofort.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableSofort' = PaymentIntentPaymentMethodOptions'NonNullableSofort'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableSofort'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | preferred_language: Preferred language of the SOFORT authorization page that the customer is redirected to.
    paymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullable)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableSofort'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableSofort'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableSofort'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSofort' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_language" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_language" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSofort' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableSofort'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableSofort' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_language")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableSofort'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableSofort' :: PaymentIntentPaymentMethodOptions'NonNullableSofort'
mkPaymentIntentPaymentMethodOptions'NonNullableSofort' =
  PaymentIntentPaymentMethodOptions'NonNullableSofort'
    { paymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSofort'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSofort'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSofort'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSofort'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.sofort.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSofort'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.sofort.anyOf.properties.preferred_language@ in the specification.
--
-- Preferred language of the SOFORT authorization page that the customer is redirected to.
data PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"de"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumDe
  | -- | Represents the JSON value @"en"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumEn
  | -- | Represents the JSON value @"es"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumEs
  | -- | Represents the JSON value @"fr"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumFr
  | -- | Represents the JSON value @"it"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumIt
  | -- | Represents the JSON value @"nl"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumNl
  | -- | Represents the JSON value @"pl"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumPl
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumDe) = "de"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumEn) = "en"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumEs) = "es"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumFr) = "fr"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumIt) = "it"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumNl) = "nl"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumPl) = "pl"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "de" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumDe
          | val GHC.Classes.== "en" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumEn
          | val GHC.Classes.== "es" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumEs
          | val GHC.Classes.== "fr" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumFr
          | val GHC.Classes.== "it" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumIt
          | val GHC.Classes.== "nl" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumNl
          | val GHC.Classes.== "pl" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableEnumPl
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSofort'PreferredLanguage'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.sofort.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage'EnumOffSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage'EnumOffSession) = "off_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage'EnumOffSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSofort'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.sofort.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSofort'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.swish.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableSwish' = PaymentIntentPaymentMethodOptions'NonNullableSwish'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableSwish'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | reference: A reference for this payment to be displayed in the Swish app.
    --
    -- Constraints:
    --
    -- * Maximum length of 35
    paymentIntentPaymentMethodOptions'NonNullableSwish'Reference :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableSwish'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableSwish'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableSwish'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSwish' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'Reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'Reference obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSwish' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableSwish'" (\obj -> (((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableSwish' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableSwish'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableSwish' :: PaymentIntentPaymentMethodOptions'NonNullableSwish'
mkPaymentIntentPaymentMethodOptions'NonNullableSwish' =
  PaymentIntentPaymentMethodOptions'NonNullableSwish'
    { paymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSwish'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSwish'Reference = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSwish'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSwish'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSwish'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.swish.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSwish'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.swish.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSwish'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.swish.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableSwish'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.twint.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableTwint' = PaymentIntentPaymentMethodOptions'NonNullableTwint'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableTwint'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableTwint'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableTwint'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableTwint'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableTwint' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableTwint' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableTwint'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableTwint' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableTwint'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableTwint' :: PaymentIntentPaymentMethodOptions'NonNullableTwint'
mkPaymentIntentPaymentMethodOptions'NonNullableTwint' =
  PaymentIntentPaymentMethodOptions'NonNullableTwint'
    { paymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableTwint'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableTwint'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableTwint'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableTwint'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.twint.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableTwint'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.twint.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableTwint'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.twint.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableTwint'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.us_bank_account.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount' = PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod'),
    -- | financial_connections:
    paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'FinancialConnections :: (GHC.Maybe.Maybe LinkedAccountOptionsCommon),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | mandate_options:
    paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'MandateOptions :: (GHC.Maybe.Maybe PaymentMethodOptionsUsBankAccountMandateOptions),
    -- | preferred_settlement_speed: Preferred transaction settlement speed
    paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed'),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'),
    -- | target_date: Controls when Stripe will attempt to debit the funds from the customer\'s account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'TargetDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("financial_connections" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'FinancialConnections obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_settlement_speed" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("financial_connections" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'FinancialConnections obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_settlement_speed" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target_date" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'TargetDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'" (\obj -> ((((((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "financial_connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_settlement_speed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableUsBankAccount' :: PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'
mkPaymentIntentPaymentMethodOptions'NonNullableUsBankAccount' =
  PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'
    { paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'FinancialConnections = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'MandateOptions = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'TargetDate = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.us_bank_account.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.us_bank_account.anyOf.properties.preferred_settlement_speed@ in the specification.
--
-- Preferred transaction settlement speed
data PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"fastest"@
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed'EnumFastest
  | -- | Represents the JSON value @"standard"@
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed'EnumFastest) = "fastest"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "fastest" -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed'EnumFastest
          | val GHC.Classes.== "standard" -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed'EnumStandard
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'PreferredSettlementSpeed'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.us_bank_account.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'EnumNone) = "none"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'EnumNone
          | val GHC.Classes.== "off_session" -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'EnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'EnumOnSession
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.us_bank_account.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.wechat_pay.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableWechatPay' = PaymentIntentPaymentMethodOptions'NonNullableWechatPay'
  { -- | app_id: The app ID registered with WeChat Pay. Only required when client is ios or android.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentPaymentMethodOptions'NonNullableWechatPay'AppId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod'),
    -- | client: The client type that the end customer will pay from
    paymentIntentPaymentMethodOptions'NonNullableWechatPay'Client :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullable)),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableWechatPay'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableWechatPay'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableWechatPay'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableWechatPay'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableWechatPay' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("app_id" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'AppId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'Client obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("app_id" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'AppId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'Client obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableWechatPay' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableWechatPay'" (\obj -> ((((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableWechatPay' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "app_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableWechatPay'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableWechatPay' :: PaymentIntentPaymentMethodOptions'NonNullableWechatPay'
mkPaymentIntentPaymentMethodOptions'NonNullableWechatPay' =
  PaymentIntentPaymentMethodOptions'NonNullableWechatPay'
    { paymentIntentPaymentMethodOptions'NonNullableWechatPay'AppId = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableWechatPay'Client = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableWechatPay'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableWechatPay'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableWechatPay'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableWechatPay'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.wechat_pay.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableWechatPay'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.wechat_pay.anyOf.properties.client@ in the specification.
--
-- The client type that the end customer will pay from
data PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"android"@
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableEnumAndroid
  | -- | Represents the JSON value @"ios"@
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableEnumIos
  | -- | Represents the JSON value @"web"@
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableEnumWeb
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullable where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableOther val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableEnumAndroid) = "android"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableEnumIos) = "ios"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableEnumWeb) = "web"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "android" -> PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableEnumAndroid
          | val GHC.Classes.== "ios" -> PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableEnumIos
          | val GHC.Classes.== "web" -> PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableEnumWeb
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableWechatPay'Client'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.wechat_pay.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableWechatPay'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.wechat_pay.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableWechatPay'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.zip.anyOf@ in the specification.
data PaymentIntentPaymentMethodOptions'NonNullableZip' = PaymentIntentPaymentMethodOptions'NonNullableZip'
  { -- | capture_method: Controls when the funds will be captured from the customer\'s account.
    paymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod'),
    -- | installments:
    paymentIntentPaymentMethodOptions'NonNullableZip'Installments :: (GHC.Maybe.Maybe PaymentFlowsInstallmentOptions),
    -- | request_incremental_authorization_support: Request ability to [increment](https:\/\/stripe.com\/docs\/terminal\/features\/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https:\/\/stripe.com\/docs\/api\/charges\/object\#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https:\/\/stripe.com\/docs\/api\/payment_intents\/confirm) response to verify support.
    paymentIntentPaymentMethodOptions'NonNullableZip'RequestIncrementalAuthorizationSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_cvc_recollection: When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
    paymentIntentPaymentMethodOptions'NonNullableZip'RequireCvcRecollection :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing:
    paymentIntentPaymentMethodOptions'NonNullableZip'Routing :: (GHC.Maybe.Maybe PaymentMethodOptionsCardPresentRouting),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
    --
    -- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
    --
    -- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
    paymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage'),
    -- | verification_method: Bank account verification method.
    paymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableZip' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'Installments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_incremental_authorization_support" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'RequestIncrementalAuthorizationSupport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("require_cvc_recollection" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'RequireCvcRecollection obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'Routing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (paymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableZip' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'NonNullableZip'" (\obj -> ((((((GHC.Base.pure PaymentIntentPaymentMethodOptions'NonNullableZip' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_incremental_authorization_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "require_cvc_recollection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'PaymentIntentPaymentMethodOptions'NonNullableZip'' with all required fields.
mkPaymentIntentPaymentMethodOptions'NonNullableZip' :: PaymentIntentPaymentMethodOptions'NonNullableZip'
mkPaymentIntentPaymentMethodOptions'NonNullableZip' =
  PaymentIntentPaymentMethodOptions'NonNullableZip'
    { paymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableZip'Installments = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableZip'RequestIncrementalAuthorizationSupport = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableZip'RequireCvcRecollection = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableZip'Routing = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage = GHC.Maybe.Nothing,
      paymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.zip.anyOf.properties.capture_method@ in the specification.
--
-- Controls when the funds will be captured from the customer\'s account.
data PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"manual"@
    PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod'EnumManual
  | -- | Represents the JSON value @"manual_preferred"@
    PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod'EnumManualPreferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod'EnumManual) = "manual"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod'EnumManualPreferred) = "manual_preferred"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "manual" -> PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod'EnumManual
          | val GHC.Classes.== "manual_preferred" -> PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod'EnumManualPreferred
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableZip'CaptureMethod'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.zip.anyOf.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    PaymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "none" -> PaymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage'EnumNone
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableZip'SetupFutureUsage'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.payment_method_options.anyOf.properties.zip.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod' where
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'Other val) = val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'EnumInstant) = "instant"
  toJSON (PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'EnumAutomatic
          | val GHC.Classes.== "instant" -> PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'EnumInstant
          | val GHC.Classes.== "microdeposits" -> PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'EnumMicrodeposits
          | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptions'NonNullableZip'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.processing.anyOf@ in the specification.
--
-- If present, this property tells you about the processing state of the payment.
data PaymentIntentProcessing'NonNullable = PaymentIntentProcessing'NonNullable
  { -- | card:
    paymentIntentProcessing'NonNullableCard :: (GHC.Maybe.Maybe PaymentIntentCardProcessing),
    -- | type: Type of the payment method for which payment is in \`processing\` state, one of \`card\`.
    paymentIntentProcessing'NonNullableType :: (GHC.Maybe.Maybe PaymentIntentProcessing'NonNullableType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentProcessing'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (paymentIntentProcessing'NonNullableCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentIntentProcessing'NonNullableType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (paymentIntentProcessing'NonNullableCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (paymentIntentProcessing'NonNullableType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentProcessing'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentProcessing'NonNullable" (\obj -> (GHC.Base.pure PaymentIntentProcessing'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'PaymentIntentProcessing'NonNullable' with all required fields.
mkPaymentIntentProcessing'NonNullable :: PaymentIntentProcessing'NonNullable
mkPaymentIntentProcessing'NonNullable =
  PaymentIntentProcessing'NonNullable
    { paymentIntentProcessing'NonNullableCard = GHC.Maybe.Nothing,
      paymentIntentProcessing'NonNullableType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.processing.anyOf.properties.type@ in the specification.
--
-- Type of the payment method for which payment is in \`processing\` state, one of \`card\`.
data PaymentIntentProcessing'NonNullableType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentProcessing'NonNullableType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentProcessing'NonNullableType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"card"@
    PaymentIntentProcessing'NonNullableType'EnumCard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentProcessing'NonNullableType' where
  toJSON (PaymentIntentProcessing'NonNullableType'Other val) = val
  toJSON (PaymentIntentProcessing'NonNullableType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentProcessing'NonNullableType'EnumCard) = "card"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentProcessing'NonNullableType' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "card" -> PaymentIntentProcessing'NonNullableType'EnumCard
          | GHC.Base.otherwise -> PaymentIntentProcessing'NonNullableType'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.payment_intent.properties.review.anyOf@ in the specification.
--
-- ID of the review associated with this PaymentIntent, if any.
data PaymentIntentReview'NonNullableVariants
  = PaymentIntentReview'NonNullableText Data.Text.Internal.Text
  | PaymentIntentReview'NonNullableReview Review
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentReview'NonNullableVariants where
  toJSON (PaymentIntentReview'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentIntentReview'NonNullableReview a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentReview'NonNullableVariants where
  parseJSON val = case (PaymentIntentReview'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentIntentReview'NonNullableReview Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](\/payments\/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don\'t provide a Customer, you can still [attach](\/api\/payment_methods\/attach) the payment method to a Customer after the transaction completes.
--
-- If the payment method is \`card_present\` and isn\'t a digital wallet, Stripe creates and attaches a [generated_card](\/api\/charges\/object\#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
--
-- When processing card payments, Stripe uses \`setup_future_usage\` to help you comply with regional legislation and network rules, such as [SCA](\/strong-customer-authentication).
data PaymentIntentSetupFutureUsage'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentSetupFutureUsage'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentSetupFutureUsage'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"off_session"@
    PaymentIntentSetupFutureUsage'NonNullableEnumOffSession
  | -- | Represents the JSON value @"on_session"@
    PaymentIntentSetupFutureUsage'NonNullableEnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentSetupFutureUsage'NonNullable where
  toJSON (PaymentIntentSetupFutureUsage'NonNullableOther val) = val
  toJSON (PaymentIntentSetupFutureUsage'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentSetupFutureUsage'NonNullableEnumOffSession) = "off_session"
  toJSON (PaymentIntentSetupFutureUsage'NonNullableEnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentSetupFutureUsage'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "off_session" -> PaymentIntentSetupFutureUsage'NonNullableEnumOffSession
          | val GHC.Classes.== "on_session" -> PaymentIntentSetupFutureUsage'NonNullableEnumOnSession
          | GHC.Base.otherwise -> PaymentIntentSetupFutureUsage'NonNullableOther val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.shipping.anyOf@ in the specification.
--
-- Shipping information for this PaymentIntent.
data PaymentIntentShipping'NonNullable = PaymentIntentShipping'NonNullable
  { -- | address:
    paymentIntentShipping'NonNullableAddress :: (GHC.Maybe.Maybe Address),
    -- | carrier: The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentShipping'NonNullableCarrier :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: Recipient name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentShipping'NonNullableName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | phone: Recipient phone (including extension).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentShipping'NonNullablePhone :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | tracking_number: The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentShipping'NonNullableTrackingNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentShipping'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (paymentIntentShipping'NonNullableAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("carrier" Data.Aeson.Types.ToJSON..=)) (paymentIntentShipping'NonNullableCarrier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (paymentIntentShipping'NonNullableName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (paymentIntentShipping'NonNullablePhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tracking_number" Data.Aeson.Types.ToJSON..=)) (paymentIntentShipping'NonNullableTrackingNumber obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (paymentIntentShipping'NonNullableAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("carrier" Data.Aeson.Types.ToJSON..=)) (paymentIntentShipping'NonNullableCarrier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (paymentIntentShipping'NonNullableName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (paymentIntentShipping'NonNullablePhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tracking_number" Data.Aeson.Types.ToJSON..=)) (paymentIntentShipping'NonNullableTrackingNumber obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentShipping'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentShipping'NonNullable" (\obj -> ((((GHC.Base.pure PaymentIntentShipping'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tracking_number"))

-- | Create a new 'PaymentIntentShipping'NonNullable' with all required fields.
mkPaymentIntentShipping'NonNullable :: PaymentIntentShipping'NonNullable
mkPaymentIntentShipping'NonNullable =
  PaymentIntentShipping'NonNullable
    { paymentIntentShipping'NonNullableAddress = GHC.Maybe.Nothing,
      paymentIntentShipping'NonNullableCarrier = GHC.Maybe.Nothing,
      paymentIntentShipping'NonNullableName = GHC.Maybe.Nothing,
      paymentIntentShipping'NonNullablePhone = GHC.Maybe.Nothing,
      paymentIntentShipping'NonNullableTrackingNumber = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_intent.properties.status@ in the specification.
--
-- Status of this PaymentIntent, one of \`requires_payment_method\`, \`requires_confirmation\`, \`requires_action\`, \`processing\`, \`requires_capture\`, \`canceled\`, or \`succeeded\`. Read more about each PaymentIntent [status](https:\/\/stripe.com\/docs\/payments\/intents\#intent-statuses).
data PaymentIntentStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentIntentStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentIntentStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"canceled"@
    PaymentIntentStatus'EnumCanceled
  | -- | Represents the JSON value @"processing"@
    PaymentIntentStatus'EnumProcessing
  | -- | Represents the JSON value @"requires_action"@
    PaymentIntentStatus'EnumRequiresAction
  | -- | Represents the JSON value @"requires_capture"@
    PaymentIntentStatus'EnumRequiresCapture
  | -- | Represents the JSON value @"requires_confirmation"@
    PaymentIntentStatus'EnumRequiresConfirmation
  | -- | Represents the JSON value @"requires_payment_method"@
    PaymentIntentStatus'EnumRequiresPaymentMethod
  | -- | Represents the JSON value @"succeeded"@
    PaymentIntentStatus'EnumSucceeded
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentStatus' where
  toJSON (PaymentIntentStatus'Other val) = val
  toJSON (PaymentIntentStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentIntentStatus'EnumCanceled) = "canceled"
  toJSON (PaymentIntentStatus'EnumProcessing) = "processing"
  toJSON (PaymentIntentStatus'EnumRequiresAction) = "requires_action"
  toJSON (PaymentIntentStatus'EnumRequiresCapture) = "requires_capture"
  toJSON (PaymentIntentStatus'EnumRequiresConfirmation) = "requires_confirmation"
  toJSON (PaymentIntentStatus'EnumRequiresPaymentMethod) = "requires_payment_method"
  toJSON (PaymentIntentStatus'EnumSucceeded) = "succeeded"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "canceled" -> PaymentIntentStatus'EnumCanceled
          | val GHC.Classes.== "processing" -> PaymentIntentStatus'EnumProcessing
          | val GHC.Classes.== "requires_action" -> PaymentIntentStatus'EnumRequiresAction
          | val GHC.Classes.== "requires_capture" -> PaymentIntentStatus'EnumRequiresCapture
          | val GHC.Classes.== "requires_confirmation" -> PaymentIntentStatus'EnumRequiresConfirmation
          | val GHC.Classes.== "requires_payment_method" -> PaymentIntentStatus'EnumRequiresPaymentMethod
          | val GHC.Classes.== "succeeded" -> PaymentIntentStatus'EnumSucceeded
          | GHC.Base.otherwise -> PaymentIntentStatus'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_intent.properties.transfer_data.anyOf@ in the specification.
--
-- The data that automatically creates a Transfer after the payment finalizes. Learn more about the [use case for connected accounts](https:\\\/\\\/stripe.com\\\/docs\\\/payments\\\/connected-accounts).
data PaymentIntentTransferData'NonNullable = PaymentIntentTransferData'NonNullable
  { -- | amount: The amount transferred to the destination account. This transfer will occur automatically after the payment succeeds. If no amount is specified, by default the entire payment amount is transferred to the destination account.
    --  The amount must be less than or equal to the [amount](https:\/\/stripe.com\/docs\/api\/payment_intents\/object\#payment_intent_object-amount), and must be a positive integer
    --  representing how much to transfer in the smallest currency unit (e.g., 100 cents to charge \$1.00).
    paymentIntentTransferData'NonNullableAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | destination: The account (if any) that the payment is attributed to for tax reporting, and where funds from the payment are transferred to after payment success.
    paymentIntentTransferData'NonNullableDestination :: (GHC.Maybe.Maybe PaymentIntentTransferData'NonNullableDestination'Variants)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentTransferData'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (paymentIntentTransferData'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("destination" Data.Aeson.Types.ToJSON..=)) (paymentIntentTransferData'NonNullableDestination obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (paymentIntentTransferData'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("destination" Data.Aeson.Types.ToJSON..=)) (paymentIntentTransferData'NonNullableDestination obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentTransferData'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentTransferData'NonNullable" (\obj -> (GHC.Base.pure PaymentIntentTransferData'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "destination"))

-- | Create a new 'PaymentIntentTransferData'NonNullable' with all required fields.
mkPaymentIntentTransferData'NonNullable :: PaymentIntentTransferData'NonNullable
mkPaymentIntentTransferData'NonNullable =
  PaymentIntentTransferData'NonNullable
    { paymentIntentTransferData'NonNullableAmount = GHC.Maybe.Nothing,
      paymentIntentTransferData'NonNullableDestination = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.payment_intent.properties.transfer_data.anyOf.properties.destination.anyOf@ in the specification.
--
-- The account (if any) that the payment is attributed to for tax reporting, and where funds from the payment are transferred to after payment success.
data PaymentIntentTransferData'NonNullableDestination'Variants
  = PaymentIntentTransferData'NonNullableDestination'Text Data.Text.Internal.Text
  | PaymentIntentTransferData'NonNullableDestination'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentTransferData'NonNullableDestination'Variants where
  toJSON (PaymentIntentTransferData'NonNullableDestination'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentIntentTransferData'NonNullableDestination'Account a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentTransferData'NonNullableDestination'Variants where
  parseJSON val = case (PaymentIntentTransferData'NonNullableDestination'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentIntentTransferData'NonNullableDestination'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
