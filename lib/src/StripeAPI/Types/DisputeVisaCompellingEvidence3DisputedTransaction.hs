{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DisputeVisaCompellingEvidence3DisputedTransaction
module StripeAPI.Types.DisputeVisaCompellingEvidence3DisputedTransaction where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.DisputeTransactionShippingAddress
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.dispute_visa_compelling_evidence3_disputed_transaction@ in the specification.
data DisputeVisaCompellingEvidence3DisputedTransaction = DisputeVisaCompellingEvidence3DisputedTransaction
  { -- | customer_account_id: User Account ID used to log into business platform. Must be recognizable by the user.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3DisputedTransactionCustomerAccountId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | customer_device_fingerprint: Unique identifier of the cardholder’s device derived from a combination of at least two hardware and software attributes. Must be at least 20 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3DisputedTransactionCustomerDeviceFingerprint :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | customer_device_id: Unique identifier of the cardholder’s device such as a device serial number (e.g., International Mobile Equipment Identity [IMEI]). Must be at least 15 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3DisputedTransactionCustomerDeviceId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | customer_email_address: The email address of the customer.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3DisputedTransactionCustomerEmailAddress :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | customer_purchase_ip: The IP address that the customer used when making the purchase.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3DisputedTransactionCustomerPurchaseIp :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | merchandise_or_services: Categorization of disputed payment.
    disputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullable)),
    -- | product_description: A description of the product or service that was sold.
    --
    -- Constraints:
    --
    -- * Maximum length of 150000
    disputeVisaCompellingEvidence3DisputedTransactionProductDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | shipping_address: The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission.
    disputeVisaCompellingEvidence3DisputedTransactionShippingAddress :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable DisputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DisputeVisaCompellingEvidence3DisputedTransaction where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_account_id" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionCustomerAccountId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_device_fingerprint" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionCustomerDeviceFingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_device_id" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionCustomerDeviceId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_email_address" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionCustomerEmailAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_purchase_ip" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionCustomerPurchaseIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("merchandise_or_services" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_description" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionProductDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_address" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_account_id" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionCustomerAccountId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_device_fingerprint" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionCustomerDeviceFingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_device_id" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionCustomerDeviceId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_email_address" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionCustomerEmailAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_purchase_ip" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionCustomerPurchaseIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("merchandise_or_services" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_description" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionProductDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_address" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DisputeVisaCompellingEvidence3DisputedTransaction where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DisputeVisaCompellingEvidence3DisputedTransaction" (\obj -> (((((((GHC.Base.pure DisputeVisaCompellingEvidence3DisputedTransaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_device_fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_device_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_email_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_purchase_ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "merchandise_or_services")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "product_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "shipping_address"))

-- | Create a new 'DisputeVisaCompellingEvidence3DisputedTransaction' with all required fields.
mkDisputeVisaCompellingEvidence3DisputedTransaction :: DisputeVisaCompellingEvidence3DisputedTransaction
mkDisputeVisaCompellingEvidence3DisputedTransaction =
  DisputeVisaCompellingEvidence3DisputedTransaction
    { disputeVisaCompellingEvidence3DisputedTransactionCustomerAccountId = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3DisputedTransactionCustomerDeviceFingerprint = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3DisputedTransactionCustomerDeviceId = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3DisputedTransactionCustomerEmailAddress = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3DisputedTransactionCustomerPurchaseIp = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3DisputedTransactionProductDescription = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3DisputedTransactionShippingAddress = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.dispute_visa_compelling_evidence3_disputed_transaction.properties.merchandise_or_services@ in the specification.
--
-- Categorization of disputed payment.
data DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"merchandise"@
    DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullableEnumMerchandise
  | -- | Represents the JSON value @"services"@
    DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullableEnumServices
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullable where
  toJSON (DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullableOther val) = val
  toJSON (DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullableEnumMerchandise) = "merchandise"
  toJSON (DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullableEnumServices) = "services"

instance Data.Aeson.Types.FromJSON.FromJSON DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "merchandise" -> DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullableEnumMerchandise
          | val GHC.Classes.== "services" -> DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullableEnumServices
          | GHC.Base.otherwise -> DisputeVisaCompellingEvidence3DisputedTransactionMerchandiseOrServices'NonNullableOther val
      )

-- | Defines the object schema located at @components.schemas.dispute_visa_compelling_evidence3_disputed_transaction.properties.shipping_address.anyOf@ in the specification.
--
-- The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission.
data DisputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullable = DisputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullable
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullablePostalCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DisputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableState obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableState obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DisputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DisputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullable" (\obj -> (((((GHC.Base.pure DisputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'DisputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullable' with all required fields.
mkDisputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullable :: DisputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullable
mkDisputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullable =
  DisputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullable
    { disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableCity = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableCountry = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableLine1 = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableLine2 = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullablePostalCode = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3DisputedTransactionShippingAddress'NonNullableState = GHC.Maybe.Nothing
    }
