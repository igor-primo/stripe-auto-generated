{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DisputeVisaCompellingEvidence3PriorUndisputedTransaction
module StripeAPI.Types.DisputeVisaCompellingEvidence3PriorUndisputedTransaction where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.DisputeTransactionShippingAddress
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.dispute_visa_compelling_evidence3_prior_undisputed_transaction@ in the specification.
data DisputeVisaCompellingEvidence3PriorUndisputedTransaction = DisputeVisaCompellingEvidence3PriorUndisputedTransaction
  { -- | charge: Stripe charge ID for the Visa Compelling Evidence 3.0 eligible prior charge.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3PriorUndisputedTransactionCharge :: Data.Text.Internal.Text,
    -- | customer_account_id: User Account ID used to log into business platform. Must be recognizable by the user.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerAccountId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | customer_device_fingerprint: Unique identifier of the cardholder’s device derived from a combination of at least two hardware and software attributes. Must be at least 20 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerDeviceFingerprint :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | customer_device_id: Unique identifier of the cardholder’s device such as a device serial number (e.g., International Mobile Equipment Identity [IMEI]). Must be at least 15 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerDeviceId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | customer_email_address: The email address of the customer.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerEmailAddress :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | customer_purchase_ip: The IP address that the customer used when making the purchase.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerPurchaseIp :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | product_description: A description of the product or service that was sold.
    --
    -- Constraints:
    --
    -- * Maximum length of 150000
    disputeVisaCompellingEvidence3PriorUndisputedTransactionProductDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | shipping_address: The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission.
    disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable DisputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DisputeVisaCompellingEvidence3PriorUndisputedTransaction where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["charge" Data.Aeson.Types.ToJSON..= disputeVisaCompellingEvidence3PriorUndisputedTransactionCharge obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_account_id" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerAccountId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_device_fingerprint" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerDeviceFingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_device_id" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerDeviceId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_email_address" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerEmailAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_purchase_ip" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerPurchaseIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_description" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionProductDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_address" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["charge" Data.Aeson.Types.ToJSON..= disputeVisaCompellingEvidence3PriorUndisputedTransactionCharge obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_account_id" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerAccountId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_device_fingerprint" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerDeviceFingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_device_id" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerDeviceId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_email_address" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerEmailAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_purchase_ip" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerPurchaseIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_description" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionProductDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_address" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DisputeVisaCompellingEvidence3PriorUndisputedTransaction where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DisputeVisaCompellingEvidence3PriorUndisputedTransaction" (\obj -> (((((((GHC.Base.pure DisputeVisaCompellingEvidence3PriorUndisputedTransaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_account_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_device_fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_device_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_email_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_purchase_ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "product_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "shipping_address"))

-- | Create a new 'DisputeVisaCompellingEvidence3PriorUndisputedTransaction' with all required fields.
mkDisputeVisaCompellingEvidence3PriorUndisputedTransaction ::
  -- | 'disputeVisaCompellingEvidence3PriorUndisputedTransactionCharge'
  Data.Text.Internal.Text ->
  DisputeVisaCompellingEvidence3PriorUndisputedTransaction
mkDisputeVisaCompellingEvidence3PriorUndisputedTransaction disputeVisaCompellingEvidence3PriorUndisputedTransactionCharge =
  DisputeVisaCompellingEvidence3PriorUndisputedTransaction
    { disputeVisaCompellingEvidence3PriorUndisputedTransactionCharge = disputeVisaCompellingEvidence3PriorUndisputedTransactionCharge,
      disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerAccountId = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerDeviceFingerprint = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerDeviceId = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerEmailAddress = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3PriorUndisputedTransactionCustomerPurchaseIp = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3PriorUndisputedTransactionProductDescription = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.dispute_visa_compelling_evidence3_prior_undisputed_transaction.properties.shipping_address.anyOf@ in the specification.
--
-- The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission.
data DisputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullable = DisputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullable
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullablePostalCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DisputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableState obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableState obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DisputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DisputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullable" (\obj -> (((((GHC.Base.pure DisputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'DisputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullable' with all required fields.
mkDisputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullable :: DisputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullable
mkDisputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullable =
  DisputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullable
    { disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableCity = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableCountry = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableLine1 = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableLine2 = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullablePostalCode = GHC.Maybe.Nothing,
      disputeVisaCompellingEvidence3PriorUndisputedTransactionShippingAddress'NonNullableState = GHC.Maybe.Nothing
    }
