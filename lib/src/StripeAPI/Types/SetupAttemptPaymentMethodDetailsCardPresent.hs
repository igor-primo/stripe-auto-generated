{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SetupAttemptPaymentMethodDetailsCardPresent
module StripeAPI.Types.SetupAttemptPaymentMethodDetailsCardPresent where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentMethod
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsCardPresentOffline
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.setup_attempt_payment_method_details_card_present@ in the specification.
data SetupAttemptPaymentMethodDetailsCardPresent = SetupAttemptPaymentMethodDetailsCardPresent
  { -- | generated_card: The ID of the Card PaymentMethod which was generated by this SetupAttempt.
    setupAttemptPaymentMethodDetailsCardPresentGeneratedCard :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'NonNullableVariants)),
    -- | offline: Details about payments collected offline.
    setupAttemptPaymentMethodDetailsCardPresentOffline :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupAttemptPaymentMethodDetailsCardPresent where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("generated_card" Data.Aeson.Types.ToJSON..=)) (setupAttemptPaymentMethodDetailsCardPresentGeneratedCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("offline" Data.Aeson.Types.ToJSON..=)) (setupAttemptPaymentMethodDetailsCardPresentOffline obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("generated_card" Data.Aeson.Types.ToJSON..=)) (setupAttemptPaymentMethodDetailsCardPresentGeneratedCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("offline" Data.Aeson.Types.ToJSON..=)) (setupAttemptPaymentMethodDetailsCardPresentOffline obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupAttemptPaymentMethodDetailsCardPresent where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupAttemptPaymentMethodDetailsCardPresent" (\obj -> (GHC.Base.pure SetupAttemptPaymentMethodDetailsCardPresent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "generated_card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "offline"))

-- | Create a new 'SetupAttemptPaymentMethodDetailsCardPresent' with all required fields.
mkSetupAttemptPaymentMethodDetailsCardPresent :: SetupAttemptPaymentMethodDetailsCardPresent
mkSetupAttemptPaymentMethodDetailsCardPresent =
  SetupAttemptPaymentMethodDetailsCardPresent
    { setupAttemptPaymentMethodDetailsCardPresentGeneratedCard = GHC.Maybe.Nothing,
      setupAttemptPaymentMethodDetailsCardPresentOffline = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.setup_attempt_payment_method_details_card_present.properties.generated_card.anyOf@ in the specification.
--
-- The ID of the Card PaymentMethod which was generated by this SetupAttempt.
data SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'NonNullableVariants
  = SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'NonNullableText Data.Text.Internal.Text
  | SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'NonNullablePaymentMethod PaymentMethod
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'NonNullableVariants where
  toJSON (SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'NonNullablePaymentMethod a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'NonNullableVariants where
  parseJSON val = case (SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'NonNullablePaymentMethod Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.setup_attempt_payment_method_details_card_present.properties.offline.anyOf@ in the specification.
--
-- Details about payments collected offline.
data SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullable = SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullable
  { -- | stored_at: Time at which the payment was collected while offline
    setupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableStoredAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | type: The method used to process this payment method offline. Only deferred is allowed.
    setupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stored_at" Data.Aeson.Types.ToJSON..=)) (setupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableStoredAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (setupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stored_at" Data.Aeson.Types.ToJSON..=)) (setupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableStoredAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (setupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullable" (\obj -> (GHC.Base.pure SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "stored_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullable' with all required fields.
mkSetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullable :: SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullable
mkSetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullable =
  SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullable
    { setupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableStoredAt = GHC.Maybe.Nothing,
      setupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.setup_attempt_payment_method_details_card_present.properties.offline.anyOf.properties.type@ in the specification.
--
-- The method used to process this payment method offline. Only deferred is allowed.
data SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"deferred"@
    SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableEnumDeferred
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullable where
  toJSON (SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableOther val) = val
  toJSON (SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableEnumDeferred) = "deferred"

instance Data.Aeson.Types.FromJSON.FromJSON SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "deferred" -> SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableEnumDeferred
          | GHC.Base.otherwise -> SetupAttemptPaymentMethodDetailsCardPresentOffline'NonNullableType'NonNullableOther val
      )
